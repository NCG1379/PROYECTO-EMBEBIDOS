
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000180 <Reset_Handler>:
 8000180:	b672      	cpsid	i
 8000182:	4825      	ldr	r0, [pc, #148]	; (8000218 <endfiniloop+0x4>)
 8000184:	f380 8809 	msr	PSP, r0
 8000188:	4824      	ldr	r0, [pc, #144]	; (800021c <endfiniloop+0x8>)
 800018a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800018e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000192:	6008      	str	r0, [r1, #0]
 8000194:	2002      	movs	r0, #2
 8000196:	f380 8814 	msr	CONTROL, r0
 800019a:	f3bf 8f6f 	isb	sy
 800019e:	f000 ffef 	bl	8001180 <__core_init>
 80001a2:	f001 fcd5 	bl	8001b50 <__early_init>
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <endfiniloop+0xc>)
 80001a8:	491e      	ldr	r1, [pc, #120]	; (8000224 <endfiniloop+0x10>)
 80001aa:	4a1f      	ldr	r2, [pc, #124]	; (8000228 <endfiniloop+0x14>)

080001ac <msloop>:
 80001ac:	4291      	cmp	r1, r2
 80001ae:	bf3c      	itt	cc
 80001b0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001b4:	e7fa      	bcc.n	80001ac <msloop>
 80001b6:	491d      	ldr	r1, [pc, #116]	; (800022c <endfiniloop+0x18>)
 80001b8:	4a17      	ldr	r2, [pc, #92]	; (8000218 <endfiniloop+0x4>)

080001ba <psloop>:
 80001ba:	4291      	cmp	r1, r2
 80001bc:	bf3c      	itt	cc
 80001be:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c2:	e7fa      	bcc.n	80001ba <psloop>
 80001c4:	491a      	ldr	r1, [pc, #104]	; (8000230 <endfiniloop+0x1c>)
 80001c6:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <endfiniloop+0x20>)
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <endfiniloop+0x24>)

080001ca <dloop>:
 80001ca:	429a      	cmp	r2, r3
 80001cc:	bf3e      	ittt	cc
 80001ce:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001d2:	f842 0b04 	strcc.w	r0, [r2], #4
 80001d6:	e7f8      	bcc.n	80001ca <dloop>
 80001d8:	2000      	movs	r0, #0
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <endfiniloop+0x28>)
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <endfiniloop+0x2c>)

080001de <bloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <bloop>
 80001e8:	f000 ff8a 	bl	8001100 <__init_ram_areas>
 80001ec:	f000 ffc0 	bl	8001170 <__late_init>
 80001f0:	4c14      	ldr	r4, [pc, #80]	; (8000244 <endfiniloop+0x30>)
 80001f2:	4d15      	ldr	r5, [pc, #84]	; (8000248 <endfiniloop+0x34>)

080001f4 <initloop>:
 80001f4:	42ac      	cmp	r4, r5
 80001f6:	da03      	bge.n	8000200 <endinitloop>
 80001f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001fc:	4788      	blx	r1
 80001fe:	e7f9      	b.n	80001f4 <initloop>

08000200 <endinitloop>:
 8000200:	f001 f8fe 	bl	8001400 <main>
 8000204:	4c11      	ldr	r4, [pc, #68]	; (800024c <endfiniloop+0x38>)
 8000206:	4d12      	ldr	r5, [pc, #72]	; (8000250 <endfiniloop+0x3c>)

08000208 <finiloop>:
 8000208:	42ac      	cmp	r4, r5
 800020a:	da03      	bge.n	8000214 <endfiniloop>
 800020c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000210:	4788      	blx	r1
 8000212:	e7f9      	b.n	8000208 <finiloop>

08000214 <endfiniloop>:
 8000214:	f000 bfa4 	b.w	8001160 <__default_exit>
 8000218:	20000800 	.word	0x20000800
 800021c:	08000000 	.word	0x08000000
 8000220:	55555555 	.word	0x55555555
 8000224:	20000000 	.word	0x20000000
 8000228:	20000400 	.word	0x20000400
 800022c:	20000400 	.word	0x20000400
 8000230:	08001d7c 	.word	0x08001d7c
 8000234:	20000800 	.word	0x20000800
 8000238:	20000800 	.word	0x20000800
 800023c:	20000800 	.word	0x20000800
 8000240:	20000a6c 	.word	0x20000a6c
 8000244:	08000180 	.word	0x08000180
 8000248:	08000180 	.word	0x08000180
 800024c:	08000180 	.word	0x08000180
 8000250:	08000180 	.word	0x08000180

08000254 <_port_switch>:
 8000254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000258:	f8c1 d00c 	str.w	sp, [r1, #12]
 800025c:	68c3      	ldr	r3, [r0, #12]
 800025e:	469d      	mov	sp, r3
 8000260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000264 <_port_thread_start>:
 8000264:	2300      	movs	r3, #0
 8000266:	f383 8811 	msr	BASEPRI, r3
 800026a:	4628      	mov	r0, r5
 800026c:	47a0      	blx	r4
 800026e:	2000      	movs	r0, #0
 8000270:	f000 fef6 	bl	8001060 <chThdExit>

08000274 <_port_switch_from_isr>:
 8000274:	f000 ff24 	bl	80010c0 <chSchDoReschedule>

08000278 <_port_exit_from_isr>:
 8000278:	df00      	svc	0
 800027a:	e7fe      	b.n	800027a <_port_exit_from_isr+0x2>
 800027c:	0000      	movs	r0, r0
	...

08000280 <wakeup.4656.4242>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000280:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000282:	2320      	movs	r3, #32
 8000284:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000288:	f890 3020 	ldrb.w	r3, [r0, #32]
 800028c:	2b07      	cmp	r3, #7
 800028e:	d80e      	bhi.n	80002ae <wakeup.4656.4242+0x2e>
 8000290:	e8df f003 	tbb	[pc, r3]
 8000294:	270d0d2b 	.word	0x270d0d2b
 8000298:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 800029c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	3201      	adds	r2, #1
 80002a2:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80002a4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80002a8:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80002aa:	6802      	ldr	r2, [r0, #0]
 80002ac:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80002ae:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80002b2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80002b4:	f640 035c 	movw	r3, #2140	; 0x85c
 80002b8:	6881      	ldr	r1, [r0, #8]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80002ba:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80002bc:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80002c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  do {
    cp = cp->queue.next;
 80002c4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	428a      	cmp	r2, r1
 80002ca:	d2fb      	bcs.n	80002c4 <wakeup.4656.4242+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80002cc:	685a      	ldr	r2, [r3, #4]
 80002ce:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80002d0:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80002d2:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80002d4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80002d6:	6058      	str	r0, [r3, #4]
 80002d8:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80002dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002e0:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80002e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	e7e1      	b.n	80002ae <wakeup.4656.4242+0x2e>
 80002ea:	2300      	movs	r3, #0
 80002ec:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80002f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	f3af 8000 	nop.w
 80002fc:	f3af 8000 	nop.w

08000300 <i2c_lld_serve_tx_end_irq.8324>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000300:	070b      	lsls	r3, r1, #28
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000302:	b430      	push	{r4, r5}
  I2C_TypeDef *dp = i2cp->i2c;
 8000304:	6b42      	ldr	r2, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000306:	d411      	bmi.n	800032c <i2c_lld_serve_tx_end_irq.8324+0x2c>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000308:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800030a:	240e      	movs	r4, #14
 800030c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000310:	680d      	ldr	r5, [r1, #0]
 8000312:	f025 050f 	bic.w	r5, r5, #15
 8000316:	600d      	str	r5, [r1, #0]
 8000318:	7c1b      	ldrb	r3, [r3, #16]
 800031a:	fa04 f303 	lsl.w	r3, r4, r3
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
}
 800031e:	bc30      	pop	{r4, r5}
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000320:	6043      	str	r3, [r0, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000322:	6853      	ldr	r3, [r2, #4]
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	6053      	str	r3, [r2, #4]
}
 800032a:	4770      	bx	lr
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800032e:	f640 035c 	movw	r3, #2140	; 0x85c
 8000332:	f641 32f0 	movw	r2, #7152	; 0x1bf0
 8000336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800033a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800033e:	629a      	str	r2, [r3, #40]	; 0x28
 8000340:	e7fe      	b.n	8000340 <i2c_lld_serve_tx_end_irq.8324+0x40>
 8000342:	bf00      	nop
 8000344:	f3af 8000 	nop.w
 8000348:	f3af 8000 	nop.w
 800034c:	f3af 8000 	nop.w

08000350 <chVTDoResetI.4421>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000350:	f640 035c 	movw	r3, #2140	; 0x85c
 8000354:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000358:	69da      	ldr	r2, [r3, #28]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 800035a:	b4f0      	push	{r4, r5, r6, r7}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800035c:	4282      	cmp	r2, r0
 800035e:	d00f      	beq.n	8000380 <chVTDoResetI.4421+0x30>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000360:	6802      	ldr	r2, [r0, #0]
 8000362:	6841      	ldr	r1, [r0, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000364:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000366:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8000368:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;
 800036a:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800036c:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 800036e:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8000370:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000372:	d003      	beq.n	800037c <chVTDoResetI.4421+0x2c>
      vtp->next->delta += vtp->delta;
 8000374:	8901      	ldrh	r1, [r0, #8]
 8000376:	8913      	ldrh	r3, [r2, #8]
 8000378:	440b      	add	r3, r1
 800037a:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800037c:	bcf0      	pop	{r4, r5, r6, r7}
 800037e:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000380:	6811      	ldr	r1, [r2, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000388:	4281      	cmp	r1, r0
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800038a:	f04f 0400 	mov.w	r4, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800038e:	bf08      	it	eq
 8000390:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000394:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8000396:	60d4      	str	r4, [r2, #12]
 8000398:	bf08      	it	eq
 800039a:	60dc      	streq	r4, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800039c:	d0ee      	beq.n	800037c <chVTDoResetI.4421+0x2c>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800039e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003a2:	6a47      	ldr	r7, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80003a4:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80003a6:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80003a8:	890d      	ldrh	r5, [r1, #8]
 80003aa:	b2ba      	uxth	r2, r7
 80003ac:	1973      	adds	r3, r6, r5
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80003ae:	1b14      	subs	r4, r2, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80003b0:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80003b2:	b2a4      	uxth	r4, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80003b4:	42a3      	cmp	r3, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80003b6:	810b      	strh	r3, [r1, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80003b8:	d9e0      	bls.n	800037c <chVTDoResetI.4421+0x2c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80003ba:	1b1b      	subs	r3, r3, r4
 80003bc:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80003be:	2b01      	cmp	r3, #1
 80003c0:	bf98      	it	ls
 80003c2:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 80003c4:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	6343      	str	r3, [r0, #52]	; 0x34
 80003ca:	e7d7      	b.n	800037c <chVTDoResetI.4421+0x2c>
 80003cc:	f3af 8000 	nop.w

080003d0 <chVTDoSetI.constprop.19.4455>:
 * @param[in] par       a parameter that will be passed to the callback
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80003d2:	f640 045c 	movw	r4, #2140	; 0x85c
 80003d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80003da:	4625      	mov	r5, r4
 80003dc:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003e0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 80003e4:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80003e8:	f240 2681 	movw	r6, #641	; 0x281
 80003ec:	f6c0 0600 	movt	r6, #2048	; 0x800
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80003f0:	2901      	cmp	r1, #1
 80003f2:	bf98      	it	ls
 80003f4:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80003f6:	42ab      	cmp	r3, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80003f8:	6102      	str	r2, [r0, #16]
  vtp->func = vtfunc;
 80003fa:	60c6      	str	r6, [r0, #12]
 80003fc:	fa1f f28c 	uxth.w	r2, ip
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000400:	d026      	beq.n	8000450 <chVTDoSetI.constprop.19.4455+0x80>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8000402:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8000404:	1b95      	subs	r5, r2, r6
 8000406:	194a      	adds	r2, r1, r5
 8000408:	b292      	uxth	r2, r2

    if (delta < now - ch.vtlist.lasttime) {
 800040a:	42aa      	cmp	r2, r5
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800040c:	8919      	ldrh	r1, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
 800040e:	db1a      	blt.n	8000446 <chVTDoSetI.constprop.19.4455+0x76>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000410:	428a      	cmp	r2, r1
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8000412:	bf3e      	ittt	cc
 8000414:	1995      	addcc	r5, r2, r6
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000416:	b2ad      	uxthcc	r5, r5
 8000418:	637d      	strcc	r5, [r7, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800041a:	428a      	cmp	r2, r1
 800041c:	d905      	bls.n	800042a <chVTDoSetI.constprop.19.4455+0x5a>
    delta -= p->delta;
    p = p->next;
 800041e:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
 8000420:	1a52      	subs	r2, r2, r1
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000422:	8919      	ldrh	r1, [r3, #8]
    delta -= p->delta;
 8000424:	b292      	uxth	r2, r2
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000426:	4291      	cmp	r1, r2
 8000428:	d3f9      	bcc.n	800041e <chVTDoSetI.constprop.19.4455+0x4e>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800042a:	6859      	ldr	r1, [r3, #4]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 800042c:	6003      	str	r3, [r0, #0]
  vtp->prev = vtp->next->prev;
 800042e:	6041      	str	r1, [r0, #4]
  vtp->prev->next = vtp;
 8000430:	6008      	str	r0, [r1, #0]
  p->prev = vtp;
 8000432:	6058      	str	r0, [r3, #4]
  vtp->delta = delta
 8000434:	8102      	strh	r2, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000436:	8918      	ldrh	r0, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000438:	f64f 71ff 	movw	r1, #65535	; 0xffff
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 800043c:	1a82      	subs	r2, r0, r2
 800043e:	811a      	strh	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000440:	84a1      	strh	r1, [r4, #36]	; 0x24
}
 8000442:	bcf0      	pop	{r4, r5, r6, r7}
 8000444:	4770      	bx	lr
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8000446:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000448:	1a52      	subs	r2, r2, r1
 800044a:	b292      	uxth	r2, r2
 800044c:	8919      	ldrh	r1, [r3, #8]
 800044e:	e7e4      	b.n	800041a <chVTDoSetI.constprop.19.4455+0x4a>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8000450:	eb01 0c02 	add.w	ip, r1, r2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000454:	fa1f fc8c 	uxth.w	ip, ip
  STM32_ST_TIM->SR     = 0;
 8000458:	2600      	movs	r6, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800045a:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 800045c:	84e2      	strh	r2, [r4, #38]	; 0x26
      ch.vtlist.next = vtp;
 800045e:	61e0      	str	r0, [r4, #28]
      ch.vtlist.prev = vtp;
 8000460:	6220      	str	r0, [r4, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000462:	6003      	str	r3, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000464:	6043      	str	r3, [r0, #4]
      vtp->delta = delay;
 8000466:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000468:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800046c:	613e      	str	r6, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800046e:	60fd      	str	r5, [r7, #12]
 8000470:	e7e7      	b.n	8000442 <chVTDoSetI.constprop.19.4455+0x72>
 8000472:	bf00      	nop
 8000474:	f3af 8000 	nop.w
 8000478:	f3af 8000 	nop.w
 800047c:	f3af 8000 	nop.w

08000480 <notify3.8706>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8000480:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000484:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	f3af 8000 	nop.w
 8000498:	f3af 8000 	nop.w
 800049c:	f3af 8000 	nop.w

080004a0 <_port_irq_epilogue.4508>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004a0:	2320      	movs	r3, #32
 80004a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80004a6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80004aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80004b4:	d102      	bne.n	80004bc <_port_irq_epilogue.4508+0x1c>
 80004b6:	f383 8811 	msr	BASEPRI, r3
 80004ba:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80004bc:	f3ef 8209 	mrs	r2, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80004c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004c4:	f842 3c04 	str.w	r3, [r2, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80004c8:	f1a2 0320 	sub.w	r3, r2, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80004cc:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80004d0:	f640 035c 	movw	r3, #2140	; 0x85c
 80004d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004d8:	6819      	ldr	r1, [r3, #0]
  tprio_t p2 = currp->prio;
 80004da:	699b      	ldr	r3, [r3, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80004dc:	6889      	ldr	r1, [r1, #8]
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	4299      	cmp	r1, r3
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80004e2:	bf8b      	itete	hi
 80004e4:	f240 2375 	movwhi	r3, #629	; 0x275
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80004e8:	f240 2378 	movwls	r3, #632	; 0x278

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80004ec:	f6c0 0300 	movthi	r3, #2048	; 0x800
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80004f0:	f6c0 0300 	movtls	r3, #2048	; 0x800
 80004f4:	f842 3c08 	str.w	r3, [r2, #-8]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	f3af 8000 	nop.w

08000500 <VectorB0.4442>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000504:	691a      	ldr	r2, [r3, #16]
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800050a:	0792      	lsls	r2, r2, #30
 800050c:	d403      	bmi.n	8000516 <VectorB0.4442+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800050e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000512:	f7ff bfc5 	b.w	80004a0 <_port_irq_epilogue.4508>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800051a:	2320      	movs	r3, #32
 800051c:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000520:	f640 045c 	movw	r4, #2140	; 0x85c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000524:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000528:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800052c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800052e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000530:	69e3      	ldr	r3, [r4, #28]
 8000532:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000534:	1a16      	subs	r6, r2, r0
 8000536:	8919      	ldrh	r1, [r3, #8]
 8000538:	b2b6      	uxth	r6, r6
 800053a:	428e      	cmp	r6, r1
 800053c:	f104 071c 	add.w	r7, r4, #28
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8000540:	bf24      	itt	cs
 8000542:	f04f 0800 	movcs.w	r8, #0
 8000546:	2620      	movcs	r6, #32

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000548:	d31c      	bcc.n	8000584 <VectorB0.4442+0x84>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800054a:	681a      	ldr	r2, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 800054c:	4401      	add	r1, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800054e:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8000550:	84e1      	strh	r1, [r4, #38]	; 0x26

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000552:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000554:	6057      	str	r7, [r2, #4]
    ch.vtlist.next = vtp->next;
 8000556:	61e2      	str	r2, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 8000558:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800055c:	bf08      	it	eq
 800055e:	f8c5 800c 	streq.w	r8, [r5, #12]
 8000562:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000566:	6918      	ldr	r0, [r3, #16]
 8000568:	4788      	blx	r1
 800056a:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800056e:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000570:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8000572:	69e3      	ldr	r3, [r4, #28]
 8000574:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000576:	ebc0 0c02 	rsb	ip, r0, r2
 800057a:	8919      	ldrh	r1, [r3, #8]
 800057c:	fa1f fc8c 	uxth.w	ip, ip
 8000580:	4561      	cmp	r1, ip
 8000582:	d9e2      	bls.n	800054a <VectorB0.4442+0x4a>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000584:	42bb      	cmp	r3, r7
 8000586:	d00a      	beq.n	800059e <VectorB0.4442+0x9e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8000588:	4401      	add	r1, r0
 800058a:	1a89      	subs	r1, r1, r2
 800058c:	b289      	uxth	r1, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800058e:	2901      	cmp	r1, #1
 8000590:	bf98      	it	ls
 8000592:	2102      	movls	r1, #2
  }
  port_timer_set_alarm(now + delta);
 8000594:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000596:	b292      	uxth	r2, r2
 8000598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059c:	635a      	str	r2, [r3, #52]	; 0x34
 800059e:	2300      	movs	r3, #0
 80005a0:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80005a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80005a8:	f7ff bf7a 	b.w	80004a0 <_port_irq_epilogue.4508>
 80005ac:	f3af 8000 	nop.w

080005b0 <Vector84.4494>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80005b0:	2300      	movs	r3, #0
 80005b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005be:	0e09      	lsrs	r1, r1, #24
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	f001 010e 	and.w	r1, r1, #14
 80005c6:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80005c8:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80005ca:	d009      	beq.n	80005e0 <Vector84.4494+0x30>
 80005cc:	f640 0200 	movw	r2, #2048	; 0x800
 80005d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80005d4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80005d6:	0608      	lsls	r0, r1, #24
 80005d8:	6058      	str	r0, [r3, #4]
 80005da:	b10c      	cbz	r4, 80005e0 <Vector84.4494+0x30>
 80005dc:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80005de:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80005e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 80005e4:	f7ff bf5c 	b.w	80004a0 <_port_irq_epilogue.4508>
 80005e8:	f3af 8000 	nop.w
 80005ec:	f3af 8000 	nop.w

080005f0 <Vector80.4496>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 80005f0:	2300      	movs	r3, #0
 80005f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	226c      	movs	r2, #108	; 0x6c
 80005fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005fe:	0d09      	lsrs	r1, r1, #20
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	f001 010e 	and.w	r1, r1, #14
 8000606:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000608:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 800060a:	d009      	beq.n	8000620 <Vector80.4496+0x30>
 800060c:	f640 0200 	movw	r2, #2048	; 0x800
 8000610:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000614:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8000616:	0508      	lsls	r0, r1, #20
 8000618:	6058      	str	r0, [r3, #4]
 800061a:	b10c      	cbz	r4, 8000620 <Vector80.4496+0x30>
 800061c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800061e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8000620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8000624:	f7ff bf3c 	b.w	80004a0 <_port_irq_epilogue.4508>
 8000628:	f3af 8000 	nop.w
 800062c:	f3af 8000 	nop.w

08000630 <Vector7C.4498>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000630:	2300      	movs	r3, #0
 8000632:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800063e:	0c09      	lsrs	r1, r1, #16
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	f001 010e 	and.w	r1, r1, #14
 8000646:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000648:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800064a:	d009      	beq.n	8000660 <Vector7C.4498+0x30>
 800064c:	f640 0200 	movw	r2, #2048	; 0x800
 8000650:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000654:	6a14      	ldr	r4, [r2, #32]
 8000656:	0408      	lsls	r0, r1, #16
 8000658:	6058      	str	r0, [r3, #4]
 800065a:	b10c      	cbz	r4, 8000660 <Vector7C.4498+0x30>
 800065c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800065e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8000660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8000664:	f7ff bf1c 	b.w	80004a0 <_port_irq_epilogue.4508>
 8000668:	f3af 8000 	nop.w
 800066c:	f3af 8000 	nop.w

08000670 <Vector78.4500>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000670:	2300      	movs	r3, #0
 8000672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	2244      	movs	r2, #68	; 0x44
 800067a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800067e:	0b09      	lsrs	r1, r1, #12
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	f001 010e 	and.w	r1, r1, #14
 8000686:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000688:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 800068a:	d009      	beq.n	80006a0 <Vector78.4500+0x30>
 800068c:	f640 0200 	movw	r2, #2048	; 0x800
 8000690:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000694:	6994      	ldr	r4, [r2, #24]
 8000696:	0308      	lsls	r0, r1, #12
 8000698:	6058      	str	r0, [r3, #4]
 800069a:	b10c      	cbz	r4, 80006a0 <Vector78.4500+0x30>
 800069c:	69d0      	ldr	r0, [r2, #28]
 800069e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80006a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80006a4:	f7ff befc 	b.w	80004a0 <_port_irq_epilogue.4508>
 80006a8:	f3af 8000 	nop.w
 80006ac:	f3af 8000 	nop.w

080006b0 <Vector74.4502>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006b6:	6819      	ldr	r1, [r3, #0]
 80006b8:	2230      	movs	r2, #48	; 0x30
 80006ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006be:	0a09      	lsrs	r1, r1, #8
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	f001 010e 	and.w	r1, r1, #14
 80006c6:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80006c8:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80006ca:	d009      	beq.n	80006e0 <Vector74.4502+0x30>
 80006cc:	f640 0200 	movw	r2, #2048	; 0x800
 80006d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80006d4:	6914      	ldr	r4, [r2, #16]
 80006d6:	0208      	lsls	r0, r1, #8
 80006d8:	6058      	str	r0, [r3, #4]
 80006da:	b10c      	cbz	r4, 80006e0 <Vector74.4502+0x30>
 80006dc:	6950      	ldr	r0, [r2, #20]
 80006de:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 80006e4:	f7ff bedc 	b.w	80004a0 <_port_irq_epilogue.4508>
 80006e8:	f3af 8000 	nop.w
 80006ec:	f3af 8000 	nop.w

080006f0 <Vector70.4504>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 80006f0:	2300      	movs	r3, #0
 80006f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	221c      	movs	r2, #28
 80006fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006fe:	0909      	lsrs	r1, r1, #4
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	f001 010e 	and.w	r1, r1, #14
 8000706:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000708:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800070a:	d009      	beq.n	8000720 <Vector70.4504+0x30>
 800070c:	f640 0200 	movw	r2, #2048	; 0x800
 8000710:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000714:	6894      	ldr	r4, [r2, #8]
 8000716:	0108      	lsls	r0, r1, #4
 8000718:	6058      	str	r0, [r3, #4]
 800071a:	b10c      	cbz	r4, 8000720 <Vector70.4504+0x30>
 800071c:	68d0      	ldr	r0, [r2, #12]
 800071e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8000720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8000724:	f7ff bebc 	b.w	80004a0 <_port_irq_epilogue.4508>
 8000728:	f3af 8000 	nop.w
 800072c:	f3af 8000 	nop.w

08000730 <Vector6C.4506>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8000730:	2300      	movs	r3, #0
 8000732:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000736:	2208      	movs	r2, #8
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	f001 010e 	and.w	r1, r1, #14
 8000744:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000746:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8000748:	d008      	beq.n	800075c <Vector6C.4506+0x2c>
 800074a:	f640 0200 	movw	r2, #2048	; 0x800
 800074e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000752:	6814      	ldr	r4, [r2, #0]
 8000754:	6059      	str	r1, [r3, #4]
 8000756:	b10c      	cbz	r4, 800075c <Vector6C.4506+0x2c>
 8000758:	6850      	ldr	r0, [r2, #4]
 800075a:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8000760:	f7ff be9e 	b.w	80004a0 <_port_irq_epilogue.4508>
 8000764:	f3af 8000 	nop.w
 8000768:	f3af 8000 	nop.w
 800076c:	f3af 8000 	nop.w

08000770 <SVC_Handler.4517>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000770:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000774:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000776:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800077a:	2300      	movs	r3, #0
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	f3af 8000 	nop.w
 800078c:	f3af 8000 	nop.w

08000790 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8000790:	b430      	push	{r4, r5}
 8000792:	2320      	movs	r3, #32
 8000794:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8000798:	f640 03d4 	movw	r3, #2260	; 0x8d4
 800079c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007a0:	681d      	ldr	r5, [r3, #0]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80007a2:	1e4c      	subs	r4, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007a4:	442a      	add	r2, r5
 80007a6:	4422      	add	r2, r4
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80007a8:	4249      	negs	r1, r1
 80007aa:	4404      	add	r4, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80007ac:	ea02 0001 	and.w	r0, r2, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80007b0:	4021      	ands	r1, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80007b2:	685a      	ldr	r2, [r3, #4]
  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
 80007b4:	4401      	add	r1, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80007b6:	4291      	cmp	r1, r2
 80007b8:	d807      	bhi.n	80007ca <chCoreAllocAlignedWithOffset+0x3a>
 80007ba:	428d      	cmp	r5, r1
 80007bc:	d805      	bhi.n	80007ca <chCoreAllocAlignedWithOffset+0x3a>
    return NULL;
  }

  ch_memcore.nextmem = next;
 80007be:	6019      	str	r1, [r3, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80007c6:	bc30      	pop	{r4, r5}
 80007c8:	4770      	bx	lr
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
 80007ca:	2000      	movs	r0, #0
 80007cc:	2300      	movs	r3, #0
 80007ce:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80007d2:	bc30      	pop	{r4, r5}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	f3af 8000 	nop.w
 80007dc:	f3af 8000 	nop.w

080007e0 <chSchReadyI.4536>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80007e0:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80007e2:	f640 035c 	movw	r3, #2140	; 0x85c
 80007e6:	6881      	ldr	r1, [r0, #8]
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80007e8:	b410      	push	{r4}
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 80007ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80007ee:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80007f0:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 80007f4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	428a      	cmp	r2, r1
 80007fa:	d2fb      	bcs.n	80007f4 <chSchReadyI.4536+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80007fc:	685a      	ldr	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 80007fe:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000800:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8000802:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8000804:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000806:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <VectorBC.4485>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8000810:	b538      	push	{r3, r4, r5, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8000812:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8000816:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800081a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800081c:	2108      	movs	r1, #8
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 800081e:	69a2      	ldr	r2, [r4, #24]
  uint32_t event = dp->SR1;
 8000820:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8000822:	f2c0 0103 	movt	r1, #3
 8000826:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800082a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800082e:	428a      	cmp	r2, r1
 8000830:	d054      	beq.n	80008dc <VectorBC.4485+0xcc>
 8000832:	d822      	bhi.n	800087a <VectorBC.4485+0x6a>
 8000834:	2101      	movs	r1, #1
 8000836:	f2c0 0103 	movt	r1, #3
 800083a:	428a      	cmp	r2, r1
 800083c:	d042      	beq.n	80008c4 <VectorBC.4485+0xb4>
 800083e:	2102      	movs	r1, #2
 8000840:	f2c0 0103 	movt	r1, #3
 8000844:	428a      	cmp	r2, r1
 8000846:	d110      	bne.n	800086a <VectorBC.4485+0x5a>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000848:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800084c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8000850:	685b      	ldr	r3, [r3, #4]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000852:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f042 0201 	orr.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800085c:	6862      	ldr	r2, [r4, #4]
 800085e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000862:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d957      	bls.n	800091a <VectorBC.4485+0x10a>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800086a:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800086e:	bf18      	it	ne
 8000870:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8000872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8000876:	f7ff be13 	b.w	80004a0 <_port_irq_epilogue.4508>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800087a:	2182      	movs	r1, #130	; 0x82
 800087c:	f2c0 0107 	movt	r1, #7
 8000880:	428a      	cmp	r2, r1
 8000882:	d014      	beq.n	80008ae <VectorBC.4485+0x9e>
 8000884:	2184      	movs	r1, #132	; 0x84
 8000886:	f2c0 0107 	movt	r1, #7
 800088a:	428a      	cmp	r2, r1
 800088c:	d1ed      	bne.n	800086a <VectorBC.4485+0x5a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800088e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000890:	6852      	ldr	r2, [r2, #4]
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	b33a      	cbz	r2, 80008e6 <VectorBC.4485+0xd6>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8000896:	8c19      	ldrh	r1, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000898:	6822      	ldr	r2, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 800089a:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800089e:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80008a2:	8419      	strh	r1, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80008a4:	6022      	str	r2, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 80008a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80008aa:	f7ff bdf9 	b.w	80004a0 <_port_irq_epilogue.4508>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80008ae:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80008b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80008b6:	685b      	ldr	r3, [r3, #4]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80008b8:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	f042 0201 	orr.w	r2, r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e7d2      	b.n	800086a <VectorBC.4485+0x5a>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 80008c4:	8c1b      	ldrh	r3, [r3, #32]
 80008c6:	0a1a      	lsrs	r2, r3, #8
 80008c8:	d00b      	beq.n	80008e2 <VectorBC.4485+0xd2>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008d2:	f002 0206 	and.w	r2, r2, #6
 80008d6:	431a      	orrs	r2, r3
 80008d8:	6122      	str	r2, [r4, #16]
 80008da:	e7c6      	b.n	800086a <VectorBC.4485+0x5a>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80008dc:	8c1b      	ldrh	r3, [r3, #32]
 80008de:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80008e2:	6123      	str	r3, [r4, #16]
 80008e4:	e7c1      	b.n	800086a <VectorBC.4485+0x5a>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80008e6:	6861      	ldr	r1, [r4, #4]
 80008e8:	2220      	movs	r2, #32
 80008ea:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80008ee:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 80008f0:	6821      	ldr	r1, [r4, #0]
 80008f2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80008f6:	6021      	str	r1, [r4, #0]
 80008f8:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80008fc:	69d8      	ldr	r0, [r3, #28]
 80008fe:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8000902:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000906:	b120      	cbz	r0, 8000912 <VectorBC.4485+0x102>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000908:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 800090a:	6242      	str	r2, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 800090c:	61da      	str	r2, [r3, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800090e:	f7ff ff67 	bl	80007e0 <chSchReadyI.4536>
 8000912:	2300      	movs	r3, #0
 8000914:	f383 8811 	msr	BASEPRI, r3
 8000918:	e7a7      	b.n	800086a <VectorBC.4485+0x5a>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	e7a2      	b.n	800086a <VectorBC.4485+0x5a>
 8000924:	f3af 8000 	nop.w
 8000928:	f3af 8000 	nop.w
 800092c:	f3af 8000 	nop.w

08000930 <VectorC0.4262>:
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8000932:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8000936:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800093a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800093c:	6b1c      	ldr	r4, [r3, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800093e:	6945      	ldr	r5, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8000940:	6861      	ldr	r1, [r4, #4]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8000942:	b2aa      	uxth	r2, r5

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8000944:	f402 465f 	and.w	r6, r2, #57088	; 0xdf00
 8000948:	43f6      	mvns	r6, r6
 800094a:	6146      	str	r6, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800094c:	680f      	ldr	r7, [r1, #0]
 800094e:	260e      	movs	r6, #14
 8000950:	f027 070f 	bic.w	r7, r7, #15
 8000954:	600f      	str	r7, [r1, #0]
 8000956:	f894 c010 	ldrb.w	ip, [r4, #16]
  dmaStreamDisable(i2cp->dmarx);
 800095a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800095c:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000960:	6827      	ldr	r7, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 8000962:	684c      	ldr	r4, [r1, #4]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8000964:	f8c7 c004 	str.w	ip, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8000968:	f8d4 c000 	ldr.w	ip, [r4]
 800096c:	680f      	ldr	r7, [r1, #0]
 800096e:	f02c 0c0f 	bic.w	ip, ip, #15
 8000972:	f8c4 c000 	str.w	ip, [r4]
 8000976:	7c0c      	ldrb	r4, [r1, #16]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8000978:	f402 7180 	and.w	r1, r2, #256	; 0x100
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800097c:	40a6      	lsls	r6, r4

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800097e:	b289      	uxth	r1, r1
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8000980:	607e      	str	r6, [r7, #4]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8000982:	b101      	cbz	r1, 8000986 <VectorC0.4262+0x56>
    i2cp->errors |= I2C_BUS_ERROR;
 8000984:	2101      	movs	r1, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8000986:	0596      	lsls	r6, r2, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8000988:	6099      	str	r1, [r3, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800098a:	bf44      	itt	mi
 800098c:	f041 0102 	orrmi.w	r1, r1, #2
 8000990:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8000992:	0554      	lsls	r4, r2, #21
 8000994:	d50b      	bpl.n	80009ae <VectorC0.4262+0x7e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8000996:	6846      	ldr	r6, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 8000998:	f041 0404 	orr.w	r4, r1, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800099c:	f426 7100 	bic.w	r1, r6, #512	; 0x200
 80009a0:	6041      	str	r1, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80009a2:	6806      	ldr	r6, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80009a4:	4621      	mov	r1, r4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80009a6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80009aa:	6006      	str	r6, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80009ac:	609c      	str	r4, [r3, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80009ae:	0517      	lsls	r7, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 80009b0:	bf44      	itt	mi
 80009b2:	f041 0108 	orrmi.w	r1, r1, #8
 80009b6:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80009b8:	0456      	lsls	r6, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 80009ba:	bf44      	itt	mi
 80009bc:	f041 0120 	orrmi.w	r1, r1, #32
 80009c0:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80009c2:	04d4      	lsls	r4, r2, #19
    i2cp->errors |= I2C_PEC_ERROR;
 80009c4:	bf44      	itt	mi
 80009c6:	f041 0110 	orrmi.w	r1, r1, #16
 80009ca:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80009cc:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_SMB_ALERT;
 80009ce:	bf44      	itt	mi
 80009d0:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
 80009d4:	6099      	strmi	r1, [r3, #8]
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80009d6:	d404      	bmi.n	80009e2 <VectorC0.4262+0xb2>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80009d8:	b919      	cbnz	r1, 80009e2 <VectorC0.4262+0xb2>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 80009da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80009de:	f7ff bd5f 	b.w	80004a0 <_port_irq_epilogue.4508>
 80009e2:	2220      	movs	r2, #32
 80009e4:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80009e8:	69d8      	ldr	r0, [r3, #28]
 80009ea:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80009ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f2:	b130      	cbz	r0, 8000a02 <VectorC0.4262+0xd2>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
 80009f4:	f06f 0201 	mvn.w	r2, #1
 80009f8:	6242      	str	r2, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80009fe:	f7ff feef 	bl	80007e0 <chSchReadyI.4536>
 8000a02:	2300      	movs	r3, #0
 8000a04:	f383 8811 	msr	BASEPRI, r3
}
 8000a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8000a0c:	f7ff bd48 	b.w	80004a0 <_port_irq_epilogue.4508>

08000a10 <i2c_lld_serve_rx_end_irq.8328>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a12:	070f      	lsls	r7, r1, #28
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8000a14:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000a16:	d426      	bmi.n	8000a66 <i2c_lld_serve_rx_end_irq.8328+0x56>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8000a18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a1a:	260e      	movs	r6, #14
 8000a1c:	6851      	ldr	r1, [r2, #4]
 8000a1e:	6815      	ldr	r5, [r2, #0]
 8000a20:	680f      	ldr	r7, [r1, #0]
 8000a22:	2420      	movs	r4, #32
 8000a24:	f027 070f 	bic.w	r7, r7, #15
 8000a28:	600f      	str	r7, [r1, #0]
 8000a2a:	7c12      	ldrb	r2, [r2, #16]
 8000a2c:	fa06 f202 	lsl.w	r2, r6, r2
 8000a30:	606a      	str	r2, [r5, #4]

  dp->CR2 &= ~I2C_CR2_LAST;
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a38:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a40:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	f384 8811 	msr	BASEPRI, r4
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000a4e:	69c3      	ldr	r3, [r0, #28]
 8000a50:	b12b      	cbz	r3, 8000a5e <i2c_lld_serve_rx_end_irq.8328+0x4e>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8000a52:	2200      	movs	r2, #0
 8000a54:	61c2      	str	r2, [r0, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000a56:	4618      	mov	r0, r3
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000a5a:	f7ff fec1 	bl	80007e0 <chSchReadyI.4536>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f383 8811 	msr	BASEPRI, r3
 8000a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a66:	b672      	cpsid	i
 8000a68:	f640 035c 	movw	r3, #2140	; 0x85c
 8000a6c:	f641 32f0 	movw	r2, #7152	; 0x1bf0
 8000a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a74:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
 8000a7a:	e7fe      	b.n	8000a7a <i2c_lld_serve_rx_end_irq.8328+0x6a>
 8000a7c:	f3af 8000 	nop.w

08000a80 <chEvtBroadcastFlagsI.4525>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000a82:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a84:	4607      	mov	r7, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a86:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a88:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a8a:	d020      	beq.n	8000ace <chEvtBroadcastFlagsI.4525+0x4e>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e002      	b.n	8000a96 <chEvtBroadcastFlagsI.4525+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8000a90:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a92:	42a7      	cmp	r7, r4
 8000a94:	d01b      	beq.n	8000ace <chEvtBroadcastFlagsI.4525+0x4e>
  /*lint -restore*/
    elp->flags |= flags;
 8000a96:	68e3      	ldr	r3, [r4, #12]
 8000a98:	432b      	orrs	r3, r5
 8000a9a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000a9c:	b115      	cbz	r5, 8000aa4 <chEvtBroadcastFlagsI.4525+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8000a9e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0f5      	beq.n	8000a90 <chEvtBroadcastFlagsI.4525+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8000aa4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000aa6:	68a2      	ldr	r2, [r4, #8]
 8000aa8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000aaa:	f890 3020 	ldrb.w	r3, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000aae:	430a      	orrs	r2, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ab0:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8000ab2:	6342      	str	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ab4:	d00c      	beq.n	8000ad0 <chEvtBroadcastFlagsI.4525+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000ab6:	2b0b      	cmp	r3, #11
 8000ab8:	d1ea      	bne.n	8000a90 <chEvtBroadcastFlagsI.4525+0x10>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000aba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000abc:	401a      	ands	r2, r3

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d1e6      	bne.n	8000a90 <chEvtBroadcastFlagsI.4525+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000ac2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000ac4:	f7ff fe8c 	bl	80007e0 <chSchReadyI.4536>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8000ac8:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000aca:	42a7      	cmp	r7, r4
 8000acc:	d1e3      	bne.n	8000a96 <chEvtBroadcastFlagsI.4525+0x16>
 8000ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000ad2:	421a      	tst	r2, r3
 8000ad4:	d0dc      	beq.n	8000a90 <chEvtBroadcastFlagsI.4525+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000ad6:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000ad8:	f7ff fe82 	bl	80007e0 <chSchReadyI.4536>
 8000adc:	e7f4      	b.n	8000ac8 <chEvtBroadcastFlagsI.4525+0x48>
 8000ade:	bf00      	nop

08000ae0 <VectorDC.4274>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8000ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000ae4:	f640 15f0 	movw	r5, #2544	; 0x9f0
 8000ae8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8000aec:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000aee:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8000af2:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000af4:	05d9      	lsls	r1, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8000af6:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8000af8:	f100 8094 	bmi.w	8000c24 <VectorDC.4274+0x144>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000afc:	2320      	movs	r3, #32
 8000afe:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000b02:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000b06:	d057      	beq.n	8000bb8 <VectorDC.4274+0xd8>
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000b08:	f640 1bf0 	movw	fp, #2544	; 0x9f0
 8000b0c:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000b10:	f10b 0c0c 	add.w	ip, fp, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000b14:	f04f 0800 	mov.w	r8, #0
 8000b18:	e009      	b.n	8000b2e <VectorDC.4274+0x4e>
    if (sr & USART_SR_RXNE)
 8000b1a:	06a1      	lsls	r1, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000b1c:	6877      	ldr	r7, [r6, #4]
 8000b1e:	f895 a078 	ldrb.w	sl, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 8000b22:	d41f      	bmi.n	8000b64 <VectorDC.4274+0x84>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000b24:	6834      	ldr	r4, [r6, #0]
 8000b26:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000b28:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000b2c:	d044      	beq.n	8000bb8 <VectorDC.4274+0xd8>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000b2e:	0722      	lsls	r2, r4, #28
 8000b30:	d0f3      	beq.n	8000b1a <VectorDC.4274+0x3a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;
 8000b32:	f014 0f08 	tst.w	r4, #8
 8000b36:	bf14      	ite	ne
 8000b38:	2180      	movne	r1, #128	; 0x80
 8000b3a:	2100      	moveq	r1, #0

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
  if (sr & USART_SR_PE)
 8000b3c:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8000b3e:	bf48      	it	mi
 8000b40:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8000b44:	07a7      	lsls	r7, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000b46:	bf48      	it	mi
 8000b48:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8000b4c:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 8000b4e:	bf48      	it	mi
 8000b50:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000b54:	4860      	ldr	r0, [pc, #384]	; (8000cd8 <VectorDC.4274+0x1f8>)
 8000b56:	f7ff ff93 	bl	8000a80 <chEvtBroadcastFlagsI.4525>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 8000b5a:	06a1      	lsls	r1, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000b5c:	6877      	ldr	r7, [r6, #4]
 8000b5e:	f895 a078 	ldrb.w	sl, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 8000b62:	d5df      	bpl.n	8000b24 <VectorDC.4274+0x44>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000b64:	f8db 3014 	ldr.w	r3, [fp, #20]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d049      	beq.n	8000c00 <VectorDC.4274+0x120>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000b6c:	6a2b      	ldr	r3, [r5, #32]
 8000b6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04d      	beq.n	8000c10 <VectorDC.4274+0x130>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000b74:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000b76:	1c5a      	adds	r2, r3, #1
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8000b78:	ea0a 0707 	and.w	r7, sl, r7

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000b7c:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 8000b7e:	622a      	str	r2, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000b80:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000b82:	701f      	strb	r7, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000b84:	6a2a      	ldr	r2, [r5, #32]
 8000b86:	69eb      	ldr	r3, [r5, #28]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d303      	bcc.n	8000b94 <VectorDC.4274+0xb4>
    iqp->q_wrptr = iqp->q_buffer;
 8000b8c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8000b90:	f8cb 3020 	str.w	r3, [fp, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000b94:	68eb      	ldr	r3, [r5, #12]
 8000b96:	4563      	cmp	r3, ip
 8000b98:	d0c4      	beq.n	8000b24 <VectorDC.4274+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000b9a:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f8cb 200c 	str.w	r2, [fp, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000ba2:	f8c2 c004 	str.w	ip, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000ba6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000baa:	f7ff fe19 	bl	80007e0 <chSchReadyI.4536>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8000bae:	6834      	ldr	r4, [r6, #0]
 8000bb0:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000bb2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8000bb6:	d1ba      	bne.n	8000b2e <VectorDC.4274+0x4e>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000bbe:	f019 0f80 	tst.w	r9, #128	; 0x80
 8000bc2:	d001      	beq.n	8000bc8 <VectorDC.4274+0xe8>
 8000bc4:	0622      	lsls	r2, r4, #24
 8000bc6:	d43c      	bmi.n	8000c42 <VectorDC.4274+0x162>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 8000bc8:	0663      	lsls	r3, r4, #25
 8000bca:	d515      	bpl.n	8000bf8 <VectorDC.4274+0x118>
 8000bcc:	2320      	movs	r3, #32
 8000bce:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8000bd2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000bd4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000bd6:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000be0:	d063      	beq.n	8000caa <VectorDC.4274+0x1ca>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000be2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000be6:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 8000bea:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000bee:	60f3      	str	r3, [r6, #12]
 8000bf0:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8000bf2:	6032      	str	r2, [r6, #0]
 8000bf4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 8000bf8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8000bfc:	f7ff bc50 	b.w	80004a0 <_port_irq_epilogue.4508>
 8000c00:	4835      	ldr	r0, [pc, #212]	; (8000cd8 <VectorDC.4274+0x1f8>)
 8000c02:	2104      	movs	r1, #4
 8000c04:	f7ff ff3c 	bl	8000a80 <chEvtBroadcastFlagsI.4525>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000c08:	6a2b      	ldr	r3, [r5, #32]
 8000c0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d1b1      	bne.n	8000b74 <VectorDC.4274+0x94>
 8000c10:	f8db 2014 	ldr.w	r2, [fp, #20]
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d0ad      	beq.n	8000b74 <VectorDC.4274+0x94>
 8000c18:	482f      	ldr	r0, [pc, #188]	; (8000cd8 <VectorDC.4274+0x1f8>)
 8000c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1e:	f7ff ff2f 	bl	8000a80 <chEvtBroadcastFlagsI.4525>
 8000c22:	e77f      	b.n	8000b24 <VectorDC.4274+0x44>
 8000c24:	2320      	movs	r3, #32
 8000c26:	f383 8811 	msr	BASEPRI, r3
 8000c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c2e:	1d28      	adds	r0, r5, #4
 8000c30:	f7ff ff26 	bl	8000a80 <chEvtBroadcastFlagsI.4525>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8000c34:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8000c38:	6033      	str	r3, [r6, #0]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f383 8811 	msr	BASEPRI, r3
 8000c40:	e75c      	b.n	8000afc <VectorDC.4274+0x1c>
 8000c42:	2320      	movs	r3, #32
 8000c44:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000c48:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000c4a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000c4c:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000c56:	d030      	beq.n	8000cba <VectorDC.4274+0x1da>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000c58:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000c5a:	6c28      	ldr	r0, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000c5c:	1c59      	adds	r1, r3, #1

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000c5e:	3201      	adds	r2, #1
 8000c60:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000c62:	64a9      	str	r1, [r5, #72]	; 0x48

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000c64:	f640 12f0 	movw	r2, #2544	; 0x9f0
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000c68:	4281      	cmp	r1, r0
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 8000c6a:	f893 c000 	ldrb.w	ip, [r3]

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000c6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8000c72:	d301      	bcc.n	8000c78 <VectorDC.4274+0x198>
    oqp->q_rdptr = oqp->q_buffer;
 8000c74:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000c76:	6493      	str	r3, [r2, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000c78:	f640 13f0 	movw	r3, #2544	; 0x9f0
 8000c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c80:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000c82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000c86:	428a      	cmp	r2, r1
 8000c88:	d009      	beq.n	8000c9e <VectorDC.4274+0x1be>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000c8a:	6817      	ldr	r7, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000c8c:	f04f 0e00 	mov.w	lr, #0
 8000c90:	631f      	str	r7, [r3, #48]	; 0x30
  (void) chSchReadyI(tp);
 8000c92:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 8000c94:	6079      	str	r1, [r7, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000c96:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000c9a:	f7ff fda1 	bl	80007e0 <chSchReadyI.4536>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 8000c9e:	f8c6 c004 	str.w	ip, [r6, #4]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f383 8811 	msr	BASEPRI, r3
 8000ca8:	e78e      	b.n	8000bc8 <VectorDC.4274+0xe8>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8000caa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d098      	beq.n	8000be2 <VectorDC.4274+0x102>
 8000cb0:	3004      	adds	r0, #4
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	f7ff fee4 	bl	8000a80 <chEvtBroadcastFlagsI.4525>
 8000cb8:	e793      	b.n	8000be2 <VectorDC.4274+0x102>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000cba:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	d0cb      	beq.n	8000c58 <VectorDC.4274+0x178>
 8000cc0:	3004      	adds	r0, #4
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	f7ff fedc 	bl	8000a80 <chEvtBroadcastFlagsI.4525>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000cc8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000ccc:	ea09 0303 	and.w	r3, r9, r3
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	60f3      	str	r3, [r6, #12]
 8000cd6:	e7e4      	b.n	8000ca2 <VectorDC.4274+0x1c2>
 8000cd8:	200009f4 	.word	0x200009f4
 8000cdc:	f3af 8000 	nop.w

08000ce0 <_idle_thread.4305>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000ce0:	e7fe      	b.n	8000ce0 <_idle_thread.4305>
 8000ce2:	bf00      	nop
 8000ce4:	f3af 8000 	nop.w
 8000ce8:	f3af 8000 	nop.w
 8000cec:	f3af 8000 	nop.w

08000cf0 <BusFault_Handler.4548>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8000cf0:	e7fe      	b.n	8000cf0 <BusFault_Handler.4548>
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	f3af 8000 	nop.w
 8000cfc:	f3af 8000 	nop.w

08000d00 <chSchGoSleepS.4533>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8000d00:	f640 035c 	movw	r3, #2140	; 0x85c
 8000d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000d08:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8000d0a:	681a      	ldr	r2, [r3, #0]
  thread_t *otp = currp;
 8000d0c:	6999      	ldr	r1, [r3, #24]

  tqp->next             = tp->queue.next;
 8000d0e:	6814      	ldr	r4, [r2, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000d10:	2501      	movs	r5, #1
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8000d12:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d16:	6063      	str	r3, [r4, #4]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000d18:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000d1c:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000d1e:	4610      	mov	r0, r2
}
 8000d20:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000d22:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8000d24:	f7ff ba96 	b.w	8000254 <_port_switch>
 8000d28:	f3af 8000 	nop.w
 8000d2c:	f3af 8000 	nop.w

08000d30 <chSchGoSleepTimeoutS.4340>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000d30:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d36:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000d38:	b087      	sub	sp, #28
 8000d3a:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8000d3c:	d013      	beq.n	8000d66 <chSchGoSleepTimeoutS.4340+0x36>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000d3e:	f640 045c 	movw	r4, #2140	; 0x85c
 8000d42:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000d46:	69a2      	ldr	r2, [r4, #24]
 8000d48:	a801      	add	r0, sp, #4
 8000d4a:	f7ff fb41 	bl	80003d0 <chVTDoSetI.constprop.19.4455>
    chSchGoSleepS(newstate);
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f7ff ffd6 	bl	8000d00 <chSchGoSleepS.4533>
    if (chVTIsArmedI(&vt)) {
 8000d54:	9b04      	ldr	r3, [sp, #16]
 8000d56:	b113      	cbz	r3, 8000d5e <chSchGoSleepTimeoutS.4340+0x2e>
      chVTDoResetI(&vt);
 8000d58:	a801      	add	r0, sp, #4
 8000d5a:	f7ff faf9 	bl	8000350 <chVTDoResetI.4421>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 8000d5e:	69a3      	ldr	r3, [r4, #24]
}
 8000d60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d62:	b007      	add	sp, #28
 8000d64:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8000d66:	f7ff ffcb 	bl	8000d00 <chSchGoSleepS.4533>
 8000d6a:	f640 045c 	movw	r4, #2140	; 0x85c
 8000d6e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  }

  return currp->u.rdymsg;
 8000d72:	69a3      	ldr	r3, [r4, #24]
}
 8000d74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d76:	b007      	add	sp, #28
 8000d78:	bd30      	pop	{r4, r5, pc}
 8000d7a:	bf00      	nop
 8000d7c:	f3af 8000 	nop.w

08000d80 <chThdEnqueueTimeoutS.4417>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000d80:	b410      	push	{r4}
 8000d82:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout) {
 8000d84:	b171      	cbz	r1, 8000da4 <chThdEnqueueTimeoutS.4417+0x24>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000d86:	f640 035c 	movw	r3, #2140	; 0x85c
 8000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8000d8e:	6844      	ldr	r4, [r0, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d92:	2004      	movs	r0, #4
 8000d94:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8000d98:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8000d9a:	6053      	str	r3, [r2, #4]
}
 8000d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000da0:	f7ff bfc6 	b.w	8000d30 <chSchGoSleepTimeoutS.4340>
}
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <iqGetTimeout.4358>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	2320      	movs	r3, #32
 8000db4:	4604      	mov	r4, r0
 8000db6:	460e      	mov	r6, r1
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	e003      	b.n	8000dc6 <iqGetTimeout.4358+0x16>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8000dbe:	f7ff ffdf 	bl	8000d80 <chThdEnqueueTimeoutS.4417>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	db1b      	blt.n	8000dfe <iqGetTimeout.4358+0x4e>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8000dc6:	68a5      	ldr	r5, [r4, #8]
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4631      	mov	r1, r6
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0f6      	beq.n	8000dbe <iqGetTimeout.4358+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000dd0:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000dd2:	6921      	ldr	r1, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000dd4:	1c53      	adds	r3, r2, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000dd6:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8000dd8:	428b      	cmp	r3, r1
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8000dda:	61a3      	str	r3, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000ddc:	f100 30ff 	add.w	r0, r0, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000de0:	bf28      	it	cs
 8000de2:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000de4:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
 8000de6:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8000de8:	bf28      	it	cs
 8000dea:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000dec:	69e3      	ldr	r3, [r4, #28]
 8000dee:	b10b      	cbz	r3, 8000df4 <iqGetTimeout.4358+0x44>
    iqp->q_notify(iqp);
 8000df0:	4620      	mov	r0, r4
 8000df2:	4798      	blx	r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8000dfa:	4628      	mov	r0, r5
}
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
 8000dfe:	f385 8811 	msr	BASEPRI, r5
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
 8000e04:	f3af 8000 	nop.w
 8000e08:	f3af 8000 	nop.w
 8000e0c:	f3af 8000 	nop.w

08000e10 <_gett.7843>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000e10:	300c      	adds	r0, #12
 8000e12:	f7ff bfcd 	b.w	8000db0 <iqGetTimeout.4358>
 8000e16:	bf00      	nop
 8000e18:	f3af 8000 	nop.w
 8000e1c:	f3af 8000 	nop.w

08000e20 <_get.7847>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000e20:	300c      	adds	r0, #12
 8000e22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e26:	f7ff bfc3 	b.w	8000db0 <iqGetTimeout.4358>
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w

08000e30 <iqReadTimeout.4376>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 8000e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e34:	4698      	mov	r8, r3
 8000e36:	b083      	sub	sp, #12
 8000e38:	4604      	mov	r4, r0
 8000e3a:	4689      	mov	r9, r1
 8000e3c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 8000e3e:	69c7      	ldr	r7, [r0, #28]
 8000e40:	2320      	movs	r3, #32
 8000e42:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000e4c:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8000e50:	4442      	add	r2, r8
 8000e52:	b292      	uxth	r2, r2
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 8000e54:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8000e56:	9201      	str	r2, [sp, #4]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000e58:	fa1f fb8b 	uxth.w	fp, fp
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8000e5c:	68a3      	ldr	r3, [r4, #8]
 8000e5e:	b30b      	cbz	r3, 8000ea4 <iqReadTimeout.4376+0x74>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000e60:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8000e62:	68a1      	ldr	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000e64:	1c5a      	adds	r2, r3, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8000e66:	3901      	subs	r1, #1
    *bp++ = *iqp->q_rdptr++;
 8000e68:	61a2      	str	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8000e6a:	60a1      	str	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f109 0a01 	add.w	sl, r9, #1
 8000e72:	f889 3000 	strb.w	r3, [r9]
    if (iqp->q_rdptr >= iqp->q_top) {
 8000e76:	6923      	ldr	r3, [r4, #16]
 8000e78:	69a2      	ldr	r2, [r4, #24]
 8000e7a:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8000e7c:	bf24      	itt	cs
 8000e7e:	68e3      	ldrcs	r3, [r4, #12]
 8000e80:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 8000e82:	b10f      	cbz	r7, 8000e88 <iqReadTimeout.4376+0x58>
      nfy(iqp);
 8000e84:	4620      	mov	r0, r4
 8000e86:	47b8      	blx	r7
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 8000e8e:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 8000e90:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8000e94:	d01a      	beq.n	8000ecc <iqReadTimeout.4376+0x9c>
 8000e96:	2220      	movs	r2, #32
 8000e98:	f382 8811 	msr	BASEPRI, r2
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8000e9c:	68a3      	ldr	r3, [r4, #8]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8000e9e:	46d1      	mov	r9, sl
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1dd      	bne.n	8000e60 <iqReadTimeout.4376+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000ea4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000ea8:	4593      	cmp	fp, r2
 8000eaa:	d813      	bhi.n	8000ed4 <iqReadTimeout.4376+0xa4>
 8000eac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb0:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8000eb2:	9a01      	ldr	r2, [sp, #4]
 8000eb4:	1a51      	subs	r1, r2, r1
 8000eb6:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8000eb8:	4588      	cmp	r8, r1
 8000eba:	d305      	bcc.n	8000ec8 <iqReadTimeout.4376+0x98>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff ff5f 	bl	8000d80 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d0ca      	beq.n	8000e5c <iqReadTimeout.4376+0x2c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 8000ecc:	4630      	mov	r0, r6
 8000ece:	b003      	add	sp, #12
 8000ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	f7ff ff52 	bl	8000d80 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000edc:	2800      	cmp	r0, #0
 8000ede:	d0bd      	beq.n	8000e5c <iqReadTimeout.4376+0x2c>
 8000ee0:	e7f1      	b.n	8000ec6 <iqReadTimeout.4376+0x96>
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	f3af 8000 	nop.w
 8000eec:	f3af 8000 	nop.w

08000ef0 <_readt.7819>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000ef0:	300c      	adds	r0, #12
 8000ef2:	f7ff bf9d 	b.w	8000e30 <iqReadTimeout.4376>
 8000ef6:	bf00      	nop
 8000ef8:	f3af 8000 	nop.w
 8000efc:	f3af 8000 	nop.w

08000f00 <_read.7827>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000f00:	300c      	adds	r0, #12
 8000f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f06:	f7ff bf93 	b.w	8000e30 <iqReadTimeout.4376>
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w

08000f10 <oqPutTimeout.4391>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	4604      	mov	r4, r0
 8000f14:	460f      	mov	r7, r1
 8000f16:	4616      	mov	r6, r2
 8000f18:	2320      	movs	r3, #32
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	e003      	b.n	8000f28 <oqPutTimeout.4391+0x18>
 8000f20:	f7ff ff2e 	bl	8000d80 <chThdEnqueueTimeoutS.4417>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000f24:	2800      	cmp	r0, #0
 8000f26:	db1a      	blt.n	8000f5e <oqPutTimeout.4391+0x4e>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8000f28:	68a5      	ldr	r5, [r4, #8]
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0f6      	beq.n	8000f20 <oqPutTimeout.4391+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000f32:	6963      	ldr	r3, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000f34:	68a1      	ldr	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000f36:	1c5a      	adds	r2, r3, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000f38:	3901      	subs	r1, #1
  *oqp->q_wrptr++ = b;
 8000f3a:	6162      	str	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000f3c:	60a1      	str	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000f3e:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000f40:	6923      	ldr	r3, [r4, #16]
 8000f42:	6962      	ldr	r2, [r4, #20]
 8000f44:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000f46:	bf24      	itt	cs
 8000f48:	68e3      	ldrcs	r3, [r4, #12]
 8000f4a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000f4c:	69e3      	ldr	r3, [r4, #28]
 8000f4e:	b10b      	cbz	r3, 8000f54 <oqPutTimeout.4391+0x44>
    oqp->q_notify(oqp);
 8000f50:	4620      	mov	r0, r4
 8000f52:	4798      	blx	r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	f383 8811 	msr	BASEPRI, r3
 8000f5a:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f5e:	f385 8811 	msr	BASEPRI, r5
 8000f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	f3af 8000 	nop.w
 8000f6c:	f3af 8000 	nop.w

08000f70 <_putt.7850>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000f70:	3030      	adds	r0, #48	; 0x30
 8000f72:	f7ff bfcd 	b.w	8000f10 <oqPutTimeout.4391>
 8000f76:	bf00      	nop
 8000f78:	f3af 8000 	nop.w
 8000f7c:	f3af 8000 	nop.w

08000f80 <_put.7855>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000f80:	3030      	adds	r0, #48	; 0x30
 8000f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f86:	f7ff bfc3 	b.w	8000f10 <oqPutTimeout.4391>
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w

08000f90 <oqWriteTimeout.4411>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	4698      	mov	r8, r3
 8000f96:	b083      	sub	sp, #12
 8000f98:	4604      	mov	r4, r0
 8000f9a:	4689      	mov	r9, r1
 8000f9c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8000f9e:	69c7      	ldr	r7, [r0, #28]
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	f383 8811 	msr	BASEPRI, r3
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000fac:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8000fb0:	4442      	add	r2, r8
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 8000fb2:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8000fb4:	b292      	uxth	r2, r2
 8000fb6:	9201      	str	r2, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000fb8:	fa1f fb8b 	uxth.w	fp, fp
 8000fbc:	46b2      	mov	sl, r6
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8000fbe:	68a3      	ldr	r3, [r4, #8]
 8000fc0:	b1fb      	cbz	r3, 8001002 <oqWriteTimeout.4411+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8000fc2:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8000fc4:	68a1      	ldr	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000fc6:	1c5a      	adds	r2, r3, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8000fc8:	3901      	subs	r1, #1
    *oqp->q_wrptr++ = *bp++;
 8000fca:	6162      	str	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8000fcc:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000fce:	f899 2000 	ldrb.w	r2, [r9]
 8000fd2:	f109 0901 	add.w	r9, r9, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000fd8:	6923      	ldr	r3, [r4, #16]
 8000fda:	6962      	ldr	r2, [r4, #20]
 8000fdc:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8000fde:	bf24      	itt	cs
 8000fe0:	68e3      	ldrcs	r3, [r4, #12]
 8000fe2:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8000fe4:	b10f      	cbz	r7, 8000fea <oqWriteTimeout.4411+0x5a>
      nfy(oqp);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	47b8      	blx	r7
 8000fea:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8000fee:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 8000ff0:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8000ff4:	d019      	beq.n	800102a <oqWriteTimeout.4411+0x9a>
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8000ffc:	68a3      	ldr	r3, [r4, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1df      	bne.n	8000fc2 <oqWriteTimeout.4411+0x32>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001002:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001006:	4593      	cmp	fp, r2
 8001008:	d813      	bhi.n	8001032 <oqWriteTimeout.4411+0xa2>
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001010:	9a01      	ldr	r2, [sp, #4]
 8001012:	1a51      	subs	r1, r2, r1
 8001014:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001016:	4588      	cmp	r8, r1
 8001018:	d305      	bcc.n	8001026 <oqWriteTimeout.4411+0x96>
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff feb0 	bl	8000d80 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001020:	2800      	cmp	r0, #0
 8001022:	d0cc      	beq.n	8000fbe <oqWriteTimeout.4411+0x2e>
 8001024:	2300      	movs	r3, #0
 8001026:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 800102a:	4630      	mov	r0, r6
 800102c:	b003      	add	sp, #12
 800102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001032:	4620      	mov	r0, r4
 8001034:	4641      	mov	r1, r8
 8001036:	f7ff fea3 	bl	8000d80 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800103a:	2800      	cmp	r0, #0
 800103c:	d0bf      	beq.n	8000fbe <oqWriteTimeout.4411+0x2e>
 800103e:	e7f1      	b.n	8001024 <oqWriteTimeout.4411+0x94>

08001040 <_writet.7832>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001040:	3030      	adds	r0, #48	; 0x30
 8001042:	f7ff bfa5 	b.w	8000f90 <oqWriteTimeout.4411>
 8001046:	bf00      	nop
 8001048:	f3af 8000 	nop.w
 800104c:	f3af 8000 	nop.w

08001050 <_write.7838>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001050:	3030      	adds	r0, #48	; 0x30
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	f7ff bf9b 	b.w	8000f90 <oqWriteTimeout.4411>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w

08001060 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4602      	mov	r2, r0
 8001064:	2320      	movs	r3, #32
 8001066:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800106a:	f640 035c 	movw	r3, #2140	; 0x85c
 800106e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001072:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001074:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001076:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800107a:	42a8      	cmp	r0, r5
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 800107c:	6262      	str	r2, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800107e:	d006      	beq.n	800108e <chThdExit+0x2e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8001080:	6803      	ldr	r3, [r0, #0]
 8001082:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001084:	f7ff fbac 	bl	80007e0 <chSchReadyI.4536>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001088:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 800108a:	42a8      	cmp	r0, r5
 800108c:	d1f8      	bne.n	8001080 <chThdExit+0x20>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800108e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001092:	b94b      	cbnz	r3, 80010a8 <chThdExit+0x48>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8001094:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001098:	0798      	lsls	r0, r3, #30
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 800109a:	bf01      	itttt	eq
 800109c:	6922      	ldreq	r2, [r4, #16]
 800109e:	6963      	ldreq	r3, [r4, #20]
 80010a0:	611a      	streq	r2, [r3, #16]
 80010a2:	6922      	ldreq	r2, [r4, #16]
 80010a4:	bf08      	it	eq
 80010a6:	6153      	streq	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80010a8:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 80010aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80010ae:	f7ff be27 	b.w	8000d00 <chSchGoSleepS.4533>
 80010b2:	bf00      	nop
 80010b4:	f3af 8000 	nop.w
 80010b8:	f3af 8000 	nop.w
 80010bc:	f3af 8000 	nop.w

080010c0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80010c0:	f640 025c 	movw	r2, #2140	; 0x85c
 80010c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80010c8:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80010ca:	b470      	push	{r4, r5, r6}

  tqp->next             = tp->queue.next;
 80010cc:	6803      	ldr	r3, [r0, #0]
  thread_t *otp = currp;
 80010ce:	6995      	ldr	r5, [r2, #24]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80010d0:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80010d2:	2100      	movs	r1, #0
 80010d4:	68ac      	ldr	r4, [r5, #8]
 80010d6:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80010d8:	605a      	str	r2, [r3, #4]
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80010da:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80010de:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80010e0:	f885 1020 	strb.w	r1, [r5, #32]
 80010e4:	e000      	b.n	80010e8 <chSchDoReschedule+0x28>
 80010e6:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	42a2      	cmp	r2, r4
 80010ec:	d8fb      	bhi.n	80010e6 <chSchDoReschedule+0x26>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80010ee:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80010f0:	4629      	mov	r1, r5
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80010f2:	602b      	str	r3, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 80010f4:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 80010f6:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80010f8:	605d      	str	r5, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 80010fa:	bc70      	pop	{r4, r5, r6}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80010fc:	f7ff b8aa 	b.w	8000254 <_port_switch>

08001100 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001100:	b4f0      	push	{r4, r5, r6, r7}
 8001102:	4e13      	ldr	r6, [pc, #76]	; (8001150 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001104:	2500      	movs	r5, #0
 8001106:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800110a:	f1a6 0110 	sub.w	r1, r6, #16
 800110e:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001110:	42a3      	cmp	r3, r4
 8001112:	d20d      	bcs.n	8001130 <__init_ram_areas+0x30>
 8001114:	3904      	subs	r1, #4
 8001116:	461a      	mov	r2, r3
      *p = *tp;
 8001118:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800111c:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001120:	42a2      	cmp	r2, r4
 8001122:	d3f9      	bcc.n	8001118 <__init_ram_areas+0x18>
 8001124:	43da      	mvns	r2, r3
 8001126:	4414      	add	r4, r2
 8001128:	f024 0403 	bic.w	r4, r4, #3
 800112c:	3404      	adds	r4, #4
 800112e:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001130:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001134:	4293      	cmp	r3, r2
 8001136:	d203      	bcs.n	8001140 <__init_ram_areas+0x40>
      *p = 0;
 8001138:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800113c:	4293      	cmp	r3, r2
 800113e:	d3fb      	bcc.n	8001138 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001140:	42be      	cmp	r6, r7
 8001142:	f106 0310 	add.w	r3, r6, #16
 8001146:	d201      	bcs.n	800114c <__init_ram_areas+0x4c>
 8001148:	461e      	mov	r6, r3
 800114a:	e7de      	b.n	800110a <__init_ram_areas+0xa>
#endif
}
 800114c:	bcf0      	pop	{r4, r5, r6, r7}
 800114e:	4770      	bx	lr
 8001150:	08001c0c 	.word	0x08001c0c
 8001154:	f3af 8000 	nop.w
 8001158:	f3af 8000 	nop.w
 800115c:	f3af 8000 	nop.w

08001160 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001160:	e7fe      	b.n	8001160 <__default_exit>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	f3af 8000 	nop.w
 800116c:	f3af 8000 	nop.w

08001170 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	f3af 8000 	nop.w
 800117c:	f3af 8000 	nop.w

08001180 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	f3af 8000 	nop.w
 8001188:	f3af 8000 	nop.w
 800118c:	f3af 8000 	nop.w

08001190 <i2cMasterTransmitTimeout.constprop.9>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	4606      	mov	r6, r0
 8001194:	2020      	movs	r0, #32
 8001196:	f380 8811 	msr	BASEPRI, r0

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 800119a:	2403      	movs	r4, #3

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800119c:	0049      	lsls	r1, r1, #1
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 800119e:	2000      	movs	r0, #0
 80011a0:	8431      	strh	r1, [r6, #32]
  i2cp->state = I2C_ACTIVE_TX;
 80011a2:	7034      	strb	r4, [r6, #0]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 80011a4:	60b0      	str	r0, [r6, #8]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 80011a6:	6b71      	ldr	r1, [r6, #52]	; 0x34
 80011a8:	f380 8811 	msr	BASEPRI, r0

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80011ac:	6b34      	ldr	r4, [r6, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80011ae:	6af0      	ldr	r0, [r6, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80011b0:	6867      	ldr	r7, [r4, #4]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80011b2:	6845      	ldr	r5, [r0, #4]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80011b4:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80011b6:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80011ba:	2000      	movs	r0, #0

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 80011bc:	603c      	str	r4, [r7, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 80011be:	60fa      	str	r2, [r7, #12]
 80011c0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 80011c4:	607b      	str	r3, [r7, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 80011c6:	f8c5 c000 	str.w	ip, [r5]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 80011ca:	60e8      	str	r0, [r5, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 80011cc:	6068      	str	r0, [r5, #4]
 80011ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80011d0:	2220      	movs	r2, #32
 80011d2:	b2ad      	uxth	r5, r5
 80011d4:	e001      	b.n	80011da <i2cMasterTransmitTimeout.constprop.9+0x4a>
 80011d6:	f380 8811 	msr	BASEPRI, r0
 80011da:	f382 8811 	msr	BASEPRI, r2
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 80011de:	698b      	ldr	r3, [r1, #24]
 80011e0:	079b      	lsls	r3, r3, #30
 80011e2:	d402      	bmi.n	80011ea <i2cMasterTransmitTimeout.constprop.9+0x5a>
 80011e4:	680b      	ldr	r3, [r1, #0]
 80011e6:	059f      	lsls	r7, r3, #22
 80011e8:	d50c      	bpl.n	8001204 <i2cMasterTransmitTimeout.constprop.9+0x74>
 80011ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 80011ec:	1b5b      	subs	r3, r3, r5
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	2b31      	cmp	r3, #49	; 0x31
 80011f2:	d9f0      	bls.n	80011d6 <i2cMasterTransmitTimeout.constprop.9+0x46>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 80011f4:	2305      	movs	r3, #5
 80011f6:	7033      	strb	r3, [r6, #0]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	2300      	movs	r3, #0
 80011fe:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8001202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001204:	684b      	ldr	r3, [r1, #4]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001206:	f640 045c 	movw	r4, #2140	; 0x85c
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	604b      	str	r3, [r1, #4]
  dp->CR1 |= I2C_CR1_START;
 8001210:	6808      	ldr	r0, [r1, #0]
 8001212:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001216:	69a2      	ldr	r2, [r4, #24]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8001218:	4633      	mov	r3, r6
 800121a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800121e:	6008      	str	r0, [r1, #0]
 8001220:	f843 2f1c 	str.w	r2, [r3, #28]!
  tp->u.wttrp = trp;
 8001224:	6253      	str	r3, [r2, #36]	; 0x24
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff fd6a 	bl	8000d00 <chSchGoSleepS.4533>
  }

  return currp->u.rdymsg;
 800122c:	69a3      	ldr	r3, [r4, #24]
 800122e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8001230:	1c44      	adds	r4, r0, #1
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8001232:	bf1c      	itt	ne
 8001234:	2302      	movne	r3, #2
 8001236:	7033      	strbne	r3, [r6, #0]
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8001238:	d0dc      	beq.n	80011f4 <i2cMasterTransmitTimeout.constprop.9+0x64>
 800123a:	2300      	movs	r3, #0
 800123c:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	f3af 8000 	nop.w
 800124c:	f3af 8000 	nop.w

08001250 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001250:	b508      	push	{r3, lr}
 8001252:	4601      	mov	r1, r0
 8001254:	2320      	movs	r3, #32
 8001256:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800125a:	2008      	movs	r0, #8
 800125c:	f7ff fd68 	bl	8000d30 <chSchGoSleepTimeoutS.4340>
 8001260:	2300      	movs	r3, #0
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	bd08      	pop	{r3, pc}
 8001268:	f3af 8000 	nop.w
 800126c:	f3af 8000 	nop.w

08001270 <hd44780WriteRegister.11289.constprop.4>:
 * @param[in] reg           Register id
 * @param[in] value         Writing value
 *
 * @notapi
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
 8001270:	b530      	push	{r4, r5, lr}
 8001272:	4605      	mov	r5, r0
 8001274:	b083      	sub	sp, #12
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {

  chThdSleep(time);
 8001276:	2002      	movs	r0, #2
 8001278:	460c      	mov	r4, r1
 800127a:	f7ff ffe9 	bl	8001250 <chThdSleep>
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
 800127e:	f640 03cc 	movw	r3, #2252	; 0x8cc
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001282:	b2e8      	uxtb	r0, r5
 8001284:	f024 020f 	bic.w	r2, r4, #15
  if(lcdp->backlight)
 8001288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 800128c:	4302      	orrs	r2, r0
  if(lcdp->backlight)
 800128e:	785d      	ldrb	r5, [r3, #1]
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001290:	f042 0104 	orr.w	r1, r2, #4
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 8001294:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001298:	f88d 1004 	strb.w	r1, [sp, #4]
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 800129c:	b2c0      	uxtb	r0, r0
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
 800129e:	b1c5      	cbz	r5, 80012d2 <hd44780WriteRegister.11289.constprop.4+0x62>
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
 80012a0:	f040 040c 	orr.w	r4, r0, #12
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
 80012a4:	f041 0108 	orr.w	r1, r1, #8
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
 80012a8:	f042 0208 	orr.w	r2, r2, #8
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
  txbuf[3] = reg | LCD_D_LOWER(value);
  if(lcdp->backlight)
    txbuf[3] |= LCD_K;
 80012ac:	f040 0008 	orr.w	r0, r0, #8
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
 80012b0:	f88d 1004 	strb.w	r1, [sp, #4]
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
 80012b4:	f88d 2005 	strb.w	r2, [sp, #5]
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
 80012b8:	f88d 4006 	strb.w	r4, [sp, #6]
  txbuf[3] = reg | LCD_D_LOWER(value);
  if(lcdp->backlight)
    txbuf[3] |= LCD_K;
 80012bc:	f88d 0007 	strb.w	r0, [sp, #7]

  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	aa01      	add	r2, sp, #4
 80012c4:	7a19      	ldrb	r1, [r3, #8]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	2304      	movs	r3, #4
 80012ca:	f7ff ff61 	bl	8001190 <i2cMasterTransmitTimeout.constprop.9>
                           txbuf, 4, NULL, 0, TIME_INFINITE);
}
 80012ce:	b003      	add	sp, #12
 80012d0:	bd30      	pop	{r4, r5, pc}
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 80012d2:	f040 0104 	orr.w	r1, r0, #4
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
  txbuf[3] = reg | LCD_D_LOWER(value);
 80012d6:	f88d 0007 	strb.w	r0, [sp, #7]
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 80012da:	f88d 1006 	strb.w	r1, [sp, #6]
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
 80012de:	f88d 2005 	strb.w	r2, [sp, #5]
 80012e2:	e7ed      	b.n	80012c0 <hd44780WriteRegister.11289.constprop.4+0x50>
 80012e4:	f3af 8000 	nop.w
 80012e8:	f3af 8000 	nop.w
 80012ec:	f3af 8000 	nop.w

080012f0 <dmaStreamAllocate.constprop.11>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 80012f0:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80012f2:	7c45      	ldrb	r5, [r0, #17]
 80012f4:	2601      	movs	r6, #1
 80012f6:	fa06 f705 	lsl.w	r7, r6, r5
 80012fa:	f640 0358 	movw	r3, #2136	; 0x858
 80012fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	4227      	tst	r7, r4
    return true;
 8001306:	bf18      	it	ne
 8001308:	4630      	movne	r0, r6
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 800130a:	d143      	bne.n	8001394 <dmaStreamAllocate.constprop.11+0xa4>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800130c:	f640 0600 	movw	r6, #2048	; 0x800
 8001310:	f2c2 0600 	movt	r6, #8192	; 0x2000
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001314:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001318:	f846 1035 	str.w	r1, [r6, r5, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800131c:	607a      	str	r2, [r7, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800131e:	0662      	lsls	r2, r4, #25
    rccEnableDMA1(false);
 8001320:	bf02      	ittt	eq
 8001322:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8001326:	f2c4 0202 	movteq	r2, #16386	; 0x4002
 800132a:	6955      	ldreq	r5, [r2, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800132c:	6807      	ldr	r7, [r0, #0]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
    rccEnableDMA1(false);
 800132e:	bf04      	itt	eq
 8001330:	f045 0501 	orreq.w	r5, r5, #1
 8001334:	6155      	streq	r5, [r2, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001336:	6842      	ldr	r2, [r0, #4]
 8001338:	f04f 0c0e 	mov.w	ip, #14
 800133c:	6815      	ldr	r5, [r2, #0]
 800133e:	f025 050f 	bic.w	r5, r5, #15
 8001342:	6015      	str	r5, [r2, #0]
 8001344:	7c06      	ldrb	r6, [r0, #16]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8001346:	6885      	ldr	r5, [r0, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001348:	fa0c fc06 	lsl.w	ip, ip, r6
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 800134c:	422c      	tst	r4, r5
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800134e:	f04f 0600 	mov.w	r6, #0
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001352:	f8c7 c004 	str.w	ip, [r7, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001356:	6016      	str	r6, [r2, #0]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8001358:	d115      	bne.n	8001386 <dmaStreamAllocate.constprop.11+0x96>
 800135a:	b1a1      	cbz	r1, 8001386 <dmaStreamAllocate.constprop.11+0x96>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 800135c:	7c82      	ldrb	r2, [r0, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800135e:	2501      	movs	r5, #1
 8001360:	f002 011f 	and.w	r1, r2, #31
 8001364:	408d      	lsls	r5, r1
 8001366:	0951      	lsrs	r1, r2, #5
 8001368:	0089      	lsls	r1, r1, #2
 800136a:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800136e:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001372:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 8001376:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800137a:	2650      	movs	r6, #80	; 0x50
 800137c:	f882 6300 	strb.w	r6, [r2, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001380:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001384:	600d      	str	r5, [r1, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001386:	7c42      	ldrb	r2, [r0, #17]
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	4314      	orrs	r4, r2
 8001390:	601c      	str	r4, [r3, #0]
 8001392:	2000      	movs	r0, #0

  return false;
}
 8001394:	bcf0      	pop	{r4, r5, r6, r7}
 8001396:	4770      	bx	lr
 8001398:	f3af 8000 	nop.w
 800139c:	f3af 8000 	nop.w

080013a0 <_pal_lld_setgroupmode.constprop.8>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80013a0:	2300      	movs	r3, #0
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80013a2:	b430      	push	{r4, r5}
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 80013a4:	461a      	mov	r2, r3
 80013a6:	461c      	mov	r4, r3
 80013a8:	4619      	mov	r1, r3
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 80013aa:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 80013ac:	f010 0f80 	tst.w	r0, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 80013b0:	ea4f 1101 	mov.w	r1, r1, lsl #4
    mh <<= 4;
    crl <<= 4;
 80013b4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 80013b8:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
    crh <<= 4;
 80013bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 80013c0:	bf0c      	ite	eq
 80013c2:	f041 010f 	orreq.w	r1, r1, #15
    else
      crl |= cfg;
 80013c6:	f042 020f 	orrne.w	r2, r2, #15
    if ((mask & 0x8000) == 0)
 80013ca:	f410 4f00 	tst.w	r0, #32768	; 0x8000
      mh |= 0xf;
 80013ce:	bf0c      	ite	eq
 80013d0:	f044 040f 	orreq.w	r4, r4, #15
    else
      crh |= cfg;
 80013d4:	f043 030f 	orrne.w	r3, r3, #15
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80013d8:	3d01      	subs	r5, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 80013da:	ea4f 0040 	mov.w	r0, r0, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 80013de:	d1e5      	bne.n	80013ac <_pal_lld_setgroupmode.constprop.8+0xc>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 80013e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80013e4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80013e8:	6845      	ldr	r5, [r0, #4]
 80013ea:	402c      	ands	r4, r5
 80013ec:	4323      	orrs	r3, r4
 80013ee:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 80013f0:	6803      	ldr	r3, [r0, #0]
}
 80013f2:	bc30      	pop	{r4, r5}
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
  port->CRL = (port->CRL & ml) | crl;
 80013f4:	4019      	ands	r1, r3
 80013f6:	430a      	orrs	r2, r1
 80013f8:	6002      	str	r2, [r0, #0]
}
 80013fa:	4770      	bx	lr
 80013fc:	f3af 8000 	nop.w

08001400 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001408:	2200      	movs	r2, #0
 800140a:	f04f 31ff 	mov.w	r1, #4294967295
 800140e:	6918      	ldr	r0, [r3, #16]


/*
 * Application entry point.
 */
int main(void) {
 8001410:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001414:	6119      	str	r1, [r3, #16]
 8001416:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8001418:	68d8      	ldr	r0, [r3, #12]
 800141a:	60d9      	str	r1, [r3, #12]
 800141c:	60da      	str	r2, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800141e:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001420:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8001424:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001428:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 800142a:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800142c:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8001430:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8001434:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001436:	680e      	ldr	r6, [r1, #0]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8001438:	f640 0558 	movw	r5, #2136	; 0x858
 800143c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001440:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8001444:	f641 44f0 	movw	r4, #7408	; 0x1cf0
 8001448:	f640 0000 	movw	r0, #2048	; 0x800
 800144c:	600e      	str	r6, [r1, #0]
 800144e:	b085      	sub	sp, #20
 8001450:	602a      	str	r2, [r5, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	4611      	mov	r1, r2
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001456:	4615      	mov	r5, r2
 8001458:	f6c0 0400 	movt	r4, #2048	; 0x800
 800145c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001460:	1862      	adds	r2, r4, r1
 8001462:	6852      	ldr	r2, [r2, #4]
 8001464:	3114      	adds	r1, #20
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001466:	298c      	cmp	r1, #140	; 0x8c
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001468:	6015      	str	r5, [r2, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800146a:	50c5      	str	r5, [r0, r3]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f103 0308 	add.w	r3, r3, #8
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001474:	d1f4      	bne.n	8001460 <main+0x60>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001476:	4613      	mov	r3, r2
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	f2c4 0302 	movt	r3, #16386	; 0x4002
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001480:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001484:	6059      	str	r1, [r3, #4]
 8001486:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800148a:	6984      	ldr	r4, [r0, #24]
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800148c:	f648 0a88 	movw	sl, #34952	; 0x8888
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 8001490:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 8001494:	6184      	str	r4, [r0, #24]
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 8001496:	46d1      	mov	r9, sl
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8001498:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  GPIOA->CRH = config->PAData.crh;
 800149c:	f248 4bb8 	movw	fp, #33976	; 0x84b8
  GPIOA->CRL = config->PAData.crl;
 80014a0:	f644 3884 	movw	r8, #19332	; 0x4b84
  GPIOB->ODR = config->PBData.odr;
 80014a4:	f44f 6740 	mov.w	r7, #3072	; 0xc00
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80014a8:	f648 0444 	movw	r4, #34884	; 0x8844
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80014ac:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 80014b0:	f2c4 0701 	movt	r7, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80014b4:	f6c8 0b88 	movt	fp, #34952	; 0x8888
  GPIOA->CRL = config->PAData.crl;
 80014b8:	f2cb 48b3 	movt	r8, #46259	; 0xb4b3
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80014bc:	f2cb 4ab3 	movt	sl, #46259	; 0xb4b3
  GPIOB->CRL = config->PBData.crl;
 80014c0:	f6ce 6988 	movt	r9, #61064	; 0xee88
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80014c4:	f6c8 0488 	movt	r4, #34952	; 0x8888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80014c8:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  GPIOC->CRH = config->PCData.crh;
 80014cc:	f648 0c33 	movw	ip, #34867	; 0x8833
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80014d0:	9400      	str	r4, [sp, #0]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80014d2:	f2c4 0601 	movt	r6, #16385	; 0x4001
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80014d6:	f8ce 100c 	str.w	r1, [lr, #12]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 80014da:	f6c8 0c88 	movt	ip, #34952	; 0x8888

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 80014de:	f8ce b004 	str.w	fp, [lr, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80014e2:	f640 13f0 	movw	r3, #2544	; 0x9f0
  GPIOA->CRL = config->PAData.crl;
 80014e6:	f8ce 8000 	str.w	r8, [lr]
  GPIOB->ODR = config->PBData.odr;
 80014ea:	60f9      	str	r1, [r7, #12]
  GPIOB->CRH = config->PBData.crh;
 80014ec:	f8c7 a004 	str.w	sl, [r7, #4]
  GPIOB->CRL = config->PBData.crl;
 80014f0:	f8c7 9000 	str.w	r9, [r7]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 80014f4:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 80014f8:	f46f 7940 	mvn.w	r9, #768	; 0x300
 80014fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001500:	f8c6 900c 	str.w	r9, [r6, #12]

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8001504:	f8df b63c 	ldr.w	fp, [pc, #1596]	; 8001b44 <main+0x744>
  GPIOC->CRH = config->PCData.crh;
 8001508:	f8c6 c004 	str.w	ip, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 800150c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 8001510:	6037      	str	r7, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001512:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8001516:	9e00      	ldr	r6, [sp, #0]
 8001518:	f641 4ed0 	movw	lr, #7376	; 0x1cd0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800151c:	f640 18b8 	movw	r8, #2488	; 0x9b8
 8001520:	f2c2 0800 	movt	r8, #8192	; 0x2000
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8001524:	f2c4 0501 	movt	r5, #16385	; 0x4001
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001528:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800152c:	4699      	mov	r9, r3
 800152e:	f6c0 0e00 	movt	lr, #2048	; 0x800
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8001532:	f44f 4ca8 	mov.w	ip, #21504	; 0x5400
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8001536:	60e9      	str	r1, [r5, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001538:	f103 0a0c 	add.w	sl, r3, #12
  GPIOD->CRH = config->PDData.crh;
 800153c:	606f      	str	r7, [r5, #4]
 800153e:	f2c4 0c00 	movt	ip, #16384	; 0x4000
  GPIOD->CRL = config->PDData.crl;
 8001542:	602e      	str	r6, [r5, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8001544:	60e1      	str	r1, [r4, #12]
 8001546:	f108 050c 	add.w	r5, r8, #12
  GPIOE->CRH = config->PEData.crh;
 800154a:	6067      	str	r7, [r4, #4]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800154c:	f1ab 0614 	sub.w	r6, fp, #20
  GPIOE->CRL = config->PEData.crl;
 8001550:	6027      	str	r7, [r4, #0]
 8001552:	2401      	movs	r4, #1
 8001554:	f849 eb04 	str.w	lr, [r9], #4
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001558:	f04f 0e10 	mov.w	lr, #16
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800155c:	615a      	str	r2, [r3, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800155e:	f8c3 9004 	str.w	r9, [r3, #4]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8001562:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8001566:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800156a:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
 800156e:	f8c8 500c 	str.w	r5, [r8, #12]
  tqp->prev = (thread_t *)tqp;
 8001572:	f8c8 5010 	str.w	r5, [r8, #16]
 8001576:	f888 4000 	strb.w	r4, [r8]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800157a:	721c      	strb	r4, [r3, #8]
  i2cp->config = NULL;
 800157c:	f8c8 2004 	str.w	r2, [r8, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001580:	f8c8 2014 	str.w	r2, [r8, #20]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8001584:	f8c8 201c 	str.w	r2, [r8, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001588:	f8c3 a00c 	str.w	sl, [r3, #12]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800158c:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001590:	69c5      	ldr	r5, [r0, #28]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001592:	f103 0754 	add.w	r7, r3, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001596:	f240 4681 	movw	r6, #1153	; 0x481
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 800159a:	f44f 4990 	mov.w	r9, #18432	; 0x4800
  tqp->prev = (thread_t *)tqp;
 800159e:	f8c3 a010 	str.w	sl, [r3, #16]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80015a2:	619f      	str	r7, [r3, #24]
  iqp->q_rdptr   = bp;
 80015a4:	625f      	str	r7, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80015a6:	621f      	str	r7, [r3, #32]
 80015a8:	ea45 0a04 	orr.w	sl, r5, r4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80015ac:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  iqp->q_top     = bp + size;
 80015b0:	f103 0564 	add.w	r5, r3, #100	; 0x64
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80015b4:	f103 0b74 	add.w	fp, r3, #116	; 0x74
  oqp->q_notify  = onfy;
 80015b8:	f6c0 0600 	movt	r6, #2048	; 0x800
 80015bc:	f2c4 0900 	movt	r9, #16384	; 0x4000

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80015c0:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 80015c6:	f8c3 b040 	str.w	fp, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 80015ca:	64de      	str	r6, [r3, #76]	; 0x4c
 80015cc:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80015d0:	61dd      	str	r5, [r3, #28]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80015d2:	63dd      	str	r5, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80015d4:	649d      	str	r5, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80015d6:	645d      	str	r5, [r3, #68]	; 0x44
 80015d8:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 80015dc:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 80015e0:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 80015e2:	651b      	str	r3, [r3, #80]	; 0x50
 80015e4:	f2ce 0704 	movt	r7, #57348	; 0xe004

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80015e8:	f8c0 a01c 	str.w	sl, [r0, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80015ec:	687d      	ldr	r5, [r7, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80015ee:	f645 5abf 	movw	sl, #23999	; 0x5dbf

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80015f2:	f445 6b00 	orr.w	fp, r5, #2048	; 0x800
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80015f6:	f640 035c 	movw	r3, #2140	; 0x85c

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80015fa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80015fe:	f44f 4661 	mov.w	r6, #57600	; 0xe100
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001602:	f640 0038 	movw	r0, #2104	; 0x838
 8001606:	f2c2 0300 	movt	r3, #8192	; 0x2000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800160a:	f8c7 b004 	str.w	fp, [r7, #4]
 800160e:	f2c2 0000 	movt	r0, #8192	; 0x2000

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001612:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
 8001616:	f2ce 0600 	movt	r6, #57344	; 0xe000
 800161a:	f04f 0c80 	mov.w	ip, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800161e:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001622:	f64f 79ff 	movw	r9, #65535	; 0xffff
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001626:	f44f 4a6d 	mov.w	sl, #60672	; 0xed00
 800162a:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
 800162e:	f2ce 0a00 	movt	sl, #57344	; 0xe000
  STM32_ST_TIM->CCMR1  = 0;
 8001632:	61aa      	str	r2, [r5, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001634:	636a      	str	r2, [r5, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001636:	60ea      	str	r2, [r5, #12]
  STM32_ST_TIM->CR2    = 0;
 8001638:	606a      	str	r2, [r5, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800163a:	616c      	str	r4, [r5, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800163c:	602c      	str	r4, [r5, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800163e:	f886 c31c 	strb.w	ip, [r6, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001642:	f8c6 b180 	str.w	fp, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001646:	f8c6 b000 	str.w	fp, [r6]
 800164a:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800164c:	605b      	str	r3, [r3, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 800164e:	609a      	str	r2, [r3, #8]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001650:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001654:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001658:	f8c3 c068 	str.w	ip, [r3, #104]	; 0x68
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800165c:	661a      	str	r2, [r3, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 800165e:	f883 404e 	strb.w	r4, [r3, #78]	; 0x4e
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8001662:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
  H_NEXT(&default_heap.header) = NULL;
 8001666:	6082      	str	r2, [r0, #8]
  H_PAGES(&default_heap.header) = 0;
 8001668:	60c2      	str	r2, [r0, #12]
 800166a:	f8da 500c 	ldr.w	r5, [sl, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	f64f 06ff 	movw	r6, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8001672:	f44f 7440 	mov.w	r4, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	402e      	ands	r6, r5
  tp->name      = name;
 8001678:	f641 4bb8 	movw	fp, #7352	; 0x1cb8
  reg_value  =  (reg_value                                   |
 800167c:	f2c0 54fa 	movt	r4, #1530	; 0x5fa
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001680:	f240 7991 	movw	r9, #1937	; 0x791
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001684:	f103 071c 	add.w	r7, r3, #28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 8001688:	8499      	strh	r1, [r3, #36]	; 0x24
 800168a:	4334      	orrs	r4, r6
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 800168c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001690:	f6c0 0b00 	movt	fp, #2048	; 0x800
 8001694:	f6c0 0900 	movt	r9, #2048	; 0x800
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001698:	f640 05d4 	movw	r5, #2260	; 0x8d4
 800169c:	f640 2c70 	movw	ip, #2672	; 0xa70
  ch_memcore.endmem  = __heap_end__;
 80016a0:	f242 0600 	movw	r6, #8192	; 0x2000
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80016a4:	61df      	str	r7, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80016a6:	621f      	str	r7, [r3, #32]
 80016a8:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80016ac:	eb00 070e 	add.w	r7, r0, lr
  REG_INSERT(tp);
 80016b0:	f103 0b2c 	add.w	fp, r3, #44	; 0x2c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80016b4:	6559      	str	r1, [r3, #84]	; 0x54
 80016b6:	f8c0 9000 	str.w	r9, [r0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80016ba:	f103 0158 	add.w	r1, r3, #88	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80016be:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80016c2:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  ch_memcore.endmem  = __heap_end__;
 80016c6:	f2c2 0600 	movt	r6, #8192	; 0x2000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016ca:	f64e 59f0 	movw	r9, #60912	; 0xedf0
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80016ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80016d0:	665a      	str	r2, [r3, #100]	; 0x64
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 80016d2:	649a      	str	r2, [r3, #72]	; 0x48
 80016d4:	6182      	str	r2, [r0, #24]
 80016d6:	6107      	str	r7, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 80016d8:	6147      	str	r7, [r0, #20]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80016da:	f8c3 b010 	str.w	fp, [r3, #16]
 80016de:	f8c3 b014 	str.w	fp, [r3, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80016e2:	f8c3 b018 	str.w	fp, [r3, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80016e6:	6599      	str	r1, [r3, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 80016e8:	65d9      	str	r1, [r3, #92]	; 0x5c
 80016ea:	63db      	str	r3, [r3, #60]	; 0x3c
 80016ec:	641b      	str	r3, [r3, #64]	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80016ee:	f8c5 c000 	str.w	ip, [r5]
  ch_memcore.endmem  = __heap_end__;
 80016f2:	606e      	str	r6, [r5, #4]
 80016f4:	f2ce 0900 	movt	r9, #57344	; 0xe000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80016f8:	f8ca 400c 	str.w	r4, [sl, #12]
 80016fc:	f8d9 100c 	ldr.w	r1, [r9, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	f2ce 0300 	movt	r3, #57344	; 0xe000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001708:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800170c:	f8c9 100c 	str.w	r1, [r9, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001710:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	2120      	movs	r1, #32
 8001714:	f040 0001 	orr.w	r0, r0, #1
 8001718:	6018      	str	r0, [r3, #0]
 800171a:	f88a e01f 	strb.w	lr, [sl, #31]
 800171e:	f88a 1022 	strb.w	r1, [sl, #34]	; 0x22
 8001722:	f382 8811 	msr	BASEPRI, r2
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001726:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001728:	2320      	movs	r3, #32
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f640 025c 	movw	r2, #2140	; 0x85c
 8001732:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8001736:	f640 03e0 	movw	r3, #2272	; 0x8e0
 800173a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800173e:	2401      	movs	r4, #1
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8001740:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8001744:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001748:	f640 47e1 	movw	r7, #3297	; 0xce1

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 800174c:	f8de c008 	ldr.w	ip, [lr, #8]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001750:	f8d2 9014 	ldr.w	r9, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001754:	f103 0a6c 	add.w	sl, r3, #108	; 0x6c
 8001758:	f6c0 0700 	movt	r7, #2048	; 0x800
 800175c:	f240 2665 	movw	r6, #613	; 0x265
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001760:	f641 4598 	movw	r5, #7320	; 0x1c98
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001764:	2100      	movs	r1, #0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001766:	f103 0090 	add.w	r0, r3, #144	; 0x90
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800176a:	f8c3 a09c 	str.w	sl, [r3, #156]	; 0x9c
 800176e:	66df      	str	r7, [r3, #108]	; 0x6c
 8001770:	f6c0 0600 	movt	r6, #2048	; 0x800
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001774:	f103 07bc 	add.w	r7, r3, #188	; 0xbc
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001778:	f04f 0b02 	mov.w	fp, #2
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 800177c:	f6c0 0500 	movt	r5, #2048	; 0x800
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001780:	f103 0ab8 	add.w	sl, r3, #184	; 0xb8
  REG_INSERT(tp);
 8001784:	f8c3 90a4 	str.w	r9, [r3, #164]	; 0xa4
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8001788:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800178c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001790:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001794:	f883 b0b0 	strb.w	fp, [r3, #176]	; 0xb0
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001798:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 800179c:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80017a0:	f883 40b2 	strb.w	r4, [r3, #178]	; 0xb2
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80017a4:	6719      	str	r1, [r3, #112]	; 0x70
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80017a6:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80017aa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80017ae:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80017b2:	f8c9 0010 	str.w	r0, [r9, #16]
 80017b6:	6150      	str	r0, [r2, #20]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 80017b8:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80017bc:	f8c3 a0b8 	str.w	sl, [r3, #184]	; 0xb8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80017c0:	f8c3 70bc 	str.w	r7, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 80017c4:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 80017c8:	f1bc 0f00 	cmp.w	ip, #0
 80017cc:	f000 8142 	beq.w	8001a54 <main+0x654>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80017d0:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 80017d4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80017d6:	6891      	ldr	r1, [r2, #8]
 80017d8:	2900      	cmp	r1, #0
 80017da:	d1fb      	bne.n	80017d4 <main+0x3d4>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80017dc:	6854      	ldr	r4, [r2, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80017de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
 80017e2:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
 80017e6:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
 80017e8:	6050      	str	r0, [r2, #4]
 80017ea:	f381 8811 	msr	BASEPRI, r1
 *
 * @init
 */
void lcdObjectInit(LCDDriver *lcdp){

  lcdp->state  = LCD_STOP;
 80017ee:	f640 04cc 	movw	r4, #2252	; 0x8cc
  lcdp->config = NULL;
 80017f2:	2300      	movs	r3, #0
 *
 * @init
 */
void lcdObjectInit(LCDDriver *lcdp){

  lcdp->state  = LCD_STOP;
 80017f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80017f8:	2201      	movs	r2, #1
/*
  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
*/

  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 80017fa:	2040      	movs	r0, #64	; 0x40
 80017fc:	f641 4688 	movw	r6, #7304	; 0x1c88
 8001800:	7022      	strb	r2, [r4, #0]
  lcdp->config = NULL;
 8001802:	6063      	str	r3, [r4, #4]
  lcdp->backlight = 0;
 8001804:	7063      	strb	r3, [r4, #1]
 8001806:	9600      	str	r6, [sp, #0]
 8001808:	f7ff fdca 	bl	80013a0 <_pal_lld_setgroupmode.constprop.8>
 800180c:	f641 467c 	movw	r6, #7292	; 0x1c7c
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 8001810:	2080      	movs	r0, #128	; 0x80
 8001812:	9601      	str	r6, [sp, #4]
 8001814:	f7ff fdc4 	bl	80013a0 <_pal_lld_setgroupmode.constprop.8>
 8001818:	9e00      	ldr	r6, [sp, #0]
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800181a:	f640 19b8 	movw	r9, #2488	; 0x9b8
 800181e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001822:	9600      	str	r6, [sp, #0]
 8001824:	9e01      	ldr	r6, [sp, #4]

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8001826:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800182a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800182e:	9601      	str	r6, [sp, #4]
 8001830:	4dc2      	ldr	r5, [pc, #776]	; (8001b3c <main+0x73c>)
 8001832:	4ec3      	ldr	r6, [pc, #780]	; (8001b40 <main+0x740>)
 8001834:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8001838:	f2c4 0a02 	movt	sl, #16386	; 0x4002
  osalDbgCheck((lcdp != NULL) && (config != NULL));

  osalDbgAssert((lcdp->state == LCD_STOP) || (lcdp->state == LCD_ACTIVE),
              "lcdStart(), invalid state");

  lcdp->config = config;
 800183c:	9a00      	ldr	r2, [sp, #0]
  lcdp->backlight = lcdp->config->backlight;
 800183e:	2301      	movs	r3, #1
 8001840:	7063      	strb	r3, [r4, #1]
  osalDbgCheck((lcdp != NULL) && (config != NULL));

  osalDbgAssert((lcdp->state == LCD_STOP) || (lcdp->state == LCD_ACTIVE),
              "lcdStart(), invalid state");

  lcdp->config = config;
 8001842:	6062      	str	r2, [r4, #4]
 8001844:	2320      	movs	r3, #32
 8001846:	f383 8811 	msr	BASEPRI, r3
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800184a:	f898 b000 	ldrb.w	fp, [r8]
 800184e:	9b01      	ldr	r3, [sp, #4]
 8001850:	f1bb 0f01 	cmp.w	fp, #1
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001854:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8001858:	bf18      	it	ne
 800185a:	f641 407c 	movwne	r0, #7292	; 0x1c7c
 800185e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001862:	bf1c      	itt	ne
 8001864:	f6c0 0000 	movtne	r0, #2048	; 0x800
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001868:	463b      	movne	r3, r7

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800186a:	f000 8102 	beq.w	8001a72 <main+0x672>
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800186e:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8001872:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8001876:	f8d1 c004 	ldr.w	ip, [r1, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800187a:	f8d2 b004 	ldr.w	fp, [r2, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800187e:	f107 0210 	add.w	r2, r7, #16
 8001882:	f8cc 2008 	str.w	r2, [ip, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8001886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800188a:	f44f 6c10 	mov.w	ip, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
 800188e:	f04f 0e00 	mov.w	lr, #0
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8001892:	f8cb 2008 	str.w	r2, [fp, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8001896:	6039      	str	r1, [r7, #0]
  dp->CR1 = 0;
 8001898:	f8c7 e000 	str.w	lr, [r7]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800189c:	f8c7 c004 	str.w	ip, [r7, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80018a6:	4011      	ands	r1, r2
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80018a8:	f890 b008 	ldrb.w	fp, [r0, #8]
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 80018ac:	6842      	ldr	r2, [r0, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80018ae:	6059      	str	r1, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80018b0:	f8d3 c004 	ldr.w	ip, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 80018b4:	f248 61a0 	movw	r1, #34464	; 0x86a0
 80018b8:	f2c0 0101 	movt	r1, #1
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80018bc:	f04c 0c18 	orr.w	ip, ip, #24

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 80018c0:	428a      	cmp	r2, r1
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80018c2:	f8c3 c004 	str.w	ip, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 80018c6:	f340 80c8 	ble.w	8001a5a <main+0x65a>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 80018ca:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 80018ce:	f2c0 0106 	movt	r1, #6
 80018d2:	428a      	cmp	r2, r1
 80018d4:	bfc8      	it	gt
 80018d6:	4672      	movgt	r2, lr
 80018d8:	dc1b      	bgt.n	8001912 <main+0x512>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 80018da:	f1bb 0f02 	cmp.w	fp, #2
 80018de:	f000 811e 	beq.w	8001b1e <main+0x71e>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 80018e2:	f1bb 0f03 	cmp.w	fp, #3
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 80018e6:	bf01      	itttt	eq
 80018e8:	eb02 0282 	addeq.w	r2, r2, r2, lsl #2
 80018ec:	f44f 5158 	moveq.w	r1, #13824	; 0x3600
 80018f0:	eb02 0282 	addeq.w	r2, r2, r2, lsl #2
 80018f4:	f2c0 116e 	movteq	r1, #366	; 0x16e
 80018f8:	bf01      	itttt	eq
 80018fa:	fb91 f2f2 	sdiveq	r2, r1, r2
 80018fe:	ea6f 4282 	mvneq.w	r2, r2, lsl #18
 8001902:	ea6f 4292 	mvneq.w	r2, r2, lsr #18
 8001906:	b292      	uxtheq	r2, r2
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8001908:	bf18      	it	ne
 800190a:	f648 72ff 	movwne	r2, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800190e:	2108      	movs	r1, #8
 8001910:	6219      	str	r1, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8001912:	61da      	str	r2, [r3, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8001914:	7801      	ldrb	r1, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8001916:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8001918:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800191a:	b292      	uxth	r2, r2
  switch (opmode) {
 800191c:	f000 80f9 	beq.w	8001b12 <main+0x712>
 8001920:	2903      	cmp	r1, #3
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8001922:	bf08      	it	eq
 8001924:	f042 020a 	orreq.w	r2, r2, #10
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8001928:	d005      	beq.n	8001936 <main+0x536>
 800192a:	2901      	cmp	r1, #1
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800192c:	bf02      	ittt	eq
 800192e:	f022 020a 	biceq.w	r2, r2, #10
 8001932:	0412      	lsleq	r2, r2, #16
 8001934:	0c12      	lsreq	r2, r2, #16
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8001936:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8001938:	683b      	ldr	r3, [r7, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 800193a:	2202      	movs	r2, #2
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	f888 2000 	strb.w	r2, [r8]
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	2032      	movs	r0, #50	; 0x32
 800194e:	f7ff fc7f 	bl	8001250 <chThdSleep>
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 8001952:	2730      	movs	r7, #48	; 0x30
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8001954:	6863      	ldr	r3, [r4, #4]
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 8001956:	f04f 0b34 	mov.w	fp, #52	; 0x34
  txbuf[1] = LCD_D(4) | LCD_D(5);
 800195a:	f88d 700d 	strb.w	r7, [sp, #13]
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 800195e:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8001962:	7a19      	ldrb	r1, [r3, #8]
 8001964:	aa03      	add	r2, sp, #12
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2302      	movs	r3, #2
 800196a:	f7ff fc11 	bl	8001190 <i2cMasterTransmitTimeout.constprop.9>
 800196e:	2005      	movs	r0, #5
 8001970:	f7ff fc6e 	bl	8001250 <chThdSleep>
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8001974:	6863      	ldr	r3, [r4, #4]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 8001976:	f88d 700d 	strb.w	r7, [sp, #13]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 800197a:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 800197e:	7a19      	ldrb	r1, [r3, #8]
 8001980:	aa03      	add	r2, sp, #12
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	f7ff fc03 	bl	8001190 <i2cMasterTransmitTimeout.constprop.9>
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fc60 	bl	8001250 <chThdSleep>
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8001990:	6863      	ldr	r3, [r4, #4]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 8001992:	f88d 700d 	strb.w	r7, [sp, #13]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 8001996:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 800199a:	7a19      	ldrb	r1, [r3, #8]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	aa03      	add	r2, sp, #12
 80019a0:	2302      	movs	r3, #2
 80019a2:	f7ff fbf5 	bl	8001190 <i2cMasterTransmitTimeout.constprop.9>
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80019a6:	6863      	ldr	r3, [r4, #4]
  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
 80019a8:	2124      	movs	r1, #36	; 0x24
  txbuf[1] = LCD_D(5);
 80019aa:	2220      	movs	r2, #32
  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
 80019ac:	f88d 100c 	strb.w	r1, [sp, #12]
  txbuf[1] = LCD_D(5);
 80019b0:	f88d 200d 	strb.w	r2, [sp, #13]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80019b4:	7a19      	ldrb	r1, [r3, #8]
 80019b6:	aa03      	add	r2, sp, #12
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	f7ff fbe8 	bl	8001190 <i2cMasterTransmitTimeout.constprop.9>
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  /* Configuring data interface */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_FS | LCD_DATA_LENGHT |
                       lcdp->config->font | lcdp->config->lines);
 80019c0:	6863      	ldr	r3, [r4, #4]
  txbuf[1] = LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  /* Configuring data interface */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_FS | LCD_DATA_LENGHT |
 80019c2:	2000      	movs	r0, #0
 80019c4:	7ad9      	ldrb	r1, [r3, #11]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	f641 47a0 	movw	r7, #7328	; 0x1ca0
 80019cc:	4319      	orrs	r1, r3
 80019ce:	f041 0120 	orr.w	r1, r1, #32
 80019d2:	f7ff fc4d 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
                       lcdp->config->font | lcdp->config->lines);

  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
 80019d6:	2000      	movs	r0, #0
 80019d8:	2108      	movs	r1, #8
 80019da:	f7ff fc49 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);
 80019de:	2000      	movs	r0, #0
 80019e0:	2101      	movs	r1, #1
 80019e2:	f7ff fc45 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
                       lcdp->config->cursor | lcdp->config->blinking);
 80019e6:	6863      	ldr	r3, [r4, #4]
  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
 80019e8:	2000      	movs	r0, #0
 80019ea:	7a59      	ldrb	r1, [r3, #9]
 80019ec:	7a9b      	ldrb	r3, [r3, #10]
 80019ee:	f6c0 0700 	movt	r7, #2048	; 0x800
 80019f2:	4319      	orrs	r1, r3
 80019f4:	f041 010c 	orr.w	r1, r1, #12
 80019f8:	f7ff fc3a 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
                       lcdp->config->cursor | lcdp->config->blinking);

  /* Setting Entry Mode */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_EMS | LCD_EMS_ID);
 80019fc:	2000      	movs	r0, #0
 80019fe:	2106      	movs	r1, #6
 8001a00:	f7ff fc36 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>

  i2cStart(lcdp->config->i2cp, lcdp->config->i2ccfg);
  /* Initializing HD44780 by instructions. */
  hd44780InitByIstructions(lcdp);

  lcdp->state = LCD_ACTIVE;
 8001a04:	2302      	movs	r3, #2
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	2000      	movs	r0, #0

  i2cStart(lcdp->config->i2cp, lcdp->config->i2ccfg);
  /* Initializing HD44780 by instructions. */
  hd44780InitByIstructions(lcdp);

  lcdp->state = LCD_ACTIVE;
 8001a0a:	7023      	strb	r3, [r4, #0]
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8001a0c:	f7ff fc30 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8001a10:	2150      	movs	r1, #80	; 0x50
 8001a12:	e001      	b.n	8001a18 <main+0x618>
 8001a14:	42b7      	cmp	r7, r6
 8001a16:	d006      	beq.n	8001a26 <main+0x626>
      hd44780WriteRegister(lcdp, LCD_DATA_R, *string);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff fc29 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8001a1e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d1f6      	bne.n	8001a14 <main+0x614>
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8001a26:	21a8      	movs	r1, #168	; 0xa8
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f641 47b0 	movw	r7, #7344	; 0x1cb0
 8001a2e:	f7ff fc1f 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
 8001a32:	f6c0 0700 	movt	r7, #2048	; 0x800
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8001a36:	2165      	movs	r1, #101	; 0x65
 8001a38:	e001      	b.n	8001a3e <main+0x63e>
 8001a3a:	42af      	cmp	r7, r5
 8001a3c:	d006      	beq.n	8001a4c <main+0x64c>
      hd44780WriteRegister(lcdp, LCD_DATA_R, *string);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7ff fc16 	bl	8001270 <hd44780WriteRegister.11289.constprop.4>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8001a44:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8001a48:	2900      	cmp	r1, #0
 8001a4a:	d1f6      	bne.n	8001a3a <main+0x63a>

	while(1){
  lcdStart(&LCDD1, &lcdcfg);
  lcdWriteString(&LCDD1, "Profe pasenos", 0);
  lcdWriteString(&LCDD1, "en 5.0",40);
  chThdSleepMilliseconds(10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f7ff fbff 	bl	8001250 <chThdSleep>
 8001a52:	e6f3      	b.n	800183c <main+0x43c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001a54:	f88e c020 	strb.w	ip, [lr, #32]
 8001a58:	e7fe      	b.n	8001a58 <main+0x658>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8001a5a:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8001a5e:	f2c0 116e 	movt	r1, #366	; 0x16e
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	fb91 f2f2 	sdiv	r2, r1, r2
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8001a68:	2119      	movs	r1, #25
 8001a6a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001a6e:	6219      	str	r1, [r3, #32]
 8001a70:	e74f      	b.n	8001912 <main+0x512>
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001a72:	229a      	movs	r2, #154	; 0x9a
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001a74:	238a      	movs	r3, #138	; 0x8a
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001a76:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8001a7a:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8001a7e:	f8da 0010 	ldr.w	r0, [sl, #16]
 8001a82:	2300      	movs	r3, #0
 8001a84:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
      b = dmaStreamAllocate(i2cp->dmarx,
 8001a88:	f640 2111 	movw	r1, #2577	; 0xa11
 8001a8c:	f640 12b8 	movw	r2, #2488	; 0x9b8

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8001a90:	f8ca 0010 	str.w	r0, [sl, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8001a94:	f6c0 0100 	movt	r1, #2048	; 0x800

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8001a98:	f8ca 3010 	str.w	r3, [sl, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8001a9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001aa0:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8001aa4:	f7ff fc24 	bl	80012f0 <dmaStreamAllocate.constprop.11>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 8001aa8:	f240 3101 	movw	r1, #769	; 0x301
 8001aac:	f640 12b8 	movw	r2, #2488	; 0x9b8
 8001ab0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001ab4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ab8:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8001abc:	f7ff fc18 	bl	80012f0 <dmaStreamAllocate.constprop.11>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8001ac0:	f8da 001c 	ldr.w	r0, [sl, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ac4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001ac8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001acc:	2250      	movs	r2, #80	; 0x50
 8001ace:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ad2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ad6:	f8ca 001c 	str.w	r0, [sl, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ada:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ade:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001ae2:	6019      	str	r1, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001ae4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001ae8:	f8c3 b184 	str.w	fp, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001aec:	f8c3 b004 	str.w	fp, [r3, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8001af0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8001af4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8001af8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8001afc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001b00:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8001b04:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 8001b08:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001b0c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8001b10:	e6ad      	b.n	800186e <main+0x46e>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8001b12:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8001b16:	4011      	ands	r1, r2
 8001b18:	f041 0202 	orr.w	r2, r1, #2
 8001b1c:	e70b      	b.n	8001936 <main+0x536>

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8001b1e:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8001b22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b26:	f2c0 116e 	movt	r1, #366	; 0x16e
 8001b2a:	fb91 f2f2 	sdiv	r2, r1, r2
 8001b2e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001b32:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001b36:	b292      	uxth	r2, r2
 8001b38:	e6e9      	b.n	800190e <main+0x50e>
 8001b3a:	bf00      	nop
 8001b3c:	08001d08 	.word	0x08001d08
 8001b40:	08001d20 	.word	0x08001d20
 8001b44:	08001d68 	.word	0x08001d68
 8001b48:	f3af 8000 	nop.w
 8001b4c:	f3af 8000 	nop.w

08001b50 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b58:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001b5a:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001b62:	680a      	ldr	r2, [r1, #0]
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	0792      	lsls	r2, r2, #30
 8001b6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b6e:	d5f8      	bpl.n	8001b62 <__early_init+0x12>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001b70:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001b72:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001b74:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8001b78:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b7a:	4619      	mov	r1, r3
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001b7c:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001b7e:	684a      	ldr	r2, [r1, #4]
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	f012 0f0c 	tst.w	r2, #12
 8001b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b8c:	d1f7      	bne.n	8001b7e <__early_init+0x2e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001b8e:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001b90:	4619      	mov	r1, r3
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8001b92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b96:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8001b98:	680a      	ldr	r2, [r1, #0]
 8001b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9e:	0390      	lsls	r0, r2, #14
 8001ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ba4:	d5f8      	bpl.n	8001b98 <__early_init+0x48>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001ba6:	685a      	ldr	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001ba8:	4619      	mov	r1, r3
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8001baa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bae:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001bb6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001bb8:	680a      	ldr	r2, [r1, #0]
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	0192      	lsls	r2, r2, #6
 8001bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bc4:	d5f8      	bpl.n	8001bb8 <__early_init+0x68>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001bce:	2110      	movs	r1, #16
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#else
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8001bd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001bd4:	6058      	str	r0, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8001bd6:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001bd8:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001bda:	461a      	mov	r2, r3
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8001bdc:	f041 0102 	orr.w	r1, r1, #2
 8001be0:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d1fa      	bne.n	8001be2 <__early_init+0x92>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
