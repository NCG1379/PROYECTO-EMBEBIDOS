
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

08000180 <Reset_Handler>:
 8000180:	b672      	cpsid	i
 8000182:	4825      	ldr	r0, [pc, #148]	; (8000218 <endfiniloop+0x4>)
 8000184:	f380 8809 	msr	PSP, r0
 8000188:	4824      	ldr	r0, [pc, #144]	; (800021c <endfiniloop+0x8>)
 800018a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800018e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000192:	6008      	str	r0, [r1, #0]
 8000194:	2002      	movs	r0, #2
 8000196:	f380 8814 	msr	CONTROL, r0
 800019a:	f3bf 8f6f 	isb	sy
 800019e:	f001 fcf7 	bl	8001b90 <__core_init>
 80001a2:	f002 fc05 	bl	80029b0 <__early_init>
 80001a6:	481e      	ldr	r0, [pc, #120]	; (8000220 <endfiniloop+0xc>)
 80001a8:	491e      	ldr	r1, [pc, #120]	; (8000224 <endfiniloop+0x10>)
 80001aa:	4a1f      	ldr	r2, [pc, #124]	; (8000228 <endfiniloop+0x14>)

080001ac <msloop>:
 80001ac:	4291      	cmp	r1, r2
 80001ae:	bf3c      	itt	cc
 80001b0:	f841 0b04 	strcc.w	r0, [r1], #4
 80001b4:	e7fa      	bcc.n	80001ac <msloop>
 80001b6:	491d      	ldr	r1, [pc, #116]	; (800022c <endfiniloop+0x18>)
 80001b8:	4a17      	ldr	r2, [pc, #92]	; (8000218 <endfiniloop+0x4>)

080001ba <psloop>:
 80001ba:	4291      	cmp	r1, r2
 80001bc:	bf3c      	itt	cc
 80001be:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c2:	e7fa      	bcc.n	80001ba <psloop>
 80001c4:	491a      	ldr	r1, [pc, #104]	; (8000230 <endfiniloop+0x1c>)
 80001c6:	4a1b      	ldr	r2, [pc, #108]	; (8000234 <endfiniloop+0x20>)
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <endfiniloop+0x24>)

080001ca <dloop>:
 80001ca:	429a      	cmp	r2, r3
 80001cc:	bf3e      	ittt	cc
 80001ce:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001d2:	f842 0b04 	strcc.w	r0, [r2], #4
 80001d6:	e7f8      	bcc.n	80001ca <dloop>
 80001d8:	2000      	movs	r0, #0
 80001da:	4918      	ldr	r1, [pc, #96]	; (800023c <endfiniloop+0x28>)
 80001dc:	4a18      	ldr	r2, [pc, #96]	; (8000240 <endfiniloop+0x2c>)

080001de <bloop>:
 80001de:	4291      	cmp	r1, r2
 80001e0:	bf3c      	itt	cc
 80001e2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e6:	e7fa      	bcc.n	80001de <bloop>
 80001e8:	f001 fc92 	bl	8001b10 <__init_ram_areas>
 80001ec:	f001 fcc8 	bl	8001b80 <__late_init>
 80001f0:	4c14      	ldr	r4, [pc, #80]	; (8000244 <endfiniloop+0x30>)
 80001f2:	4d15      	ldr	r5, [pc, #84]	; (8000248 <endfiniloop+0x34>)

080001f4 <initloop>:
 80001f4:	42ac      	cmp	r4, r5
 80001f6:	da03      	bge.n	8000200 <endinitloop>
 80001f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80001fc:	4788      	blx	r1
 80001fe:	e7f9      	b.n	80001f4 <initloop>

08000200 <endinitloop>:
 8000200:	f002 f826 	bl	8002250 <main>
 8000204:	4c11      	ldr	r4, [pc, #68]	; (800024c <endfiniloop+0x38>)
 8000206:	4d12      	ldr	r5, [pc, #72]	; (8000250 <endfiniloop+0x3c>)

08000208 <finiloop>:
 8000208:	42ac      	cmp	r4, r5
 800020a:	da03      	bge.n	8000214 <endfiniloop>
 800020c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000210:	4788      	blx	r1
 8000212:	e7f9      	b.n	8000208 <finiloop>

08000214 <endfiniloop>:
 8000214:	f001 bcac 	b.w	8001b70 <__default_exit>
 8000218:	20000800 	.word	0x20000800
 800021c:	08000000 	.word	0x08000000
 8000220:	55555555 	.word	0x55555555
 8000224:	20000000 	.word	0x20000000
 8000228:	20000400 	.word	0x20000400
 800022c:	20000400 	.word	0x20000400
 8000230:	08002c18 	.word	0x08002c18
 8000234:	20000800 	.word	0x20000800
 8000238:	20000800 	.word	0x20000800
 800023c:	20000800 	.word	0x20000800
 8000240:	20000a6c 	.word	0x20000a6c
 8000244:	08000180 	.word	0x08000180
 8000248:	08000180 	.word	0x08000180
 800024c:	08000180 	.word	0x08000180
 8000250:	08000180 	.word	0x08000180

08000254 <_port_switch>:
 8000254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000258:	f8c1 d00c 	str.w	sp, [r1, #12]
 800025c:	68c3      	ldr	r3, [r0, #12]
 800025e:	469d      	mov	sp, r3
 8000260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000264 <_port_thread_start>:
 8000264:	2300      	movs	r3, #0
 8000266:	f383 8811 	msr	BASEPRI, r3
 800026a:	4628      	mov	r0, r5
 800026c:	47a0      	blx	r4
 800026e:	2000      	movs	r0, #0
 8000270:	f001 fbfe 	bl	8001a70 <chThdExit>

08000274 <_port_switch_from_isr>:
 8000274:	f001 fc2c 	bl	8001ad0 <chSchDoReschedule>

08000278 <_port_exit_from_isr>:
 8000278:	df00      	svc	0
 800027a:	e7fe      	b.n	800027a <_port_exit_from_isr+0x2>

0800027c <__aeabi_drsub>:
 800027c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000280:	e002      	b.n	8000288 <__adddf3>
 8000282:	bf00      	nop

08000284 <__aeabi_dsub>:
 8000284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000288 <__adddf3>:
 8000288:	b530      	push	{r4, r5, lr}
 800028a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000292:	ea94 0f05 	teq	r4, r5
 8000296:	bf08      	it	eq
 8000298:	ea90 0f02 	teqeq	r0, r2
 800029c:	bf1f      	itttt	ne
 800029e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ae:	f000 80e2 	beq.w	8000476 <__adddf3+0x1ee>
 80002b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ba:	bfb8      	it	lt
 80002bc:	426d      	neglt	r5, r5
 80002be:	dd0c      	ble.n	80002da <__adddf3+0x52>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea80 0202 	eor.w	r2, r0, r2
 80002c6:	ea81 0303 	eor.w	r3, r1, r3
 80002ca:	ea82 0000 	eor.w	r0, r2, r0
 80002ce:	ea83 0101 	eor.w	r1, r3, r1
 80002d2:	ea80 0202 	eor.w	r2, r0, r2
 80002d6:	ea81 0303 	eor.w	r3, r1, r3
 80002da:	2d36      	cmp	r5, #54	; 0x36
 80002dc:	bf88      	it	hi
 80002de:	bd30      	pophi	{r4, r5, pc}
 80002e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f0:	d002      	beq.n	80002f8 <__adddf3+0x70>
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x84>
 8000306:	4252      	negs	r2, r2
 8000308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030c:	ea94 0f05 	teq	r4, r5
 8000310:	f000 80a7 	beq.w	8000462 <__adddf3+0x1da>
 8000314:	f1a4 0401 	sub.w	r4, r4, #1
 8000318:	f1d5 0e20 	rsbs	lr, r5, #32
 800031c:	db0d      	blt.n	800033a <__adddf3+0xb2>
 800031e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000322:	fa22 f205 	lsr.w	r2, r2, r5
 8000326:	1880      	adds	r0, r0, r2
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000330:	1880      	adds	r0, r0, r2
 8000332:	fa43 f305 	asr.w	r3, r3, r5
 8000336:	4159      	adcs	r1, r3
 8000338:	e00e      	b.n	8000358 <__adddf3+0xd0>
 800033a:	f1a5 0520 	sub.w	r5, r5, #32
 800033e:	f10e 0e20 	add.w	lr, lr, #32
 8000342:	2a01      	cmp	r2, #1
 8000344:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000348:	bf28      	it	cs
 800034a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	18c0      	adds	r0, r0, r3
 8000354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800035c:	d507      	bpl.n	800036e <__adddf3+0xe6>
 800035e:	f04f 0e00 	mov.w	lr, #0
 8000362:	f1dc 0c00 	rsbs	ip, ip, #0
 8000366:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036a:	eb6e 0101 	sbc.w	r1, lr, r1
 800036e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000372:	d31b      	bcc.n	80003ac <__adddf3+0x124>
 8000374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000378:	d30c      	bcc.n	8000394 <__adddf3+0x10c>
 800037a:	0849      	lsrs	r1, r1, #1
 800037c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000380:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000384:	f104 0401 	add.w	r4, r4, #1
 8000388:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800038c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000390:	f080 809a 	bcs.w	80004c8 <__adddf3+0x240>
 8000394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000398:	bf08      	it	eq
 800039a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039e:	f150 0000 	adcs.w	r0, r0, #0
 80003a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a6:	ea41 0105 	orr.w	r1, r1, r5
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b0:	4140      	adcs	r0, r0
 80003b2:	eb41 0101 	adc.w	r1, r1, r1
 80003b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ba:	f1a4 0401 	sub.w	r4, r4, #1
 80003be:	d1e9      	bne.n	8000394 <__adddf3+0x10c>
 80003c0:	f091 0f00 	teq	r1, #0
 80003c4:	bf04      	itt	eq
 80003c6:	4601      	moveq	r1, r0
 80003c8:	2000      	moveq	r0, #0
 80003ca:	fab1 f381 	clz	r3, r1
 80003ce:	bf08      	it	eq
 80003d0:	3320      	addeq	r3, #32
 80003d2:	f1a3 030b 	sub.w	r3, r3, #11
 80003d6:	f1b3 0220 	subs.w	r2, r3, #32
 80003da:	da0c      	bge.n	80003f6 <__adddf3+0x16e>
 80003dc:	320c      	adds	r2, #12
 80003de:	dd08      	ble.n	80003f2 <__adddf3+0x16a>
 80003e0:	f102 0c14 	add.w	ip, r2, #20
 80003e4:	f1c2 020c 	rsb	r2, r2, #12
 80003e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003ec:	fa21 f102 	lsr.w	r1, r1, r2
 80003f0:	e00c      	b.n	800040c <__adddf3+0x184>
 80003f2:	f102 0214 	add.w	r2, r2, #20
 80003f6:	bfd8      	it	le
 80003f8:	f1c2 0c20 	rsble	ip, r2, #32
 80003fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000400:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000404:	bfdc      	itt	le
 8000406:	ea41 010c 	orrle.w	r1, r1, ip
 800040a:	4090      	lslle	r0, r2
 800040c:	1ae4      	subs	r4, r4, r3
 800040e:	bfa2      	ittt	ge
 8000410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000414:	4329      	orrge	r1, r5
 8000416:	bd30      	popge	{r4, r5, pc}
 8000418:	ea6f 0404 	mvn.w	r4, r4
 800041c:	3c1f      	subs	r4, #31
 800041e:	da1c      	bge.n	800045a <__adddf3+0x1d2>
 8000420:	340c      	adds	r4, #12
 8000422:	dc0e      	bgt.n	8000442 <__adddf3+0x1ba>
 8000424:	f104 0414 	add.w	r4, r4, #20
 8000428:	f1c4 0220 	rsb	r2, r4, #32
 800042c:	fa20 f004 	lsr.w	r0, r0, r4
 8000430:	fa01 f302 	lsl.w	r3, r1, r2
 8000434:	ea40 0003 	orr.w	r0, r0, r3
 8000438:	fa21 f304 	lsr.w	r3, r1, r4
 800043c:	ea45 0103 	orr.w	r1, r5, r3
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	f1c4 040c 	rsb	r4, r4, #12
 8000446:	f1c4 0220 	rsb	r2, r4, #32
 800044a:	fa20 f002 	lsr.w	r0, r0, r2
 800044e:	fa01 f304 	lsl.w	r3, r1, r4
 8000452:	ea40 0003 	orr.w	r0, r0, r3
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	fa21 f004 	lsr.w	r0, r1, r4
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f094 0f00 	teq	r4, #0
 8000466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046a:	bf06      	itte	eq
 800046c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000470:	3401      	addeq	r4, #1
 8000472:	3d01      	subne	r5, #1
 8000474:	e74e      	b.n	8000314 <__adddf3+0x8c>
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf18      	it	ne
 800047c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000480:	d029      	beq.n	80004d6 <__adddf3+0x24e>
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	d005      	beq.n	800049a <__adddf3+0x212>
 800048e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000492:	bf04      	itt	eq
 8000494:	4619      	moveq	r1, r3
 8000496:	4610      	moveq	r0, r2
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea91 0f03 	teq	r1, r3
 800049e:	bf1e      	ittt	ne
 80004a0:	2100      	movne	r1, #0
 80004a2:	2000      	movne	r0, #0
 80004a4:	bd30      	popne	{r4, r5, pc}
 80004a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004aa:	d105      	bne.n	80004b8 <__adddf3+0x230>
 80004ac:	0040      	lsls	r0, r0, #1
 80004ae:	4149      	adcs	r1, r1
 80004b0:	bf28      	it	cs
 80004b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004bc:	bf3c      	itt	cc
 80004be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c2:	bd30      	popcc	{r4, r5, pc}
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf1a      	itte	ne
 80004dc:	4619      	movne	r1, r3
 80004de:	4610      	movne	r0, r2
 80004e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e4:	bf1c      	itt	ne
 80004e6:	460b      	movne	r3, r1
 80004e8:	4602      	movne	r2, r0
 80004ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ee:	bf06      	itte	eq
 80004f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f4:	ea91 0f03 	teqeq	r1, r3
 80004f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	bf00      	nop

08000500 <__aeabi_ui2d>:
 8000500:	f090 0f00 	teq	r0, #0
 8000504:	bf04      	itt	eq
 8000506:	2100      	moveq	r1, #0
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000510:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000514:	f04f 0500 	mov.w	r5, #0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e750      	b.n	80003c0 <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_i2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000538:	bf48      	it	mi
 800053a:	4240      	negmi	r0, r0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e73e      	b.n	80003c0 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_f2d>:
 8000544:	0042      	lsls	r2, r0, #1
 8000546:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054a:	ea4f 0131 	mov.w	r1, r1, rrx
 800054e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000552:	bf1f      	itttt	ne
 8000554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800055c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000560:	4770      	bxne	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	bf14      	ite	ne
 8000568:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e720      	b.n	80003c0 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aedc 	beq.w	800036e <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6c1      	b.n	800036e <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__gesf2>:
 8000b00:	f04f 3cff 	mov.w	ip, #4294967295
 8000b04:	e006      	b.n	8000b14 <__cmpsf2+0x4>
 8000b06:	bf00      	nop

08000b08 <__lesf2>:
 8000b08:	f04f 0c01 	mov.w	ip, #1
 8000b0c:	e002      	b.n	8000b14 <__cmpsf2+0x4>
 8000b0e:	bf00      	nop

08000b10 <__cmpsf2>:
 8000b10:	f04f 0c01 	mov.w	ip, #1
 8000b14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b24:	bf18      	it	ne
 8000b26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2a:	d011      	beq.n	8000b50 <__cmpsf2+0x40>
 8000b2c:	b001      	add	sp, #4
 8000b2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b32:	bf18      	it	ne
 8000b34:	ea90 0f01 	teqne	r0, r1
 8000b38:	bf58      	it	pl
 8000b3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b3e:	bf88      	it	hi
 8000b40:	17c8      	asrhi	r0, r1, #31
 8000b42:	bf38      	it	cc
 8000b44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b48:	bf18      	it	ne
 8000b4a:	f040 0001 	orrne.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	d102      	bne.n	8000b5c <__cmpsf2+0x4c>
 8000b56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b5a:	d105      	bne.n	8000b68 <__cmpsf2+0x58>
 8000b5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b60:	d1e4      	bne.n	8000b2c <__cmpsf2+0x1c>
 8000b62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b66:	d0e1      	beq.n	8000b2c <__cmpsf2+0x1c>
 8000b68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_cfrcmple>:
 8000b70:	4684      	mov	ip, r0
 8000b72:	4608      	mov	r0, r1
 8000b74:	4661      	mov	r1, ip
 8000b76:	e7ff      	b.n	8000b78 <__aeabi_cfcmpeq>

08000b78 <__aeabi_cfcmpeq>:
 8000b78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b7a:	f7ff ffc9 	bl	8000b10 <__cmpsf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b88 <__aeabi_fcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cfcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_fcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cfcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cfcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffd2 	bl	8000b70 <__aeabi_cfrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc8 	bl	8000b70 <__aeabi_cfrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_f2iz>:
 8000bec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30f      	bcc.n	8000c16 <__aeabi_f2iz+0x2a>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_f2iz+0x30>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	bf18      	it	ne
 8000c12:	4240      	negne	r0, r0
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr
 8000c1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c20:	d101      	bne.n	8000c26 <__aeabi_f2iz+0x3a>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	d105      	bne.n	8000c32 <__aeabi_f2iz+0x46>
 8000c26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
	...

08000c40 <wakeup.4656.4242>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000c40:	b410      	push	{r4}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000c42:	2320      	movs	r3, #32
 8000c44:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8000c48:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d80e      	bhi.n	8000c6e <wakeup.4656.4242+0x2e>
 8000c50:	e8df f003 	tbb	[pc, r3]
 8000c54:	270d0d2b 	.word	0x270d0d2b
 8000c58:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8000c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	3201      	adds	r2, #1
 8000c62:	609a      	str	r2, [r3, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000c64:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000c68:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000c6a:	6802      	ldr	r2, [r0, #0]
 8000c6c:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000c6e:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000c72:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000c74:	f640 0344 	movw	r3, #2116	; 0x844
 8000c78:	6881      	ldr	r1, [r0, #8]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8000c7a:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8000c7c:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
  do {
    cp = cp->queue.next;
 8000c84:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	d2fb      	bcs.n	8000c84 <wakeup.4656.4242+0x44>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2100      	movs	r1, #0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8000c90:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c92:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000c94:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000c96:	6058      	str	r0, [r3, #4]
 8000c98:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca0:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8000ca2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7e1      	b.n	8000c6e <wakeup.4656.4242+0x2e>
 8000caa:	2300      	movs	r3, #0
 8000cac:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	f3af 8000 	nop.w
 8000cbc:	f3af 8000 	nop.w

08000cc0 <i2c_lld_serve_tx_end_irq.8324>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cc0:	070b      	lsls	r3, r1, #28
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8000cc2:	b430      	push	{r4, r5}
  I2C_TypeDef *dp = i2cp->i2c;
 8000cc4:	6b42      	ldr	r2, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000cc6:	d411      	bmi.n	8000cec <i2c_lld_serve_tx_end_irq.8324+0x2c>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000cc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000cca:	240e      	movs	r4, #14
 8000ccc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cd0:	680d      	ldr	r5, [r1, #0]
 8000cd2:	f025 050f 	bic.w	r5, r5, #15
 8000cd6:	600d      	str	r5, [r1, #0]
 8000cd8:	7c1b      	ldrb	r3, [r3, #16]
 8000cda:	fa04 f303 	lsl.w	r3, r4, r3
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
}
 8000cde:	bc30      	pop	{r4, r5}
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8000ce0:	6043      	str	r3, [r0, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8000ce2:	6853      	ldr	r3, [r2, #4]
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6053      	str	r3, [r2, #4]
}
 8000cea:	4770      	bx	lr
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000cee:	f640 0344 	movw	r3, #2116	; 0x844
 8000cf2:	f642 22d0 	movw	r2, #10960	; 0x2ad0
 8000cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfa:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8000d00:	e7fe      	b.n	8000d00 <i2c_lld_serve_tx_end_irq.8324+0x40>
 8000d02:	bf00      	nop
 8000d04:	f3af 8000 	nop.w
 8000d08:	f3af 8000 	nop.w
 8000d0c:	f3af 8000 	nop.w

08000d10 <chVTDoResetI.4421>:
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000d10:	f640 0344 	movw	r3, #2116	; 0x844
 8000d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d18:	69da      	ldr	r2, [r3, #28]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8000d1a:	b4f0      	push	{r4, r5, r6, r7}
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000d1c:	4282      	cmp	r2, r0
 8000d1e:	d00f      	beq.n	8000d40 <chVTDoResetI.4421+0x30>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000d20:	6802      	ldr	r2, [r0, #0]
 8000d22:	6841      	ldr	r1, [r0, #4]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d24:	331c      	adds	r3, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000d26:	600a      	str	r2, [r1, #0]
    vtp->next->prev = vtp->prev;
 8000d28:	6802      	ldr	r2, [r0, #0]
    vtp->func = NULL;
 8000d2a:	2400      	movs	r4, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d2c:	429a      	cmp	r2, r3
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 8000d2e:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8000d30:	60c4      	str	r4, [r0, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000d32:	d003      	beq.n	8000d3c <chVTDoResetI.4421+0x2c>
      vtp->next->delta += vtp->delta;
 8000d34:	8901      	ldrh	r1, [r0, #8]
 8000d36:	8913      	ldrh	r3, [r2, #8]
 8000d38:	440b      	add	r3, r1
 8000d3a:	8113      	strh	r3, [r2, #8]
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8000d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000d3e:	4770      	bx	lr

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000d40:	6811      	ldr	r1, [r2, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f840 1f1c 	str.w	r1, [r0, #28]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d48:	4281      	cmp	r1, r0
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000d4a:	f04f 0400 	mov.w	r4, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000d4e:	bf08      	it	eq
 8000d50:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000d54:	6048      	str	r0, [r1, #4]
  vtp->func = NULL;
 8000d56:	60d4      	str	r4, [r2, #12]
 8000d58:	bf08      	it	eq
 8000d5a:	60dc      	streq	r4, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d5c:	d0ee      	beq.n	8000d3c <chVTDoResetI.4421+0x2c>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d62:	6a47      	ldr	r7, [r0, #36]	; 0x24

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000d64:	8916      	ldrh	r6, [r2, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8000d66:	8cdc      	ldrh	r4, [r3, #38]	; 0x26

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000d68:	890d      	ldrh	r5, [r1, #8]
 8000d6a:	b2ba      	uxth	r2, r7
 8000d6c:	1973      	adds	r3, r6, r5
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8000d6e:	1b14      	subs	r4, r2, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000d70:	b29b      	uxth	r3, r3
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8000d72:	b2a4      	uxth	r4, r4

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000d74:	42a3      	cmp	r3, r4

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000d76:	810b      	strh	r3, [r1, #8]
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000d78:	d9e0      	bls.n	8000d3c <chVTDoResetI.4421+0x2c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000d7a:	1b1b      	subs	r3, r3, r4
 8000d7c:	b29b      	uxth	r3, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	bf98      	it	ls
 8000d82:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8000d84:	4413      	add	r3, r2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	6343      	str	r3, [r0, #52]	; 0x34
 8000d8a:	e7d7      	b.n	8000d3c <chVTDoResetI.4421+0x2c>
 8000d8c:	f3af 8000 	nop.w

08000d90 <chVTDoSetI.constprop.21.4455>:
 * @param[in] par       a parameter that will be passed to the callback
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 8000d90:	b4f0      	push	{r4, r5, r6, r7}
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000d92:	f640 0444 	movw	r4, #2116	; 0x844
 8000d96:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000d9a:	4625      	mov	r5, r4
 8000d9c:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000da0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8000da4:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000da8:	f640 4641 	movw	r6, #3137	; 0xc41
 8000dac:	f6c0 0600 	movt	r6, #2048	; 0x800
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000db0:	2901      	cmp	r1, #1
 8000db2:	bf98      	it	ls
 8000db4:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000db6:	42ab      	cmp	r3, r5
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8000db8:	6102      	str	r2, [r0, #16]
  vtp->func = vtfunc;
 8000dba:	60c6      	str	r6, [r0, #12]
 8000dbc:	fa1f f28c 	uxth.w	r2, ip
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000dc0:	d026      	beq.n	8000e10 <chVTDoSetI.constprop.21.4455+0x80>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8000dc2:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8000dc4:	1b95      	subs	r5, r2, r6
 8000dc6:	194a      	adds	r2, r1, r5
 8000dc8:	b292      	uxth	r2, r2

    if (delta < now - ch.vtlist.lasttime) {
 8000dca:	42aa      	cmp	r2, r5
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000dcc:	8919      	ldrh	r1, [r3, #8]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;

    if (delta < now - ch.vtlist.lasttime) {
 8000dce:	db1a      	blt.n	8000e06 <chVTDoSetI.constprop.21.4455+0x76>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000dd0:	428a      	cmp	r2, r1
     /* A small delay that will become the first element in the delta list
        and next deadline.*/
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8000dd2:	bf3e      	ittt	cc
 8000dd4:	1995      	addcc	r5, r2, r6
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000dd6:	b2ad      	uxthcc	r5, r5
 8000dd8:	637d      	strcc	r5, [r7, #52]	; 0x34
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000dda:	428a      	cmp	r2, r1
 8000ddc:	d905      	bls.n	8000dea <chVTDoSetI.constprop.21.4455+0x5a>
    delta -= p->delta;
    p = p->next;
 8000dde:	681b      	ldr	r3, [r3, #0]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
 8000de0:	1a52      	subs	r2, r2, r1
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000de2:	8919      	ldrh	r1, [r3, #8]
    delta -= p->delta;
 8000de4:	b292      	uxth	r2, r2
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d3f9      	bcc.n	8000dde <chVTDoSetI.constprop.21.4455+0x4e>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000dea:	6859      	ldr	r1, [r3, #4]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8000dec:	6003      	str	r3, [r0, #0]
  vtp->prev = vtp->next->prev;
 8000dee:	6041      	str	r1, [r0, #4]
  vtp->prev->next = vtp;
 8000df0:	6008      	str	r0, [r1, #0]
  p->prev = vtp;
 8000df2:	6058      	str	r0, [r3, #4]
  vtp->delta = delta
 8000df4:	8102      	strh	r2, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000df6:	8918      	ldrh	r0, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
  p->prev = vtp;
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000dfc:	1a82      	subs	r2, r0, r2
 8000dfe:	811a      	strh	r2, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000e00:	84a1      	strh	r1, [r4, #36]	; 0x24
}
 8000e02:	bcf0      	pop	{r4, r5, r6, r7}
 8000e04:	4770      	bx	lr
    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8000e06:	681b      	ldr	r3, [r3, #0]

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000e08:	1a52      	subs	r2, r2, r1
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	8919      	ldrh	r1, [r3, #8]
 8000e0e:	e7e4      	b.n	8000dda <chVTDoSetI.constprop.21.4455+0x4a>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8000e10:	eb01 0c02 	add.w	ip, r1, r2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e14:	fa1f fc8c 	uxth.w	ip, ip
  STM32_ST_TIM->SR     = 0;
 8000e18:	2600      	movs	r6, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e1a:	2502      	movs	r5, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 8000e1c:	84e2      	strh	r2, [r4, #38]	; 0x26
      ch.vtlist.next = vtp;
 8000e1e:	61e0      	str	r0, [r4, #28]
      ch.vtlist.prev = vtp;
 8000e20:	6220      	str	r0, [r4, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000e22:	6003      	str	r3, [r0, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000e24:	6043      	str	r3, [r0, #4]
      vtp->delta = delay;
 8000e26:	8101      	strh	r1, [r0, #8]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000e28:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000e2c:	613e      	str	r6, [r7, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000e2e:	60fd      	str	r5, [r7, #12]
 8000e30:	e7e7      	b.n	8000e02 <chVTDoSetI.constprop.21.4455+0x72>
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	f3af 8000 	nop.w
 8000e3c:	f3af 8000 	nop.w

08000e40 <long_to_string_with_divisor.11509.4520>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8000e40:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf08      	it	eq
 8000e46:	460b      	moveq	r3, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8000e48:	f100 070b 	add.w	r7, r0, #11
 8000e4c:	f100 050a 	add.w	r5, r0, #10
  do {
    i = (int)(l % radix);
 8000e50:	fbb1 f6f2 	udiv	r6, r1, r2
 8000e54:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8000e58:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 8000e5c:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8000e5e:	bfc8      	it	gt
 8000e60:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8000e64:	b2e4      	uxtb	r4, r4
    l /= radix;
  } while ((ll /= radix) != 0);
 8000e66:	fbb3 f3f2 	udiv	r3, r3, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8000e6a:	4631      	mov	r1, r6
  do {
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
 8000e6c:	462e      	mov	r6, r5
 8000e6e:	f805 4901 	strb.w	r4, [r5], #-1
    l /= radix;
  } while ((ll /= radix) != 0);
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ec      	bne.n	8000e50 <long_to_string_with_divisor.11509.4520+0x10>

  i = (int)(p + MAX_FILLER - q);
 8000e76:	1bba      	subs	r2, r7, r6
 8000e78:	4633      	mov	r3, r6
 8000e7a:	4402      	add	r2, r0
 8000e7c:	e001      	b.n	8000e82 <long_to_string_with_divisor.11509.4520+0x42>
 8000e7e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  do
    *p++ = *q++;
 8000e82:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d1f9      	bne.n	8000e7e <long_to_string_with_divisor.11509.4520+0x3e>

  return p;
}
 8000e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <notify3.8706>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8000e90:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000e94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e9e:	60da      	str	r2, [r3, #12]
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	f3af 8000 	nop.w
 8000eac:	f3af 8000 	nop.w

08000eb0 <_port_irq_epilogue.4543>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000eb6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000eba:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000ec4:	d102      	bne.n	8000ecc <_port_irq_epilogue.4543+0x1c>
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000ecc:	f3ef 8209 	mrs	r2, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000ed0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed4:	f842 3c04 	str.w	r3, [r2, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000ed8:	f1a2 0320 	sub.w	r3, r2, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000edc:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000ee0:	f640 0344 	movw	r3, #2116	; 0x844
 8000ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee8:	6819      	ldr	r1, [r3, #0]
  tprio_t p2 = currp->prio;
 8000eea:	699b      	ldr	r3, [r3, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000eec:	6889      	ldr	r1, [r1, #8]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4299      	cmp	r1, r3
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000ef2:	bf8b      	itete	hi
 8000ef4:	f240 2375 	movwhi	r3, #629	; 0x275
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000ef8:	f240 2378 	movwls	r3, #632	; 0x278

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000efc:	f6c0 0300 	movthi	r3, #2048	; 0x800
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f00:	f6c0 0300 	movtls	r3, #2048	; 0x800
 8000f04:	f842 3c08 	str.w	r3, [r2, #-8]
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w

08000f10 <VectorB0.4442>:
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f14:	691a      	ldr	r2, [r3, #16]
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000f1a:	0792      	lsls	r2, r2, #30
 8000f1c:	d403      	bmi.n	8000f26 <VectorB0.4442+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000f22:	f7ff bfc5 	b.w	8000eb0 <_port_irq_epilogue.4543>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000f30:	f640 0444 	movw	r4, #2116	; 0x844
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000f34:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000f38:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000f3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000f3e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000f40:	69e3      	ldr	r3, [r4, #28]
 8000f42:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000f44:	1a16      	subs	r6, r2, r0
 8000f46:	8919      	ldrh	r1, [r3, #8]
 8000f48:	b2b6      	uxth	r6, r6
 8000f4a:	428e      	cmp	r6, r1
 8000f4c:	f104 071c 	add.w	r7, r4, #28
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8000f50:	bf24      	itt	cs
 8000f52:	f04f 0800 	movcs.w	r8, #0
 8000f56:	2620      	movcs	r6, #32

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000f58:	d31c      	bcc.n	8000f94 <VectorB0.4442+0x84>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000f5a:	681a      	ldr	r2, [r3, #0]
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8000f5c:	4401      	add	r1, r0
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000f5e:	42ba      	cmp	r2, r7
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;
 8000f60:	84e1      	strh	r1, [r4, #38]	; 0x26

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
 8000f62:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000f64:	6057      	str	r7, [r2, #4]
    ch.vtlist.next = vtp->next;
 8000f66:	61e2      	str	r2, [r4, #28]
    fn = vtp->func;
    vtp->func = NULL;
 8000f68:	f8c3 800c 	str.w	r8, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000f6c:	bf08      	it	eq
 8000f6e:	f8c5 800c 	streq.w	r8, [r5, #12]
 8000f72:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000f76:	6918      	ldr	r0, [r3, #16]
 8000f78:	4788      	blx	r1
 8000f7a:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000f7e:	6a6a      	ldr	r2, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000f80:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 8000f82:	69e3      	ldr	r3, [r4, #28]
 8000f84:	b292      	uxth	r2, r2

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000f86:	ebc0 0c02 	rsb	ip, r0, r2
 8000f8a:	8919      	ldrh	r1, [r3, #8]
 8000f8c:	fa1f fc8c 	uxth.w	ip, ip
 8000f90:	4561      	cmp	r1, ip
 8000f92:	d9e2      	bls.n	8000f5a <VectorB0.4442+0x4a>
    vtp = ch.vtlist.next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000f94:	42bb      	cmp	r3, r7
 8000f96:	d00a      	beq.n	8000fae <VectorB0.4442+0x9e>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8000f98:	4401      	add	r1, r0
 8000f9a:	1a89      	subs	r1, r1, r2
 8000f9c:	b289      	uxth	r1, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000f9e:	2901      	cmp	r1, #1
 8000fa0:	bf98      	it	ls
 8000fa2:	2102      	movls	r1, #2
  }
  port_timer_set_alarm(now + delta);
 8000fa4:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 8000fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000fb8:	f7ff bf7a 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8000fbc:	f3af 8000 	nop.w

08000fc0 <Vector84.4529>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fce:	0e09      	lsrs	r1, r1, #24
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	f001 010e 	and.w	r1, r1, #14
 8000fd6:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000fd8:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000fda:	d009      	beq.n	8000ff0 <Vector84.4529+0x30>
 8000fdc:	f640 0200 	movw	r2, #2048	; 0x800
 8000fe0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000fe4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8000fe6:	0608      	lsls	r0, r1, #24
 8000fe8:	6058      	str	r0, [r3, #4]
 8000fea:	b10c      	cbz	r4, 8000ff0 <Vector84.4529+0x30>
 8000fec:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8000fee:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8000ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8000ff4:	f7ff bf5c 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	f3af 8000 	nop.w

08001000 <Vector80.4531>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8001000:	2300      	movs	r3, #0
 8001002:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	226c      	movs	r2, #108	; 0x6c
 800100a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800100e:	0d09      	lsrs	r1, r1, #20
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	f001 010e 	and.w	r1, r1, #14
 8001016:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001018:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 800101a:	d009      	beq.n	8001030 <Vector80.4531+0x30>
 800101c:	f640 0200 	movw	r2, #2048	; 0x800
 8001020:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001024:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8001026:	0508      	lsls	r0, r1, #20
 8001028:	6058      	str	r0, [r3, #4]
 800102a:	b10c      	cbz	r4, 8001030 <Vector80.4531+0x30>
 800102c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800102e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8001034:	f7ff bf3c 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8001038:	f3af 8000 	nop.w
 800103c:	f3af 8000 	nop.w

08001040 <Vector7C.4533>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8001040:	2300      	movs	r3, #0
 8001042:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001046:	6819      	ldr	r1, [r3, #0]
 8001048:	2258      	movs	r2, #88	; 0x58
 800104a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800104e:	0c09      	lsrs	r1, r1, #16
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	f001 010e 	and.w	r1, r1, #14
 8001056:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001058:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800105a:	d009      	beq.n	8001070 <Vector7C.4533+0x30>
 800105c:	f640 0200 	movw	r2, #2048	; 0x800
 8001060:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001064:	6a14      	ldr	r4, [r2, #32]
 8001066:	0408      	lsls	r0, r1, #16
 8001068:	6058      	str	r0, [r3, #4]
 800106a:	b10c      	cbz	r4, 8001070 <Vector7C.4533+0x30>
 800106c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800106e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8001074:	f7ff bf1c 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8001078:	f3af 8000 	nop.w
 800107c:	f3af 8000 	nop.w

08001080 <Vector78.4535>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8001080:	2300      	movs	r3, #0
 8001082:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	2244      	movs	r2, #68	; 0x44
 800108a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800108e:	0b09      	lsrs	r1, r1, #12
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	f001 010e 	and.w	r1, r1, #14
 8001096:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001098:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 800109a:	d009      	beq.n	80010b0 <Vector78.4535+0x30>
 800109c:	f640 0200 	movw	r2, #2048	; 0x800
 80010a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80010a4:	6994      	ldr	r4, [r2, #24]
 80010a6:	0308      	lsls	r0, r1, #12
 80010a8:	6058      	str	r0, [r3, #4]
 80010aa:	b10c      	cbz	r4, 80010b0 <Vector78.4535+0x30>
 80010ac:	69d0      	ldr	r0, [r2, #28]
 80010ae:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80010b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80010b4:	f7ff befc 	b.w	8000eb0 <_port_irq_epilogue.4543>
 80010b8:	f3af 8000 	nop.w
 80010bc:	f3af 8000 	nop.w

080010c0 <Vector74.4537>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80010c0:	2300      	movs	r3, #0
 80010c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	2230      	movs	r2, #48	; 0x30
 80010ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010ce:	0a09      	lsrs	r1, r1, #8
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	f001 010e 	and.w	r1, r1, #14
 80010d6:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80010d8:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 80010da:	d009      	beq.n	80010f0 <Vector74.4537+0x30>
 80010dc:	f640 0200 	movw	r2, #2048	; 0x800
 80010e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80010e4:	6914      	ldr	r4, [r2, #16]
 80010e6:	0208      	lsls	r0, r1, #8
 80010e8:	6058      	str	r0, [r3, #4]
 80010ea:	b10c      	cbz	r4, 80010f0 <Vector74.4537+0x30>
 80010ec:	6950      	ldr	r0, [r2, #20]
 80010ee:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 80010f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 80010f4:	f7ff bedc 	b.w	8000eb0 <_port_irq_epilogue.4543>
 80010f8:	f3af 8000 	nop.w
 80010fc:	f3af 8000 	nop.w

08001100 <Vector70.4539>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8001100:	2300      	movs	r3, #0
 8001102:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	221c      	movs	r2, #28
 800110a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800110e:	0909      	lsrs	r1, r1, #4
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f001 010e 	and.w	r1, r1, #14
 8001116:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001118:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800111a:	d009      	beq.n	8001130 <Vector70.4539+0x30>
 800111c:	f640 0200 	movw	r2, #2048	; 0x800
 8001120:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001124:	6894      	ldr	r4, [r2, #8]
 8001126:	0108      	lsls	r0, r1, #4
 8001128:	6058      	str	r0, [r3, #4]
 800112a:	b10c      	cbz	r4, 8001130 <Vector70.4539+0x30>
 800112c:	68d0      	ldr	r0, [r2, #12]
 800112e:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 8001130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8001134:	f7ff bebc 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8001138:	f3af 8000 	nop.w
 800113c:	f3af 8000 	nop.w

08001140 <Vector6C.4541>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001140:	2300      	movs	r3, #0
 8001142:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001146:	2208      	movs	r2, #8
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	f001 010e 	and.w	r1, r1, #14
 8001154:	4211      	tst	r1, r2
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001156:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8001158:	d008      	beq.n	800116c <Vector6C.4541+0x2c>
 800115a:	f640 0200 	movw	r2, #2048	; 0x800
 800115e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001162:	6814      	ldr	r4, [r2, #0]
 8001164:	6059      	str	r1, [r3, #4]
 8001166:	b10c      	cbz	r4, 800116c <Vector6C.4541+0x2c>
 8001168:	6850      	ldr	r0, [r2, #4]
 800116a:	47a0      	blx	r4

  OSAL_IRQ_EPILOGUE();
}
 800116c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8001170:	f7ff be9e 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8001174:	f3af 8000 	nop.w
 8001178:	f3af 8000 	nop.w
 800117c:	f3af 8000 	nop.w

08001180 <SVC_Handler.4552>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001180:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8001184:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001186:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800118a:	2300      	movs	r3, #0
 800118c:	f383 8811 	msr	BASEPRI, r3
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	f3af 8000 	nop.w
 800119c:	f3af 8000 	nop.w

080011a0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 80011a0:	b430      	push	{r4, r5}
 80011a2:	2320      	movs	r3, #32
 80011a4:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80011a8:	f640 1390 	movw	r3, #2448	; 0x990
 80011ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011b0:	681d      	ldr	r5, [r3, #0]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80011b2:	1e4c      	subs	r4, r1, #1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80011b4:	442a      	add	r2, r5
 80011b6:	4422      	add	r2, r4
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80011b8:	4249      	negs	r1, r1
 80011ba:	4404      	add	r4, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80011bc:	ea02 0001 	and.w	r0, r2, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80011c0:	4021      	ands	r1, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80011c2:	685a      	ldr	r2, [r3, #4]
  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
 80011c4:	4401      	add	r1, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80011c6:	4291      	cmp	r1, r2
 80011c8:	d807      	bhi.n	80011da <chCoreAllocAlignedWithOffset+0x3a>
 80011ca:	428d      	cmp	r5, r1
 80011cc:	d805      	bhi.n	80011da <chCoreAllocAlignedWithOffset+0x3a>
    return NULL;
  }

  ch_memcore.nextmem = next;
 80011ce:	6019      	str	r1, [r3, #0]
 80011d0:	2300      	movs	r3, #0
 80011d2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80011d6:	bc30      	pop	{r4, r5}
 80011d8:	4770      	bx	lr
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
 80011da:	2000      	movs	r0, #0
 80011dc:	2300      	movs	r3, #0
 80011de:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
 80011e2:	bc30      	pop	{r4, r5}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	f3af 8000 	nop.w
 80011ec:	f3af 8000 	nop.w

080011f0 <chSchReadyI.4571>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80011f0:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 80011f2:	f640 0344 	movw	r3, #2116	; 0x844
 80011f6:	6881      	ldr	r1, [r0, #8]
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80011f8:	b410      	push	{r4}
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.queue;
 80011fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80011fe:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001200:	f880 2020 	strb.w	r2, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8001204:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	428a      	cmp	r2, r1
 800120a:	d2fb      	bcs.n	8001204 <chSchReadyI.4571+0x14>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800120c:	685a      	ldr	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800120e:	4620      	mov	r0, r4
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001210:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8001212:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8001214:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8001216:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <VectorBC.4485>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8001220:	b538      	push	{r3, r4, r5, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001222:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001226:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800122a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800122c:	2108      	movs	r1, #8
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint32_t regSR2 = dp->SR2;
 800122e:	69a2      	ldr	r2, [r4, #24]
  uint32_t event = dp->SR1;
 8001230:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8001232:	f2c0 0103 	movt	r1, #3
 8001236:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800123a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800123e:	428a      	cmp	r2, r1
 8001240:	d054      	beq.n	80012ec <VectorBC.4485+0xcc>
 8001242:	d822      	bhi.n	800128a <VectorBC.4485+0x6a>
 8001244:	2101      	movs	r1, #1
 8001246:	f2c0 0103 	movt	r1, #3
 800124a:	428a      	cmp	r2, r1
 800124c:	d042      	beq.n	80012d4 <VectorBC.4485+0xb4>
 800124e:	2102      	movs	r1, #2
 8001250:	f2c0 0103 	movt	r1, #3
 8001254:	428a      	cmp	r2, r1
 8001256:	d110      	bne.n	800127a <VectorBC.4485+0x5a>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001258:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800125c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8001260:	685b      	ldr	r3, [r3, #4]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8001262:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800126c:	6862      	ldr	r2, [r4, #4]
 800126e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001272:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d957      	bls.n	800132a <VectorBC.4485+0x10a>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800127a:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800127e:	bf18      	it	ne
 8001280:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8001282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8001286:	f7ff be13 	b.w	8000eb0 <_port_irq_epilogue.4543>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800128a:	2182      	movs	r1, #130	; 0x82
 800128c:	f2c0 0107 	movt	r1, #7
 8001290:	428a      	cmp	r2, r1
 8001292:	d014      	beq.n	80012be <VectorBC.4485+0x9e>
 8001294:	2184      	movs	r1, #132	; 0x84
 8001296:	f2c0 0107 	movt	r1, #7
 800129a:	428a      	cmp	r2, r1
 800129c:	d1ed      	bne.n	800127a <VectorBC.4485+0x5a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a0:	6852      	ldr	r2, [r2, #4]
 80012a2:	6852      	ldr	r2, [r2, #4]
 80012a4:	b33a      	cbz	r2, 80012f6 <VectorBC.4485+0xd6>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80012a6:	8c19      	ldrh	r1, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80012a8:	6822      	ldr	r2, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80012aa:	f041 0101 	orr.w	r1, r1, #1
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80012ae:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80012b2:	8419      	strh	r1, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80012b4:	6022      	str	r2, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 80012b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80012ba:	f7ff bdf9 	b.w	8000eb0 <_port_irq_epilogue.4543>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80012be:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80012c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 80012c6:	685b      	ldr	r3, [r3, #4]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80012c8:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f042 0201 	orr.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e7d2      	b.n	800127a <VectorBC.4485+0x5a>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 80012d4:	8c1b      	ldrh	r3, [r3, #32]
 80012d6:	0a1a      	lsrs	r2, r3, #8
 80012d8:	d00b      	beq.n	80012f2 <VectorBC.4485+0xd2>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80012e2:	f002 0206 	and.w	r2, r2, #6
 80012e6:	431a      	orrs	r2, r3
 80012e8:	6122      	str	r2, [r4, #16]
 80012ea:	e7c6      	b.n	800127a <VectorBC.4485+0x5a>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80012ec:	8c1b      	ldrh	r3, [r3, #32]
 80012ee:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80012f2:	6123      	str	r3, [r4, #16]
 80012f4:	e7c1      	b.n	800127a <VectorBC.4485+0x5a>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80012f6:	6861      	ldr	r1, [r4, #4]
 80012f8:	2220      	movs	r2, #32
 80012fa:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80012fe:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8001300:	6821      	ldr	r1, [r4, #0]
 8001302:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8001306:	6021      	str	r1, [r4, #0]
 8001308:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800130c:	69d8      	ldr	r0, [r3, #28]
 800130e:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001312:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001316:	b120      	cbz	r0, 8001322 <VectorBC.4485+0x102>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001318:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 800131a:	6242      	str	r2, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 800131c:	61da      	str	r2, [r3, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800131e:	f7ff ff67 	bl	80011f0 <chSchReadyI.4571>
 8001322:	2300      	movs	r3, #0
 8001324:	f383 8811 	msr	BASEPRI, r3
 8001328:	e7a7      	b.n	800127a <VectorBC.4485+0x5a>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	e7a2      	b.n	800127a <VectorBC.4485+0x5a>
 8001334:	f3af 8000 	nop.w
 8001338:	f3af 8000 	nop.w
 800133c:	f3af 8000 	nop.w

08001340 <VectorC0.4262>:
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8001342:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8001346:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800134a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800134c:	6b1c      	ldr	r4, [r3, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 800134e:	6945      	ldr	r5, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001350:	6861      	ldr	r1, [r4, #4]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8001352:	b2aa      	uxth	r2, r5

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8001354:	f402 465f 	and.w	r6, r2, #57088	; 0xdf00
 8001358:	43f6      	mvns	r6, r6
 800135a:	6146      	str	r6, [r0, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800135c:	680f      	ldr	r7, [r1, #0]
 800135e:	260e      	movs	r6, #14
 8001360:	f027 070f 	bic.w	r7, r7, #15
 8001364:	600f      	str	r7, [r1, #0]
 8001366:	f894 c010 	ldrb.w	ip, [r4, #16]
  dmaStreamDisable(i2cp->dmarx);
 800136a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800136c:	fa06 fc0c 	lsl.w	ip, r6, ip
 8001370:	6827      	ldr	r7, [r4, #0]
  dmaStreamDisable(i2cp->dmarx);
 8001372:	684c      	ldr	r4, [r1, #4]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8001374:	f8c7 c004 	str.w	ip, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8001378:	f8d4 c000 	ldr.w	ip, [r4]
 800137c:	680f      	ldr	r7, [r1, #0]
 800137e:	f02c 0c0f 	bic.w	ip, ip, #15
 8001382:	f8c4 c000 	str.w	ip, [r4]
 8001386:	7c0c      	ldrb	r4, [r1, #16]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001388:	f402 7180 	and.w	r1, r2, #256	; 0x100
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 800138c:	40a6      	lsls	r6, r4

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800138e:	b289      	uxth	r1, r1
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8001390:	607e      	str	r6, [r7, #4]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8001392:	b101      	cbz	r1, 8001396 <VectorC0.4262+0x56>
    i2cp->errors |= I2C_BUS_ERROR;
 8001394:	2101      	movs	r1, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8001396:	0596      	lsls	r6, r2, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8001398:	6099      	str	r1, [r3, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800139a:	bf44      	itt	mi
 800139c:	f041 0102 	orrmi.w	r1, r1, #2
 80013a0:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80013a2:	0554      	lsls	r4, r2, #21
 80013a4:	d50b      	bpl.n	80013be <VectorC0.4262+0x7e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80013a6:	6846      	ldr	r6, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
    i2cp->errors |= I2C_ACK_FAILURE;
 80013a8:	f041 0404 	orr.w	r4, r1, #4

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80013ac:	f426 7100 	bic.w	r1, r6, #512	; 0x200
 80013b0:	6041      	str	r1, [r0, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80013b2:	6806      	ldr	r6, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80013b4:	4621      	mov	r1, r4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80013b6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
 80013ba:	6006      	str	r6, [r0, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80013bc:	609c      	str	r4, [r3, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80013be:	0517      	lsls	r7, r2, #20
    i2cp->errors |= I2C_OVERRUN;
 80013c0:	bf44      	itt	mi
 80013c2:	f041 0108 	orrmi.w	r1, r1, #8
 80013c6:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80013c8:	0456      	lsls	r6, r2, #17
    i2cp->errors |= I2C_TIMEOUT;
 80013ca:	bf44      	itt	mi
 80013cc:	f041 0120 	orrmi.w	r1, r1, #32
 80013d0:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80013d2:	04d4      	lsls	r4, r2, #19
    i2cp->errors |= I2C_PEC_ERROR;
 80013d4:	bf44      	itt	mi
 80013d6:	f041 0110 	orrmi.w	r1, r1, #16
 80013da:	6099      	strmi	r1, [r3, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80013dc:	0428      	lsls	r0, r5, #16
    i2cp->errors |= I2C_SMB_ALERT;
 80013de:	bf44      	itt	mi
 80013e0:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
 80013e4:	6099      	strmi	r1, [r3, #8]
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80013e6:	d404      	bmi.n	80013f2 <VectorC0.4262+0xb2>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80013e8:	b919      	cbnz	r1, 80013f2 <VectorC0.4262+0xb2>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 80013ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 80013ee:	f7ff bd5f 	b.w	8000eb0 <_port_irq_epilogue.4543>
 80013f2:	2220      	movs	r2, #32
 80013f4:	f382 8811 	msr	BASEPRI, r2
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 80013f8:	69d8      	ldr	r0, [r3, #28]
 80013fa:	f640 13b8 	movw	r3, #2488	; 0x9b8
 80013fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001402:	b130      	cbz	r0, 8001412 <VectorC0.4262+0xd2>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
 8001404:	f06f 0201 	mvn.w	r2, #1
 8001408:	6242      	str	r2, [r0, #36]	; 0x24
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800140e:	f7ff feef 	bl	80011f0 <chSchReadyI.4571>
 8001412:	2300      	movs	r3, #0
 8001414:	f383 8811 	msr	BASEPRI, r3
}
 8001418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 800141c:	f7ff bd48 	b.w	8000eb0 <_port_irq_epilogue.4543>

08001420 <i2c_lld_serve_rx_end_irq.8328>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001422:	070f      	lsls	r7, r1, #28
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001424:	6b43      	ldr	r3, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8001426:	d426      	bmi.n	8001476 <i2c_lld_serve_rx_end_irq.8328+0x56>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8001428:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800142a:	260e      	movs	r6, #14
 800142c:	6851      	ldr	r1, [r2, #4]
 800142e:	6815      	ldr	r5, [r2, #0]
 8001430:	680f      	ldr	r7, [r1, #0]
 8001432:	2420      	movs	r4, #32
 8001434:	f027 070f 	bic.w	r7, r7, #15
 8001438:	600f      	str	r7, [r1, #0]
 800143a:	7c12      	ldrb	r2, [r2, #16]
 800143c:	fa06 f202 	lsl.w	r2, r6, r2
 8001440:	606a      	str	r2, [r5, #4]

  dp->CR2 &= ~I2C_CR2_LAST;
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001448:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001450:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f384 8811 	msr	BASEPRI, r4
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800145e:	69c3      	ldr	r3, [r0, #28]
 8001460:	b12b      	cbz	r3, 800146e <i2c_lld_serve_rx_end_irq.8328+0x4e>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8001462:	2200      	movs	r2, #0
 8001464:	61c2      	str	r2, [r0, #28]
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001466:	4618      	mov	r0, r3
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800146a:	f7ff fec1 	bl	80011f0 <chSchReadyI.4571>
 800146e:	2300      	movs	r3, #0
 8001470:	f383 8811 	msr	BASEPRI, r3
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001476:	b672      	cpsid	i
 8001478:	f640 0344 	movw	r3, #2116	; 0x844
 800147c:	f642 22d0 	movw	r2, #10960	; 0x2ad0
 8001480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001484:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
 800148a:	e7fe      	b.n	800148a <i2c_lld_serve_rx_end_irq.8328+0x6a>
 800148c:	f3af 8000 	nop.w

08001490 <chEvtBroadcastFlagsI.4560>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8001492:	6804      	ldr	r4, [r0, #0]
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001494:	4607      	mov	r7, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001496:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001498:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800149a:	d020      	beq.n	80014de <chEvtBroadcastFlagsI.4560+0x4e>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800149c:	2600      	movs	r6, #0
 800149e:	e002      	b.n	80014a6 <chEvtBroadcastFlagsI.4560+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80014a0:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014a2:	42a7      	cmp	r7, r4
 80014a4:	d01b      	beq.n	80014de <chEvtBroadcastFlagsI.4560+0x4e>
  /*lint -restore*/
    elp->flags |= flags;
 80014a6:	68e3      	ldr	r3, [r4, #12]
 80014a8:	432b      	orrs	r3, r5
 80014aa:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80014ac:	b115      	cbz	r5, 80014b4 <chEvtBroadcastFlagsI.4560+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80014ae:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80014b0:	4213      	tst	r3, r2
 80014b2:	d0f5      	beq.n	80014a0 <chEvtBroadcastFlagsI.4560+0x10>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 80014b4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80014b6:	68a2      	ldr	r2, [r4, #8]
 80014b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80014ba:	f890 3020 	ldrb.w	r3, [r0, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80014be:	430a      	orrs	r2, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80014c0:	2b0a      	cmp	r3, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80014c2:	6342      	str	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80014c4:	d00c      	beq.n	80014e0 <chEvtBroadcastFlagsI.4560+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80014c6:	2b0b      	cmp	r3, #11
 80014c8:	d1ea      	bne.n	80014a0 <chEvtBroadcastFlagsI.4560+0x10>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80014ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014cc:	401a      	ands	r2, r3

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d1e6      	bne.n	80014a0 <chEvtBroadcastFlagsI.4560+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80014d2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80014d4:	f7ff fe8c 	bl	80011f0 <chSchReadyI.4571>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80014d8:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80014da:	42a7      	cmp	r7, r4
 80014dc:	d1e3      	bne.n	80014a6 <chEvtBroadcastFlagsI.4560+0x16>
 80014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80014e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80014e2:	421a      	tst	r2, r3
 80014e4:	d0dc      	beq.n	80014a0 <chEvtBroadcastFlagsI.4560+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80014e6:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80014e8:	f7ff fe82 	bl	80011f0 <chSchReadyI.4571>
 80014ec:	e7f4      	b.n	80014d8 <chEvtBroadcastFlagsI.4560+0x48>
 80014ee:	bf00      	nop

080014f0 <VectorDC.4274>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 80014f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 80014f4:	f640 15f0 	movw	r5, #2544	; 0x9f0
 80014f8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80014fc:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80014fe:	f8d6 900c 	ldr.w	r9, [r6, #12]
  uint16_t sr = u->SR;
 8001502:	6833      	ldr	r3, [r6, #0]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001504:	05d9      	lsls	r1, r3, #23
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
  uint16_t cr1 = u->CR1;
  uint16_t sr = u->SR;
 8001506:	b29c      	uxth	r4, r3

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8001508:	f100 8094 	bmi.w	8001634 <VectorDC.4274+0x144>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800150c:	2320      	movs	r3, #32
 800150e:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001512:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001516:	d057      	beq.n	80015c8 <VectorDC.4274+0xd8>
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8001518:	f640 1bf0 	movw	fp, #2544	; 0x9f0
 800151c:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001520:	f10b 0c0c 	add.w	ip, fp, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001524:	f04f 0800 	mov.w	r8, #0
 8001528:	e009      	b.n	800153e <VectorDC.4274+0x4e>
    if (sr & USART_SR_RXNE)
 800152a:	06a1      	lsls	r1, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 800152c:	6877      	ldr	r7, [r6, #4]
 800152e:	f895 a078 	ldrb.w	sl, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 8001532:	d41f      	bmi.n	8001574 <VectorDC.4274+0x84>
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 8001534:	6834      	ldr	r4, [r6, #0]
 8001536:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001538:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800153c:	d044      	beq.n	80015c8 <VectorDC.4274+0xd8>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800153e:	0722      	lsls	r2, r4, #28
 8001540:	d0f3      	beq.n	800152a <VectorDC.4274+0x3a>
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
  eventflags_t sts = 0;
 8001542:	f014 0f08 	tst.w	r4, #8
 8001546:	bf14      	ite	ne
 8001548:	2180      	movne	r1, #128	; 0x80
 800154a:	2100      	moveq	r1, #0

  if (sr & USART_SR_ORE)
    sts |= SD_OVERRUN_ERROR;
  if (sr & USART_SR_PE)
 800154c:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 800154e:	bf48      	it	mi
 8001550:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8001554:	07a7      	lsls	r7, r4, #30
    sts |= SD_FRAMING_ERROR;
 8001556:	bf48      	it	mi
 8001558:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800155c:	0760      	lsls	r0, r4, #29
    sts |= SD_NOISE_ERROR;
 800155e:	bf48      	it	mi
 8001560:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8001564:	4860      	ldr	r0, [pc, #384]	; (80016e8 <VectorDC.4274+0x1f8>)
 8001566:	f7ff ff93 	bl	8001490 <chEvtBroadcastFlagsI.4560>

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
    if (sr & USART_SR_RXNE)
 800156a:	06a1      	lsls	r1, r4, #26
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 800156c:	6877      	ldr	r7, [r6, #4]
 800156e:	f895 a078 	ldrb.w	sl, [r5, #120]	; 0x78
    if (sr & USART_SR_RXNE)
 8001572:	d5df      	bpl.n	8001534 <VectorDC.4274+0x44>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001574:	f8db 3014 	ldr.w	r3, [fp, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d049      	beq.n	8001610 <VectorDC.4274+0x120>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 800157c:	6a2b      	ldr	r3, [r5, #32]
 800157e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001580:	4293      	cmp	r3, r2
 8001582:	d04d      	beq.n	8001620 <VectorDC.4274+0x130>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8001584:	6969      	ldr	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001586:	1c5a      	adds	r2, r3, #1
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
      set_error(sdp, sr);
    b = (uint8_t)u->DR & sdp->rxmask;
 8001588:	ea0a 0707 	and.w	r7, sl, r7

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 800158c:	3101      	adds	r1, #1
  *iqp->q_wrptr++ = b;
 800158e:	622a      	str	r2, [r5, #32]

  if (iqIsFullI(iqp)) {
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8001590:	6169      	str	r1, [r5, #20]
  *iqp->q_wrptr++ = b;
 8001592:	701f      	strb	r7, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8001594:	6a2a      	ldr	r2, [r5, #32]
 8001596:	69eb      	ldr	r3, [r5, #28]
 8001598:	429a      	cmp	r2, r3
 800159a:	d303      	bcc.n	80015a4 <VectorDC.4274+0xb4>
    iqp->q_wrptr = iqp->q_buffer;
 800159c:	f8db 3018 	ldr.w	r3, [fp, #24]
 80015a0:	f8cb 3020 	str.w	r3, [fp, #32]
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80015a4:	68eb      	ldr	r3, [r5, #12]
 80015a6:	4563      	cmp	r3, ip
 80015a8:	d0c4      	beq.n	8001534 <VectorDC.4274+0x44>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80015aa:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
 80015ac:	4618      	mov	r0, r3
 80015ae:	f8cb 200c 	str.w	r2, [fp, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 80015b2:	f8c2 c004 	str.w	ip, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80015b6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80015ba:	f7ff fe19 	bl	80011f0 <chSchReadyI.4571>
    if (sr & USART_SR_RXNE)
      sdIncomingDataI(sdp, b);
    sr = u->SR;
 80015be:	6834      	ldr	r4, [r6, #0]
 80015c0:	b2a4      	uxth	r4, r4
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  osalSysLockFromISR();
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80015c2:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 80015c6:	d1ba      	bne.n	800153e <VectorDC.4274+0x4e>
 80015c8:	2300      	movs	r3, #0
 80015ca:	f383 8811 	msr	BASEPRI, r3
    sr = u->SR;
  }
  osalSysUnlockFromISR();

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80015ce:	f019 0f80 	tst.w	r9, #128	; 0x80
 80015d2:	d001      	beq.n	80015d8 <VectorDC.4274+0xe8>
 80015d4:	0622      	lsls	r2, r4, #24
 80015d6:	d43c      	bmi.n	8001652 <VectorDC.4274+0x162>
      u->DR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
 80015d8:	0663      	lsls	r3, r4, #25
 80015da:	d515      	bpl.n	8001608 <VectorDC.4274+0x118>
 80015dc:	2320      	movs	r3, #32
 80015de:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80015e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80015e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80015e6:	f640 10f0 	movw	r0, #2544	; 0x9f0
 80015ea:	429a      	cmp	r2, r3
 80015ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015f0:	d063      	beq.n	80016ba <VectorDC.4274+0x1ca>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80015f2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80015f6:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 80015fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80015fe:	60f3      	str	r3, [r6, #12]
 8001600:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 8001602:	6032      	str	r2, [r6, #0]
 8001604:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
}
 8001608:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 800160c:	f7ff bc50 	b.w	8000eb0 <_port_irq_epilogue.4543>
 8001610:	4835      	ldr	r0, [pc, #212]	; (80016e8 <VectorDC.4274+0x1f8>)
 8001612:	2104      	movs	r1, #4
 8001614:	f7ff ff3c 	bl	8001490 <chEvtBroadcastFlagsI.4560>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8001618:	6a2b      	ldr	r3, [r5, #32]
 800161a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800161c:	4293      	cmp	r3, r2
 800161e:	d1b1      	bne.n	8001584 <VectorDC.4274+0x94>
 8001620:	f8db 2014 	ldr.w	r2, [fp, #20]
 8001624:	2a00      	cmp	r2, #0
 8001626:	d0ad      	beq.n	8001584 <VectorDC.4274+0x94>
 8001628:	482f      	ldr	r0, [pc, #188]	; (80016e8 <VectorDC.4274+0x1f8>)
 800162a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162e:	f7ff ff2f 	bl	8001490 <chEvtBroadcastFlagsI.4560>
 8001632:	e77f      	b.n	8001534 <VectorDC.4274+0x44>
 8001634:	2320      	movs	r3, #32
 8001636:	f383 8811 	msr	BASEPRI, r3
 800163a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163e:	1d28      	adds	r0, r5, #4
 8001640:	f7ff ff26 	bl	8001490 <chEvtBroadcastFlagsI.4560>

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
    osalSysLockFromISR();
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    u->SR = ~USART_SR_LBD;
 8001644:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001648:	6033      	str	r3, [r6, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	f383 8811 	msr	BASEPRI, r3
 8001650:	e75c      	b.n	800150c <VectorDC.4274+0x1c>
 8001652:	2320      	movs	r3, #32
 8001654:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8001658:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800165a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800165c:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8001660:	429a      	cmp	r2, r3
 8001662:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001666:	d030      	beq.n	80016ca <VectorDC.4274+0x1da>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8001668:	6baa      	ldr	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800166a:	6c28      	ldr	r0, [r5, #64]	; 0x40
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800166c:	1c59      	adds	r1, r3, #1

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 800166e:	3201      	adds	r2, #1
 8001670:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8001672:	64a9      	str	r1, [r5, #72]	; 0x48

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8001674:	f640 12f0 	movw	r2, #2544	; 0x9f0
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8001678:	4281      	cmp	r1, r0
  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
 800167a:	f893 c000 	ldrb.w	ip, [r3]

  if (oqIsEmptyI(oqp)) {
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 800167e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 8001682:	d301      	bcc.n	8001688 <VectorDC.4274+0x198>
    oqp->q_rdptr = oqp->q_buffer;
 8001684:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001686:	6493      	str	r3, [r2, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001688:	f640 13f0 	movw	r3, #2544	; 0x9f0
 800168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001690:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001692:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001696:	428a      	cmp	r2, r1
 8001698:	d009      	beq.n	80016ae <VectorDC.4274+0x1be>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800169a:	6817      	ldr	r7, [r2, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800169c:	f04f 0e00 	mov.w	lr, #0
 80016a0:	631f      	str	r7, [r3, #48]	; 0x30
  (void) chSchReadyI(tp);
 80016a2:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
 80016a4:	6079      	str	r1, [r7, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80016a6:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 80016aa:	f7ff fda1 	bl	80011f0 <chSchReadyI.4571>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->DR = b;
 80016ae:	f8c6 c004 	str.w	ip, [r6, #4]
 80016b2:	2300      	movs	r3, #0
 80016b4:	f383 8811 	msr	BASEPRI, r3
 80016b8:	e78e      	b.n	80015d8 <VectorDC.4274+0xe8>
  }

  /* Physical transmission end.*/
  if (sr & USART_SR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80016ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d098      	beq.n	80015f2 <VectorDC.4274+0x102>
 80016c0:	3004      	adds	r0, #4
 80016c2:	2110      	movs	r1, #16
 80016c4:	f7ff fee4 	bl	8001490 <chEvtBroadcastFlagsI.4560>
 80016c8:	e793      	b.n	80015f2 <VectorDC.4274+0x102>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 80016ca:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80016cc:	2a00      	cmp	r2, #0
 80016ce:	d0cb      	beq.n	8001668 <VectorDC.4274+0x178>
 80016d0:	3004      	adds	r0, #4
 80016d2:	2108      	movs	r1, #8
 80016d4:	f7ff fedc 	bl	8001490 <chEvtBroadcastFlagsI.4560>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80016d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80016dc:	ea09 0303 	and.w	r3, r9, r3
 80016e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e4:	60f3      	str	r3, [r6, #12]
 80016e6:	e7e4      	b.n	80016b2 <VectorDC.4274+0x1c2>
 80016e8:	200009f4 	.word	0x200009f4
 80016ec:	f3af 8000 	nop.w

080016f0 <_idle_thread.4305>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80016f0:	e7fe      	b.n	80016f0 <_idle_thread.4305>
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	f3af 8000 	nop.w
 80016fc:	f3af 8000 	nop.w

08001700 <BusFault_Handler.4583>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8001700:	e7fe      	b.n	8001700 <BusFault_Handler.4583>
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	f3af 8000 	nop.w
 800170c:	f3af 8000 	nop.w

08001710 <chSchGoSleepS.4568>:
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 8001710:	f640 0344 	movw	r3, #2116	; 0x844
 8001714:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001718:	b430      	push	{r4, r5}
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800171a:	681a      	ldr	r2, [r3, #0]
  thread_t *otp = currp;
 800171c:	6999      	ldr	r1, [r3, #24]

  tqp->next             = tp->queue.next;
 800171e:	6814      	ldr	r4, [r2, #0]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001720:	2501      	movs	r5, #1
  thread_t *otp = currp;

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8001722:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001726:	6063      	str	r3, [r4, #4]
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001728:	f882 5020 	strb.w	r5, [r2, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800172c:	601c      	str	r4, [r3, #0]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800172e:	4610      	mov	r0, r2
}
 8001730:	bc30      	pop	{r4, r5}
     time quantum when it will wakeup.*/
  otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001732:	619a      	str	r2, [r3, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001734:	f7fe bd8e 	b.w	8000254 <_port_switch>
 8001738:	f3af 8000 	nop.w
 800173c:	f3af 8000 	nop.w

08001740 <chSchGoSleepTimeoutS.4340>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001740:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001746:	4299      	cmp	r1, r3
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001748:	b087      	sub	sp, #28
 800174a:	4605      	mov	r5, r0

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800174c:	d013      	beq.n	8001776 <chSchGoSleepTimeoutS.4340+0x36>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800174e:	f640 0444 	movw	r4, #2116	; 0x844
 8001752:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001756:	69a2      	ldr	r2, [r4, #24]
 8001758:	a801      	add	r0, sp, #4
 800175a:	f7ff fb19 	bl	8000d90 <chVTDoSetI.constprop.21.4455>
    chSchGoSleepS(newstate);
 800175e:	4628      	mov	r0, r5
 8001760:	f7ff ffd6 	bl	8001710 <chSchGoSleepS.4568>
    if (chVTIsArmedI(&vt)) {
 8001764:	9b04      	ldr	r3, [sp, #16]
 8001766:	b113      	cbz	r3, 800176e <chSchGoSleepTimeoutS.4340+0x2e>
      chVTDoResetI(&vt);
 8001768:	a801      	add	r0, sp, #4
 800176a:	f7ff fad1 	bl	8000d10 <chVTDoResetI.4421>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 800176e:	69a3      	ldr	r3, [r4, #24]
}
 8001770:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001772:	b007      	add	sp, #28
 8001774:	bd30      	pop	{r4, r5, pc}
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001776:	f7ff ffcb 	bl	8001710 <chSchGoSleepS.4568>
 800177a:	f640 0444 	movw	r4, #2116	; 0x844
 800177e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  }

  return currp->u.rdymsg;
 8001782:	69a3      	ldr	r3, [r4, #24]
}
 8001784:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001786:	b007      	add	sp, #28
 8001788:	bd30      	pop	{r4, r5, pc}
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w

08001790 <chThdEnqueueTimeoutS.4417>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001790:	b410      	push	{r4}
 8001792:	4602      	mov	r2, r0

  if (TIME_IMMEDIATE == timeout) {
 8001794:	b171      	cbz	r1, 80017b4 <chThdEnqueueTimeoutS.4417+0x24>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001796:	f640 0344 	movw	r3, #2116	; 0x844
 800179a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 800179e:	6844      	ldr	r4, [r0, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80017a2:	2004      	movs	r0, #4
 80017a4:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 80017a8:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 80017aa:	6053      	str	r3, [r2, #4]
}
 80017ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80017b0:	f7ff bfc6 	b.w	8001740 <chSchGoSleepTimeoutS.4340>
}
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <iqGetTimeout.4358>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	2320      	movs	r3, #32
 80017c4:	4604      	mov	r4, r0
 80017c6:	460e      	mov	r6, r1
 80017c8:	f383 8811 	msr	BASEPRI, r3
 80017cc:	e003      	b.n	80017d6 <iqGetTimeout.4358+0x16>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 80017ce:	f7ff ffdf 	bl	8001790 <chThdEnqueueTimeoutS.4417>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80017d2:	2800      	cmp	r0, #0
 80017d4:	db1b      	blt.n	800180e <iqGetTimeout.4358+0x4e>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 80017d6:	68a5      	ldr	r5, [r4, #8]
 80017d8:	4620      	mov	r0, r4
 80017da:	4631      	mov	r1, r6
 80017dc:	2d00      	cmp	r5, #0
 80017de:	d0f6      	beq.n	80017ce <iqGetTimeout.4358+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80017e0:	69a2      	ldr	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
 80017e2:	6921      	ldr	r1, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80017e4:	1c53      	adds	r3, r2, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80017e6:	68a0      	ldr	r0, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80017e8:	428b      	cmp	r3, r1
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80017ea:	61a3      	str	r3, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80017ec:	f100 30ff 	add.w	r0, r0, #4294967295
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80017f0:	bf28      	it	cs
 80017f2:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 80017f4:	60a0      	str	r0, [r4, #8]
  b = *iqp->q_rdptr++;
 80017f6:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 80017f8:	bf28      	it	cs
 80017fa:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80017fc:	69e3      	ldr	r3, [r4, #28]
 80017fe:	b10b      	cbz	r3, 8001804 <iqGetTimeout.4358+0x44>
    iqp->q_notify(iqp);
 8001800:	4620      	mov	r0, r4
 8001802:	4798      	blx	r3
 8001804:	2300      	movs	r3, #0
 8001806:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 800180a:	4628      	mov	r0, r5
}
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	f385 8811 	msr	BASEPRI, r5
 8001812:	bd70      	pop	{r4, r5, r6, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	f3af 8000 	nop.w
 800181c:	f3af 8000 	nop.w

08001820 <_gett.7843>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001820:	300c      	adds	r0, #12
 8001822:	f7ff bfcd 	b.w	80017c0 <iqGetTimeout.4358>
 8001826:	bf00      	nop
 8001828:	f3af 8000 	nop.w
 800182c:	f3af 8000 	nop.w

08001830 <_get.7847>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001830:	300c      	adds	r0, #12
 8001832:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001836:	f7ff bfc3 	b.w	80017c0 <iqGetTimeout.4358>
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w

08001840 <iqReadTimeout.4376>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 8001840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001844:	4698      	mov	r8, r3
 8001846:	b083      	sub	sp, #12
 8001848:	4604      	mov	r4, r0
 800184a:	4689      	mov	r9, r1
 800184c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
 800184e:	69c7      	ldr	r7, [r0, #28]
 8001850:	2320      	movs	r3, #32
 8001852:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800185c:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001860:	4442      	add	r2, r8
 8001862:	b292      	uxth	r2, r2
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;
 8001864:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001866:	9201      	str	r2, [sp, #4]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001868:	fa1f fb8b 	uxth.w	fp, fp
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 800186c:	68a3      	ldr	r3, [r4, #8]
 800186e:	b30b      	cbz	r3, 80018b4 <iqReadTimeout.4376+0x74>
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 8001870:	69a3      	ldr	r3, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8001872:	68a1      	ldr	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001874:	1c5a      	adds	r2, r3, #1
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8001876:	3901      	subs	r1, #1
    *bp++ = *iqp->q_rdptr++;
 8001878:	61a2      	str	r2, [r4, #24]
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 800187a:	60a1      	str	r1, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f109 0a01 	add.w	sl, r9, #1
 8001882:	f889 3000 	strb.w	r3, [r9]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	69a2      	ldr	r2, [r4, #24]
 800188a:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800188c:	bf24      	itt	cs
 800188e:	68e3      	ldrcs	r3, [r4, #12]
 8001890:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 8001892:	b10f      	cbz	r7, 8001898 <iqReadTimeout.4376+0x58>
      nfy(iqp);
 8001894:	4620      	mov	r0, r4
 8001896:	47b8      	blx	r7
 8001898:	2300      	movs	r3, #0
 800189a:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
    if (--n == 0U) {
 800189e:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    r++;
 80018a0:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 80018a4:	d01a      	beq.n	80018dc <iqReadTimeout.4376+0x9c>
 80018a6:	2220      	movs	r2, #32
 80018a8:	f382 8811 	msr	BASEPRI, r2
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80018ac:	68a3      	ldr	r3, [r4, #8]
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 80018ae:	46d1      	mov	r9, sl
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    /* Waiting until there is a character available or a timeout occurs.*/
    while (iqIsEmptyI(iqp)) {
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1dd      	bne.n	8001870 <iqReadTimeout.4376+0x30>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80018b4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80018b8:	4593      	cmp	fp, r2
 80018ba:	d813      	bhi.n	80018e4 <iqReadTimeout.4376+0xa4>
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c0:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 80018c2:	9a01      	ldr	r2, [sp, #4]
 80018c4:	1a51      	subs	r1, r2, r1
 80018c6:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 80018c8:	4588      	cmp	r8, r1
 80018ca:	d305      	bcc.n	80018d8 <iqReadTimeout.4376+0x98>
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ff5f 	bl	8001790 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d0ca      	beq.n	800186c <iqReadTimeout.4376+0x2c>
 80018d6:	2300      	movs	r3, #0
 80018d8:	f383 8811 	msr	BASEPRI, r3
      return r;
    }

    osalSysLock();
  }
}
 80018dc:	4630      	mov	r0, r6
 80018de:	b003      	add	sp, #12
 80018e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e4:	4620      	mov	r0, r4
 80018e6:	4641      	mov	r1, r8
 80018e8:	f7ff ff52 	bl	8001790 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d0bd      	beq.n	800186c <iqReadTimeout.4376+0x2c>
 80018f0:	e7f1      	b.n	80018d6 <iqReadTimeout.4376+0x96>
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	f3af 8000 	nop.w
 80018fc:	f3af 8000 	nop.w

08001900 <_readt.7819>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001900:	300c      	adds	r0, #12
 8001902:	f7ff bf9d 	b.w	8001840 <iqReadTimeout.4376>
 8001906:	bf00      	nop
 8001908:	f3af 8000 	nop.w
 800190c:	f3af 8000 	nop.w

08001910 <_read.7827>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001910:	300c      	adds	r0, #12
 8001912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001916:	f7ff bf93 	b.w	8001840 <iqReadTimeout.4376>
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w

08001920 <oqPutTimeout.4391>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	4604      	mov	r4, r0
 8001924:	460f      	mov	r7, r1
 8001926:	4616      	mov	r6, r2
 8001928:	2320      	movs	r3, #32
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	e003      	b.n	8001938 <oqPutTimeout.4391+0x18>
 8001930:	f7ff ff2e 	bl	8001790 <chThdEnqueueTimeoutS.4417>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8001934:	2800      	cmp	r0, #0
 8001936:	db1a      	blt.n	800196e <oqPutTimeout.4391+0x4e>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001938:	68a5      	ldr	r5, [r4, #8]
 800193a:	4620      	mov	r0, r4
 800193c:	4631      	mov	r1, r6
 800193e:	2d00      	cmp	r5, #0
 8001940:	d0f6      	beq.n	8001930 <oqPutTimeout.4391+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001942:	6963      	ldr	r3, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001944:	68a1      	ldr	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001946:	1c5a      	adds	r2, r3, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001948:	3901      	subs	r1, #1
  *oqp->q_wrptr++ = b;
 800194a:	6162      	str	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800194c:	60a1      	str	r1, [r4, #8]
  *oqp->q_wrptr++ = b;
 800194e:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001950:	6923      	ldr	r3, [r4, #16]
 8001952:	6962      	ldr	r2, [r4, #20]
 8001954:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8001956:	bf24      	itt	cs
 8001958:	68e3      	ldrcs	r3, [r4, #12]
 800195a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 800195c:	69e3      	ldr	r3, [r4, #28]
 800195e:	b10b      	cbz	r3, 8001964 <oqPutTimeout.4391+0x44>
    oqp->q_notify(oqp);
 8001960:	4620      	mov	r0, r4
 8001962:	4798      	blx	r3
 8001964:	2300      	movs	r3, #0
 8001966:	f383 8811 	msr	BASEPRI, r3
 800196a:	2000      	movs	r0, #0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196e:	f385 8811 	msr	BASEPRI, r5
 8001972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	f3af 8000 	nop.w
 800197c:	f3af 8000 	nop.w

08001980 <_putt.7850>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001980:	3030      	adds	r0, #48	; 0x30
 8001982:	f7ff bfcd 	b.w	8001920 <oqPutTimeout.4391>
 8001986:	bf00      	nop
 8001988:	f3af 8000 	nop.w
 800198c:	f3af 8000 	nop.w

08001990 <_put.7855>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001990:	3030      	adds	r0, #48	; 0x30
 8001992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001996:	f7ff bfc3 	b.w	8001920 <oqPutTimeout.4391>
 800199a:	bf00      	nop
 800199c:	f3af 8000 	nop.w

080019a0 <oqWriteTimeout.4411>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a4:	4698      	mov	r8, r3
 80019a6:	b083      	sub	sp, #12
 80019a8:	4604      	mov	r4, r0
 80019aa:	4689      	mov	r9, r1
 80019ac:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 80019ae:	69c7      	ldr	r7, [r0, #28]
 80019b0:	2320      	movs	r3, #32
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80019bc:	f108 3bff 	add.w	fp, r8, #4294967295
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80019c0:	4442      	add	r2, r8
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;
 80019c2:	2600      	movs	r6, #0
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80019c4:	b292      	uxth	r2, r2
 80019c6:	9201      	str	r2, [sp, #4]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80019c8:	fa1f fb8b 	uxth.w	fp, fp
 80019cc:	46b2      	mov	sl, r6
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 80019ce:	68a3      	ldr	r3, [r4, #8]
 80019d0:	b1fb      	cbz	r3, 8001a12 <oqWriteTimeout.4411+0x72>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 80019d2:	6963      	ldr	r3, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80019d4:	68a1      	ldr	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80019d6:	1c5a      	adds	r2, r3, #1
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80019d8:	3901      	subs	r1, #1
    *oqp->q_wrptr++ = *bp++;
 80019da:	6162      	str	r2, [r4, #20]
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80019dc:	60a1      	str	r1, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80019de:	f899 2000 	ldrb.w	r2, [r9]
 80019e2:	f109 0901 	add.w	r9, r9, #1
 80019e6:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80019e8:	6923      	ldr	r3, [r4, #16]
 80019ea:	6962      	ldr	r2, [r4, #20]
 80019ec:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80019ee:	bf24      	itt	cs
 80019f0:	68e3      	ldrcs	r3, [r4, #12]
 80019f2:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 80019f4:	b10f      	cbz	r7, 80019fa <oqWriteTimeout.4411+0x5a>
      nfy(oqp);
 80019f6:	4620      	mov	r0, r4
 80019f8:	47b8      	blx	r7
 80019fa:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 80019fe:	3d01      	subs	r5, #1
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
 8001a00:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001a04:	d019      	beq.n	8001a3a <oqWriteTimeout.4411+0x9a>
 8001a06:	2320      	movs	r3, #32
 8001a08:	f383 8811 	msr	BASEPRI, r3
  deadline = osalOsGetSystemTimeX() + timeout;

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
 8001a0c:	68a3      	ldr	r3, [r4, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1df      	bne.n	80019d2 <oqWriteTimeout.4411+0x32>
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001a12:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8001a16:	4593      	cmp	fp, r2
 8001a18:	d813      	bhi.n	8001a42 <oqWriteTimeout.4411+0xa2>
 8001a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1e:	6a51      	ldr	r1, [r2, #36]	; 0x24
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001a20:	9a01      	ldr	r2, [sp, #4]
 8001a22:	1a51      	subs	r1, r2, r1
 8001a24:	b289      	uxth	r1, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001a26:	4588      	cmp	r8, r1
 8001a28:	d305      	bcc.n	8001a36 <oqWriteTimeout.4411+0x96>
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7ff feb0 	bl	8001790 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d0cc      	beq.n	80019ce <oqWriteTimeout.4411+0x2e>
 8001a34:	2300      	movs	r3, #0
 8001a36:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	b003      	add	sp, #12
 8001a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a42:	4620      	mov	r0, r4
 8001a44:	4641      	mov	r1, r8
 8001a46:	f7ff fea3 	bl	8001790 <chThdEnqueueTimeoutS.4417>

        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
      }

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d0bf      	beq.n	80019ce <oqWriteTimeout.4411+0x2e>
 8001a4e:	e7f1      	b.n	8001a34 <oqWriteTimeout.4411+0x94>

08001a50 <_writet.7832>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001a50:	3030      	adds	r0, #48	; 0x30
 8001a52:	f7ff bfa5 	b.w	80019a0 <oqWriteTimeout.4411>
 8001a56:	bf00      	nop
 8001a58:	f3af 8000 	nop.w
 8001a5c:	f3af 8000 	nop.w

08001a60 <_write.7838>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001a60:	3030      	adds	r0, #48	; 0x30
 8001a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a66:	f7ff bf9b 	b.w	80019a0 <oqWriteTimeout.4411>
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w

08001a70 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	4602      	mov	r2, r0
 8001a74:	2320      	movs	r3, #32
 8001a76:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8001a7a:	f640 0344 	movw	r3, #2116	; 0x844
 8001a7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a82:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001a84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001a86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001a8a:	42a8      	cmp	r0, r5
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8001a8c:	6262      	str	r2, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001a8e:	d006      	beq.n	8001a9e <chThdExit+0x2e>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8001a90:	6803      	ldr	r3, [r0, #0]
 8001a92:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8001a94:	f7ff fbac 	bl	80011f0 <chSchReadyI.4571>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8001a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8001a9a:	42a8      	cmp	r0, r5
 8001a9c:	d1f8      	bne.n	8001a90 <chThdExit+0x20>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001a9e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001aa2:	b94b      	cbnz	r3, 8001ab8 <chThdExit+0x48>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8001aa4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8001aa8:	0798      	lsls	r0, r3, #30
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8001aaa:	bf01      	itttt	eq
 8001aac:	6922      	ldreq	r2, [r4, #16]
 8001aae:	6963      	ldreq	r3, [r4, #20]
 8001ab0:	611a      	streq	r2, [r3, #16]
 8001ab2:	6922      	ldreq	r2, [r4, #16]
 8001ab4:	bf08      	it	eq
 8001ab6:	6153      	streq	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001ab8:	200f      	movs	r0, #15
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 8001aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8001abe:	f7ff be27 	b.w	8001710 <chSchGoSleepS.4568>
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	f3af 8000 	nop.w
 8001acc:	f3af 8000 	nop.w

08001ad0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8001ad0:	f640 0244 	movw	r2, #2116	; 0x844
 8001ad4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 8001ad8:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8001ada:	b470      	push	{r4, r5, r6}

  tqp->next             = tp->queue.next;
 8001adc:	6803      	ldr	r3, [r0, #0]
  thread_t *otp = currp;
 8001ade:	6995      	ldr	r5, [r2, #24]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001ae0:	2601      	movs	r6, #1
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	68ac      	ldr	r4, [r5, #8]
 8001ae6:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001ae8:	605a      	str	r2, [r3, #4]
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8001aea:	f880 6020 	strb.w	r6, [r0, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001aee:	6190      	str	r0, [r2, #24]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8001af0:	f885 1020 	strb.w	r1, [r5, #32]
 8001af4:	e000      	b.n	8001af8 <chSchDoReschedule+0x28>
 8001af6:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	42a2      	cmp	r2, r4
 8001afc:	d8fb      	bhi.n	8001af6 <chSchDoReschedule+0x26>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8001afe:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001b00:	4629      	mov	r1, r5
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8001b02:	602b      	str	r3, [r5, #0]
  tp->queue.prev             = cp->queue.prev;
 8001b04:	606a      	str	r2, [r5, #4]
  tp->queue.prev->queue.next = tp;
 8001b06:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8001b08:	605d      	str	r5, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8001b0a:	bc70      	pop	{r4, r5, r6}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001b0c:	f7fe bba2 	b.w	8000254 <_port_switch>

08001b10 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001b10:	b4f0      	push	{r4, r5, r6, r7}
 8001b12:	4e13      	ldr	r6, [pc, #76]	; (8001b60 <__init_ram_areas+0x50>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001b14:	2500      	movs	r5, #0
 8001b16:	f106 0770 	add.w	r7, r6, #112	; 0x70
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8001b1a:	f1a6 0110 	sub.w	r1, r6, #16
 8001b1e:	c91a      	ldmia	r1, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	d20d      	bcs.n	8001b40 <__init_ram_areas+0x30>
 8001b24:	3904      	subs	r1, #4
 8001b26:	461a      	mov	r2, r3
      *p = *tp;
 8001b28:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001b2c:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001b30:	42a2      	cmp	r2, r4
 8001b32:	d3f9      	bcc.n	8001b28 <__init_ram_areas+0x18>
 8001b34:	43da      	mvns	r2, r3
 8001b36:	4414      	add	r4, r2
 8001b38:	f024 0403 	bic.w	r4, r4, #3
 8001b3c:	3404      	adds	r4, #4
 8001b3e:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001b40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d203      	bcs.n	8001b50 <__init_ram_areas+0x40>
      *p = 0;
 8001b48:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d3fb      	bcc.n	8001b48 <__init_ram_areas+0x38>
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001b50:	42be      	cmp	r6, r7
 8001b52:	f106 0310 	add.w	r3, r6, #16
 8001b56:	d201      	bcs.n	8001b5c <__init_ram_areas+0x4c>
 8001b58:	461e      	mov	r6, r3
 8001b5a:	e7de      	b.n	8001b1a <__init_ram_areas+0xa>
#endif
}
 8001b5c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5e:	4770      	bx	lr
 8001b60:	08002a60 	.word	0x08002a60
 8001b64:	f3af 8000 	nop.w
 8001b68:	f3af 8000 	nop.w
 8001b6c:	f3af 8000 	nop.w

08001b70 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001b70:	e7fe      	b.n	8001b70 <__default_exit>
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	f3af 8000 	nop.w
 8001b7c:	f3af 8000 	nop.w

08001b80 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	f3af 8000 	nop.w
 8001b8c:	f3af 8000 	nop.w

08001b90 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	f3af 8000 	nop.w
 8001b9c:	f3af 8000 	nop.w

08001ba0 <i2cMasterTransmitTimeout.constprop.11>:
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 *
 * @api
 */
msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 8001ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba2:	4606      	mov	r6, r0
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f380 8811 	msr	BASEPRI, r0

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8001baa:	2403      	movs	r4, #3

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8001bac:	0049      	lsls	r1, r1, #1
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8001bae:	2000      	movs	r0, #0
 8001bb0:	8431      	strh	r1, [r6, #32]
  i2cp->state = I2C_ACTIVE_TX;
 8001bb2:	7034      	strb	r4, [r6, #0]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8001bb4:	60b0      	str	r0, [r6, #8]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 8001bb6:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8001bb8:	f380 8811 	msr	BASEPRI, r0

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001bbc:	6b34      	ldr	r4, [r6, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001bbe:	6af0      	ldr	r0, [r6, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001bc0:	6867      	ldr	r7, [r4, #4]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001bc2:	6845      	ldr	r5, [r0, #4]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001bc4:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001bc6:	f8d6 c024 	ldr.w	ip, [r6, #36]	; 0x24
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8001bca:	2000      	movs	r0, #0

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8001bcc:	603c      	str	r4, [r7, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8001bd4:	607b      	str	r3, [r7, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8001bd6:	f8c5 c000 	str.w	ip, [r5]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8001bda:	60e8      	str	r0, [r5, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8001bdc:	6068      	str	r0, [r5, #4]
 8001bde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001be0:	2220      	movs	r2, #32
 8001be2:	b2ad      	uxth	r5, r5
 8001be4:	e001      	b.n	8001bea <i2cMasterTransmitTimeout.constprop.11+0x4a>
 8001be6:	f380 8811 	msr	BASEPRI, r0
 8001bea:	f382 8811 	msr	BASEPRI, r2
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8001bee:	698b      	ldr	r3, [r1, #24]
 8001bf0:	079b      	lsls	r3, r3, #30
 8001bf2:	d402      	bmi.n	8001bfa <i2cMasterTransmitTimeout.constprop.11+0x5a>
 8001bf4:	680b      	ldr	r3, [r1, #0]
 8001bf6:	059f      	lsls	r7, r3, #22
 8001bf8:	d50c      	bpl.n	8001c14 <i2cMasterTransmitTimeout.constprop.11+0x74>
 8001bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8001bfc:	1b5b      	subs	r3, r3, r5
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b31      	cmp	r3, #49	; 0x31
 8001c02:	d9f0      	bls.n	8001be6 <i2cMasterTransmitTimeout.constprop.11+0x46>
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
    i2cp->state = I2C_LOCKED;
 8001c04:	2305      	movs	r3, #5
 8001c06:	7033      	strb	r3, [r6, #0]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8001c14:	684b      	ldr	r3, [r1, #4]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8001c16:	f640 0444 	movw	r4, #2116	; 0x844
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1e:	604b      	str	r3, [r1, #4]
  dp->CR1 |= I2C_CR1_START;
 8001c20:	6808      	ldr	r0, [r1, #0]
 8001c22:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001c26:	69a2      	ldr	r2, [r4, #24]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8001c28:	4633      	mov	r3, r6
 8001c2a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001c2e:	6008      	str	r0, [r1, #0]
 8001c30:	f843 2f1c 	str.w	r2, [r3, #28]!
  tp->u.wttrp = trp;
 8001c34:	6253      	str	r3, [r2, #36]	; 0x24
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7ff fd6a 	bl	8001710 <chSchGoSleepS.4568>
  }

  return currp->u.rdymsg;
 8001c3c:	69a3      	ldr	r3, [r4, #24]
 8001c3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8001c40:	1c44      	adds	r4, r0, #1
    i2cp->state = I2C_LOCKED;
  }
  else {
    i2cp->state = I2C_READY;
 8001c42:	bf1c      	itt	ne
 8001c44:	2302      	movne	r3, #2
 8001c46:	7033      	strbne	r3, [r6, #0]
  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 8001c48:	d0dc      	beq.n	8001c04 <i2cMasterTransmitTimeout.constprop.11+0x64>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f383 8811 	msr	BASEPRI, r3
  else {
    i2cp->state = I2C_READY;
  }
  osalSysUnlock();
  return rdymsg;
}
 8001c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	f3af 8000 	nop.w
 8001c5c:	f3af 8000 	nop.w

08001c60 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001c60:	b508      	push	{r3, lr}
 8001c62:	4601      	mov	r1, r0
 8001c64:	2320      	movs	r3, #32
 8001c66:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f7ff fd68 	bl	8001740 <chSchGoSleepTimeoutS.4340>
 8001c70:	2300      	movs	r3, #0
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	bd08      	pop	{r3, pc}
 8001c78:	f3af 8000 	nop.w
 8001c7c:	f3af 8000 	nop.w

08001c80 <hd44780WriteRegister.11289.constprop.6>:
 * @param[in] reg           Register id
 * @param[in] value         Writing value
 *
 * @notapi
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
 8001c80:	b530      	push	{r4, r5, lr}
 8001c82:	4605      	mov	r5, r0
 8001c84:	b083      	sub	sp, #12
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {

  chThdSleep(time);
 8001c86:	2002      	movs	r0, #2
 8001c88:	460c      	mov	r4, r1
 8001c8a:	f7ff ffe9 	bl	8001c60 <chThdSleep>
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
 8001c8e:	f640 0338 	movw	r3, #2104	; 0x838
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001c92:	b2e8      	uxtb	r0, r5
 8001c94:	f024 020f 	bic.w	r2, r4, #15
  if(lcdp->backlight)
 8001c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001c9c:	4302      	orrs	r2, r0
  if(lcdp->backlight)
 8001c9e:	785d      	ldrb	r5, [r3, #1]
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001ca0:	f042 0104 	orr.w	r1, r2, #4
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 8001ca4:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
 8001ca8:	f88d 1004 	strb.w	r1, [sp, #4]
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 8001cac:	b2c0      	uxtb	r0, r0
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value) {
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
 8001cae:	b1c5      	cbz	r5, 8001ce2 <hd44780WriteRegister.11289.constprop.6+0x62>
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
 8001cb0:	f040 040c 	orr.w	r4, r0, #12
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
 8001cb4:	f041 0108 	orr.w	r1, r1, #8
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
 8001cb8:	f042 0208 	orr.w	r2, r2, #8
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
  txbuf[3] = reg | LCD_D_LOWER(value);
  if(lcdp->backlight)
    txbuf[3] |= LCD_K;
 8001cbc:	f040 0008 	orr.w	r0, r0, #8
  uint8_t txbuf[4];
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
 8001cc0:	f88d 1004 	strb.w	r1, [sp, #4]
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
 8001cc4:	f88d 2005 	strb.w	r2, [sp, #5]
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
 8001cc8:	f88d 4006 	strb.w	r4, [sp, #6]
  txbuf[3] = reg | LCD_D_LOWER(value);
  if(lcdp->backlight)
    txbuf[3] |= LCD_K;
 8001ccc:	f88d 0007 	strb.w	r0, [sp, #7]

  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	aa01      	add	r2, sp, #4
 8001cd4:	7a19      	ldrb	r1, [r3, #8]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	2304      	movs	r3, #4
 8001cda:	f7ff ff61 	bl	8001ba0 <i2cMasterTransmitTimeout.constprop.11>
                           txbuf, 4, NULL, 0, TIME_INFINITE);
}
 8001cde:	b003      	add	sp, #12
 8001ce0:	bd30      	pop	{r4, r5, pc}
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 8001ce2:	f040 0104 	orr.w	r1, r0, #4
  if(lcdp->backlight)
    txbuf[2] |= LCD_K;
  txbuf[3] = reg | LCD_D_LOWER(value);
 8001ce6:	f88d 0007 	strb.w	r0, [sp, #7]
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
  if(lcdp->backlight)
    txbuf[1] |= LCD_K;
  txbuf[2] = reg | LCD_D_LOWER(value) | LCD_E;
 8001cea:	f88d 1006 	strb.w	r1, [sp, #6]
  osalThreadSleepMilliseconds(2);

  txbuf[0] = reg | LCD_D_HIGHER(value) | LCD_E;
  if(lcdp->backlight)
    txbuf[0] |= LCD_K;
  txbuf[1] = reg | LCD_D_HIGHER(value);
 8001cee:	f88d 2005 	strb.w	r2, [sp, #5]
 8001cf2:	e7ed      	b.n	8001cd0 <hd44780WriteRegister.11289.constprop.6+0x50>
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	f3af 8000 	nop.w
 8001cfc:	f3af 8000 	nop.w

08001d00 <dmaStreamAllocate.constprop.13>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8001d00:	b4f0      	push	{r4, r5, r6, r7}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001d02:	7c45      	ldrb	r5, [r0, #17]
 8001d04:	2601      	movs	r6, #1
 8001d06:	fa06 f705 	lsl.w	r7, r6, r5
 8001d0a:	f640 0340 	movw	r3, #2112	; 0x840
 8001d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d12:	681c      	ldr	r4, [r3, #0]
 8001d14:	4227      	tst	r7, r4
    return true;
 8001d16:	bf18      	it	ne
 8001d18:	4630      	movne	r0, r6
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8001d1a:	d143      	bne.n	8001da4 <dmaStreamAllocate.constprop.13+0xa4>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d1c:	f640 0600 	movw	r6, #2048	; 0x800
 8001d20:	f2c2 0600 	movt	r6, #8192	; 0x2000
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d24:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8001d28:	f846 1035 	str.w	r1, [r6, r5, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8001d2c:	607a      	str	r2, [r7, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8001d2e:	0662      	lsls	r2, r4, #25
    rccEnableDMA1(false);
 8001d30:	bf02      	ittt	eq
 8001d32:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8001d36:	f2c4 0202 	movteq	r2, #16386	; 0x4002
 8001d3a:	6955      	ldreq	r5, [r2, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d3c:	6807      	ldr	r7, [r0, #0]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
    rccEnableDMA1(false);
 8001d3e:	bf04      	itt	eq
 8001d40:	f045 0501 	orreq.w	r5, r5, #1
 8001d44:	6155      	streq	r5, [r2, #20]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d46:	6842      	ldr	r2, [r0, #4]
 8001d48:	f04f 0c0e 	mov.w	ip, #14
 8001d4c:	6815      	ldr	r5, [r2, #0]
 8001d4e:	f025 050f 	bic.w	r5, r5, #15
 8001d52:	6015      	str	r5, [r2, #0]
 8001d54:	7c06      	ldrb	r6, [r0, #16]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8001d56:	6885      	ldr	r5, [r0, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d58:	fa0c fc06 	lsl.w	ip, ip, r6
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8001d5c:	422c      	tst	r4, r5
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001d5e:	f04f 0600 	mov.w	r6, #0
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001d62:	f8c7 c004 	str.w	ip, [r7, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8001d66:	6016      	str	r6, [r2, #0]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8001d68:	d115      	bne.n	8001d96 <dmaStreamAllocate.constprop.13+0x96>
 8001d6a:	b1a1      	cbz	r1, 8001d96 <dmaStreamAllocate.constprop.13+0x96>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 8001d6c:	7c82      	ldrb	r2, [r0, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d6e:	2501      	movs	r5, #1
 8001d70:	f002 011f 	and.w	r1, r2, #31
 8001d74:	408d      	lsls	r5, r1
 8001d76:	0951      	lsrs	r1, r2, #5
 8001d78:	0089      	lsls	r1, r1, #2
 8001d7a:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d7e:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001d82:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 8001d86:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8001d8a:	2650      	movs	r6, #80	; 0x50
 8001d8c:	f882 6300 	strb.w	r6, [r2, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d90:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d94:	600d      	str	r5, [r1, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 8001d96:	7c42      	ldrb	r2, [r0, #17]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	601c      	str	r4, [r3, #0]
 8001da2:	2000      	movs	r0, #0

  return false;
}
 8001da4:	bcf0      	pop	{r4, r5, r6, r7}
 8001da6:	4770      	bx	lr
 8001da8:	f3af 8000 	nop.w
 8001dac:	f3af 8000 	nop.w

08001db0 <_pal_lld_setgroupmode.constprop.10>:
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8001db0:	2300      	movs	r3, #0
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8001db2:	b430      	push	{r4, r5}
  if (mode == PAL_MODE_INPUT_PULLUP)
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
 8001db4:	461a      	mov	r2, r3
 8001db6:	461c      	mov	r4, r3
 8001db8:	4619      	mov	r1, r3
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8001dba:	2508      	movs	r5, #8
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8001dbc:	f010 0f80 	tst.w	r0, #128	; 0x80
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
 8001dc0:	ea4f 1101 	mov.w	r1, r1, lsl #4
    mh <<= 4;
    crl <<= 4;
 8001dc4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
 8001dc8:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
    crh <<= 4;
 8001dcc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    if ((mask & 0x0080) == 0)
      ml |= 0xf;
 8001dd0:	bf0c      	ite	eq
 8001dd2:	f041 010f 	orreq.w	r1, r1, #15
    else
      crl |= cfg;
 8001dd6:	f042 020f 	orrne.w	r2, r2, #15
    if ((mask & 0x8000) == 0)
 8001dda:	f410 4f00 	tst.w	r0, #32768	; 0x8000
      mh |= 0xf;
 8001dde:	bf0c      	ite	eq
 8001de0:	f044 040f 	orreq.w	r4, r4, #15
    else
      crh |= cfg;
 8001de4:	f043 030f 	orrne.w	r3, r3, #15
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8001de8:	3d01      	subs	r5, #1
      crl |= cfg;
    if ((mask & 0x8000) == 0)
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
 8001dea:	ea4f 0040 	mov.w	r0, r0, lsl #1
    port->BSRR = mask;
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
  mh = ml = crh = crl = 0;
  for (i = 0; i < 8; i++) {
 8001dee:	d1e5      	bne.n	8001dbc <_pal_lld_setgroupmode.constprop.10+0xc>
      mh |= 0xf;
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
 8001df0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001df4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001df8:	6845      	ldr	r5, [r0, #4]
 8001dfa:	402c      	ands	r4, r5
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8001e00:	6803      	ldr	r3, [r0, #0]
}
 8001e02:	bc30      	pop	{r4, r5}
    else
      crh |= cfg;
    mask <<= 1;
  }
  port->CRH = (port->CRH & mh) | crh;
  port->CRL = (port->CRL & ml) | crl;
 8001e04:	4019      	ands	r1, r3
 8001e06:	430a      	orrs	r2, r1
 8001e08:	6002      	str	r2, [r0, #0]
}
 8001e0a:	4770      	bx	lr
 8001e0c:	f3af 8000 	nop.w

08001e10 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001e10:	b40e      	push	{r1, r2, r3}
 8001e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e16:	b094      	sub	sp, #80	; 0x50
 8001e18:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8001e1c:	f8cd c00c 	str.w	ip, [sp, #12]
 8001e20:	f10d 0c39 	add.w	ip, sp, #57	; 0x39
 8001e24:	f8cd c008 	str.w	ip, [sp, #8]
 8001e28:	9803      	ldr	r0, [sp, #12]
 8001e2a:	f8dd c008 	ldr.w	ip, [sp, #8]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001e2e:	ab1e      	add	r3, sp, #120	; 0x78
 8001e30:	ebc0 0c0c 	rsb	ip, r0, ip
 8001e34:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001e38:	f642 2cf4 	movw	ip, #10996	; 0x2af4
 8001e3c:	f6c0 0c00 	movt	ip, #2048	; 0x800
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001e40:	2070      	movs	r0, #112	; 0x70
 8001e42:	f642 2bdc 	movw	fp, #10972	; 0x2adc
 8001e46:	f640 19f0 	movw	r9, #2544	; 0x9f0
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8001e4a:	f8cd c020 	str.w	ip, [sp, #32]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001e4e:	f04f 0c00 	mov.w	ip, #0
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001e52:	930d      	str	r3, [sp, #52]	; 0x34
 8001e54:	469a      	mov	sl, r3
 8001e56:	f6c0 0b00 	movt	fp, #2048	; 0x800
 8001e5a:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8001e5e:	9005      	str	r0, [sp, #20]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8001e60:	f8cd c010 	str.w	ip, [sp, #16]
 8001e64:	4606      	mov	r6, r0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001e66:	f10b 0401 	add.w	r4, fp, #1
    if (c == 0)
 8001e6a:	b1be      	cbz	r6, 8001e9c <chprintf.constprop.0+0x8c>
      return n;
    if (c != '%') {
 8001e6c:	2e25      	cmp	r6, #37	; 0x25
 8001e6e:	d01b      	beq.n	8001ea8 <chprintf.constprop.0+0x98>
      streamPut(chp, (uint8_t)c);
      n++;
 8001e70:	f8dd c010 	ldr.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001e74:	f8d9 3000 	ldr.w	r3, [r9]
 8001e78:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8001e7c:	4631      	mov	r1, r6
      n++;
 8001e7e:	f10c 0c01 	add.w	ip, ip, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f2c2 0000 	movt	r0, #8192	; 0x2000
      n++;
 8001e88:	f8cd c010 	str.w	ip, [sp, #16]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8001e8c:	4798      	blx	r3
 8001e8e:	f89b 6001 	ldrb.w	r6, [fp, #1]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8001e92:	46a3      	mov	fp, r4
 8001e94:	f10b 0401 	add.w	r4, fp, #1
    if (c == 0)
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d1e7      	bne.n	8001e6c <chprintf.constprop.0+0x5c>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001e9c:	9804      	ldr	r0, [sp, #16]
 8001e9e:	b014      	add	sp, #80	; 0x50
 8001ea0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea4:	b003      	add	sp, #12
 8001ea6:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8001ea8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8001eac:	2a2d      	cmp	r2, #45	; 0x2d
 8001eae:	bf03      	ittte	eq
 8001eb0:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8001eb4:	f10b 0402 	addeq.w	r4, fp, #2
      left_align = TRUE;
 8001eb8:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8001eba:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8001ebc:	2a30      	cmp	r2, #48	; 0x30
 8001ebe:	bf04      	itt	eq
 8001ec0:	7862      	ldrbeq	r2, [r4, #1]
      fmt++;
 8001ec2:	3401      	addeq	r4, #1
      filler = '0';
 8001ec4:	46a3      	mov	fp, r4
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2530      	moveq	r5, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8001eca:	2520      	movne	r5, #32
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8001ecc:	2400      	movs	r4, #0
 8001ece:	e009      	b.n	8001ee4 <chprintf.constprop.0+0xd4>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8001ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ed4:	f10a 0a04 	add.w	sl, sl, #4
      else
        break;
      width = width * 10 + c;
 8001ed8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001edc:	f89b 2000 	ldrb.w	r2, [fp]
 8001ee0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8001ee4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8001eec:	f10b 0b01 	add.w	fp, fp, #1
      if (c >= '0' && c <= '9')
 8001ef0:	d9f2      	bls.n	8001ed8 <chprintf.constprop.0+0xc8>
        c -= '0';
      else if (c == '*')
 8001ef2:	2a2a      	cmp	r2, #42	; 0x2a
 8001ef4:	d0ec      	beq.n	8001ed0 <chprintf.constprop.0+0xc0>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8001ef6:	2a2e      	cmp	r2, #46	; 0x2e
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	d04e      	beq.n	8001f9c <chprintf.constprop.0+0x18c>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001efe:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001f02:	294c      	cmp	r1, #76	; 0x4c
 8001f04:	d159      	bne.n	8001fba <chprintf.constprop.0+0x1aa>
      is_long = TRUE;
      if (*fmt)
 8001f06:	f89b 6000 	ldrb.w	r6, [fp]
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 8001f0a:	2001      	movs	r0, #1
      if (*fmt)
 8001f0c:	b126      	cbz	r6, 8001f18 <chprintf.constprop.0+0x108>
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
 8001f0e:	2001      	movs	r0, #1
      if (*fmt)
        c = *fmt++;
 8001f10:	4632      	mov	r2, r6
 8001f12:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8001f16:	4483      	add	fp, r0
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8001f18:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8001f1c:	2934      	cmp	r1, #52	; 0x34
 8001f1e:	f200 815c 	bhi.w	80021da <chprintf.constprop.0+0x3ca>
 8001f22:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001f26:	00bd      	.short	0x00bd
 8001f28:	015a015a 	.word	0x015a015a
 8001f2c:	015a015a 	.word	0x015a015a
 8001f30:	015a00bd 	.word	0x015a00bd
 8001f34:	015a015a 	.word	0x015a015a
 8001f38:	015a015a 	.word	0x015a015a
 8001f3c:	015a00bb 	.word	0x015a00bb
 8001f40:	015a015a 	.word	0x015a015a
 8001f44:	015a015a 	.word	0x015a015a
 8001f48:	015a0054 	.word	0x015a0054
 8001f4c:	0158015a 	.word	0x0158015a
 8001f50:	015a015a 	.word	0x015a015a
 8001f54:	015a015a 	.word	0x015a015a
 8001f58:	015a015a 	.word	0x015a015a
 8001f5c:	015a015a 	.word	0x015a015a
 8001f60:	015a015a 	.word	0x015a015a
 8001f64:	00bd014b 	.word	0x00bd014b
 8001f68:	00f4015a 	.word	0x00f4015a
 8001f6c:	015a015a 	.word	0x015a015a
 8001f70:	015a00bd 	.word	0x015a00bd
 8001f74:	015a015a 	.word	0x015a015a
 8001f78:	015a015a 	.word	0x015a015a
 8001f7c:	015a00bb 	.word	0x015a00bb
 8001f80:	015a015a 	.word	0x015a015a
 8001f84:	015a00cd 	.word	0x015a00cd
 8001f88:	015a0054 	.word	0x015a0054
 8001f8c:	0158015a 	.word	0x0158015a
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8001f90:	f89a 1000 	ldrb.w	r1, [sl]
 8001f94:	f10a 0a04 	add.w	sl, sl, #4
        else
          break;
        precision *= 10;
        precision += c;
 8001f98:	eb01 0340 	add.w	r3, r1, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8001f9c:	f81b 2b01 	ldrb.w	r2, [fp], #1
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8001fa0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8001fa4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8001fa8:	b2c9      	uxtb	r1, r1
 8001faa:	2909      	cmp	r1, #9
 8001fac:	d9f4      	bls.n	8001f98 <chprintf.constprop.0+0x188>
          c -= '0';
        else if (c == '*')
 8001fae:	2a2a      	cmp	r2, #42	; 0x2a
 8001fb0:	d0ee      	beq.n	8001f90 <chprintf.constprop.0+0x180>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8001fb2:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8001fb6:	294c      	cmp	r1, #76	; 0x4c
 8001fb8:	d0a5      	beq.n	8001f06 <chprintf.constprop.0+0xf6>
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');
 8001fba:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8001fbe:	b2c0      	uxtb	r0, r0
 8001fc0:	2819      	cmp	r0, #25
 8001fc2:	bf8c      	ite	hi
 8001fc4:	2000      	movhi	r0, #0
 8001fc6:	2001      	movls	r0, #1
 8001fc8:	f89b 6000 	ldrb.w	r6, [fp]
 8001fcc:	e7a4      	b.n	8001f18 <chprintf.constprop.0+0x108>

    /* Command decoding.*/
    switch (c) {
 8001fce:	220a      	movs	r2, #10
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001fd0:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001fd4:	a80e      	add	r0, sp, #56	; 0x38
    case 'O':
    case 'o':
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
 8001fd6:	f10a 0a04 	add.w	sl, sl, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f7fe ff30 	bl	8000e40 <long_to_string_with_divisor.11509.4520>
 8001fe0:	f8dd c00c 	ldr.w	ip, [sp, #12]
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8001fe4:	ab0e      	add	r3, sp, #56	; 0x38
 8001fe6:	ebcc 0000 	rsb	r0, ip, r0
 8001fea:	1e42      	subs	r2, r0, #1
 8001fec:	9206      	str	r2, [sp, #24]
 8001fee:	9305      	str	r3, [sp, #20]
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8001ff0:	1a24      	subs	r4, r4, r0
 8001ff2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 8001ff6:	b9ff      	cbnz	r7, 8002038 <chprintf.constprop.0+0x228>
      width = -width;
 8001ff8:	4264      	negs	r4, r4
    if (width < 0) {
 8001ffa:	b1ec      	cbz	r4, 8002038 <chprintf.constprop.0+0x228>
      if (*s == '-' && filler == '0') {
 8001ffc:	f8dd c014 	ldr.w	ip, [sp, #20]
        streamPut(chp, (uint8_t)*s++);
 8002000:	f640 17f0 	movw	r7, #2544	; 0x9f0
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002004:	f89c 1000 	ldrb.w	r1, [ip]
 8002008:	292d      	cmp	r1, #45	; 0x2d
 800200a:	f000 80f0 	beq.w	80021ee <chprintf.constprop.0+0x3de>
 800200e:	f2c2 0700 	movt	r7, #8192	; 0x2000
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002012:	46a0      	mov	r8, r4
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f640 10f0 	movw	r0, #2544	; 0x9f0
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002020:	4629      	mov	r1, r5
 8002022:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002024:	f118 0801 	adds.w	r8, r8, #1
 8002028:	d1f4      	bne.n	8002014 <chprintf.constprop.0+0x204>
 800202a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800202e:	ebc4 0c0c 	rsb	ip, r4, ip
 8002032:	f8cd c010 	str.w	ip, [sp, #16]
 8002036:	4644      	mov	r4, r8
    }
    while (--i >= 0) {
 8002038:	9a06      	ldr	r2, [sp, #24]
 800203a:	2a00      	cmp	r2, #0
 800203c:	db19      	blt.n	8002072 <chprintf.constprop.0+0x262>
 800203e:	9b05      	ldr	r3, [sp, #20]
 8002040:	461f      	mov	r7, r3
 8002042:	f103 38ff 	add.w	r8, r3, #4294967295
 8002046:	4417      	add	r7, r2
      streamPut(chp, (uint8_t)*s++);
 8002048:	f8d9 3000 	ldr.w	r3, [r9]
 800204c:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8002050:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800205a:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800205c:	45b8      	cmp	r8, r7
 800205e:	d1f3      	bne.n	8002048 <chprintf.constprop.0+0x238>
 8002060:	f8dd c010 	ldr.w	ip, [sp, #16]
 8002064:	f10c 0301 	add.w	r3, ip, #1
 8002068:	f8dd c018 	ldr.w	ip, [sp, #24]
 800206c:	449c      	add	ip, r3
 800206e:	f8cd c010 	str.w	ip, [sp, #16]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002072:	2c00      	cmp	r4, #0
 8002074:	f43f aef7 	beq.w	8001e66 <chprintf.constprop.0+0x56>
 8002078:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
 800207a:	f8d9 3000 	ldr.w	r3, [r9]
 800207e:	f640 10f0 	movw	r0, #2544	; 0x9f0
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002088:	4629      	mov	r1, r5
 800208a:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800208c:	3f01      	subs	r7, #1
 800208e:	d1f4      	bne.n	800207a <chprintf.constprop.0+0x26a>
 8002090:	f8dd c010 	ldr.w	ip, [sp, #16]
 8002094:	44a4      	add	ip, r4
 8002096:	f8cd c010 	str.w	ip, [sp, #16]
 800209a:	e6e4      	b.n	8001e66 <chprintf.constprop.0+0x56>
 800209c:	2208      	movs	r2, #8
 800209e:	e797      	b.n	8001fd0 <chprintf.constprop.0+0x1c0>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 80020a0:	f8da 1000 	ldr.w	r1, [sl]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80020a4:	220a      	movs	r2, #10
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
 80020a6:	2900      	cmp	r1, #0
        *p++ = '-';
 80020a8:	bfb8      	it	lt
 80020aa:	232d      	movlt	r3, #45	; 0x2d
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
 80020ac:	f10a 0a04 	add.w	sl, sl, #4
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
        l = -l;
 80020b0:	bfbd      	ittte	lt
 80020b2:	4249      	neglt	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80020b4:	f88d 3038 	strblt.w	r3, [sp, #56]	; 0x38
 80020b8:	f10d 0039 	addlt.w	r0, sp, #57	; 0x39
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80020bc:	a80e      	addge	r0, sp, #56	; 0x38
 80020be:	e78c      	b.n	8001fda <chprintf.constprop.0+0x1ca>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80020c0:	f8da 0000 	ldr.w	r0, [sl]
        s = "(null)";
 80020c4:	f642 22ec 	movw	r2, #10988	; 0x2aec
 80020c8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80020cc:	2800      	cmp	r0, #0
 80020ce:	bf08      	it	eq
 80020d0:	4610      	moveq	r0, r2
 80020d2:	9005      	str	r0, [sp, #20]
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 80020d4:	7800      	ldrb	r0, [r0, #0]
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 80020d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 80020da:	f10a 0a04 	add.w	sl, sl, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf08      	it	eq
 80020e2:	4613      	moveq	r3, r2
      for (p = s; *p && (--precision >= 0); p++)
 80020e4:	2800      	cmp	r0, #0
 80020e6:	f000 80a7 	beq.w	8002238 <chprintf.constprop.0+0x428>
 80020ea:	9a05      	ldr	r2, [sp, #20]
 80020ec:	4413      	add	r3, r2
 80020ee:	e002      	b.n	80020f6 <chprintf.constprop.0+0x2e6>
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f000 8093 	beq.w	800221c <chprintf.constprop.0+0x40c>
 80020f6:	7851      	ldrb	r1, [r2, #1]
 80020f8:	3201      	adds	r2, #1
 80020fa:	2900      	cmp	r1, #0
 80020fc:	d1f8      	bne.n	80020f0 <chprintf.constprop.0+0x2e0>
 80020fe:	9b05      	ldr	r3, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002100:	2520      	movs	r5, #32
 8002102:	1ad0      	subs	r0, r2, r3
 8002104:	f100 3cff 	add.w	ip, r0, #4294967295
 8002108:	f8cd c018 	str.w	ip, [sp, #24]
 800210c:	e770      	b.n	8001ff0 <chprintf.constprop.0+0x1e0>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 800210e:	f10a 0a07 	add.w	sl, sl, #7
 8002112:	f02a 0a07 	bic.w	sl, sl, #7
 8002116:	e9da 0100 	ldrd	r0, r1, [sl]
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f7fe fca0 	bl	8000a60 <__aeabi_d2f>
      if (f < 0) {
 8002120:	2100      	movs	r1, #0
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8002122:	4680      	mov	r8, r0
      if (f < 0) {
 8002124:	f7fe fd3a 	bl	8000b9c <__aeabi_fcmplt>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8002128:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 800212c:	9b01      	ldr	r3, [sp, #4]
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 800212e:	aa0e      	add	r2, sp, #56	; 0x38
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
 8002130:	2800      	cmp	r0, #0
 8002132:	d179      	bne.n	8002228 <chprintf.constprop.0+0x418>
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8002134:	f8dd c020 	ldr.w	ip, [sp, #32]
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8002138:	3b01      	subs	r3, #1
 800213a:	2b08      	cmp	r3, #8
 800213c:	bf28      	it	cs
 800213e:	2308      	movcs	r3, #8
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8002140:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]

  l = (long)num;
 8002144:	4640      	mov	r0, r8
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8002146:	9305      	str	r3, [sp, #20]

  l = (long)num;
 8002148:	9201      	str	r2, [sp, #4]
 800214a:	f7fe fd4f 	bl	8000bec <__aeabi_f2iz>
  p = long_to_string_with_divisor(p, l, 10, 0);
 800214e:	9a01      	ldr	r2, [sp, #4]

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8002150:	9006      	str	r0, [sp, #24]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8002152:	9906      	ldr	r1, [sp, #24]
 8002154:	4610      	mov	r0, r2
 8002156:	2300      	movs	r3, #0
 8002158:	220a      	movs	r2, #10
 800215a:	f7fe fe71 	bl	8000e40 <long_to_string_with_divisor.11509.4520>
  *p++ = '.';
 800215e:	232e      	movs	r3, #46	; 0x2e
 8002160:	4684      	mov	ip, r0
 8002162:	f80c 3b01 	strb.w	r3, [ip], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8002166:	4640      	mov	r0, r8
 8002168:	f8cd c004 	str.w	ip, [sp, #4]
 800216c:	f7fe f9ea 	bl	8000544 <__aeabi_f2d>
 8002170:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8002174:	9806      	ldr	r0, [sp, #24]
 8002176:	f7fe f9d3 	bl	8000520 <__aeabi_i2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002182:	f7fe f87f 	bl	8000284 <__aeabi_dsub>
 8002186:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800218a:	9805      	ldr	r0, [sp, #20]
 800218c:	f7fe f9b8 	bl	8000500 <__aeabi_ui2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002198:	f7fe fa28 	bl	80005ec <__aeabi_dmul>
 800219c:	f7fe fc38 	bl	8000a10 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80021a0:	f64c 43cd 	movw	r3, #52429	; 0xcccd
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 80021a4:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 80021a6:	9805      	ldr	r0, [sp, #20]
 80021a8:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80021ac:	fba3 0300 	umull	r0, r3, r3, r0
 80021b0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	4660      	mov	r0, ip
 80021b8:	220a      	movs	r2, #10
 80021ba:	e70f      	b.n	8001fdc <chprintf.constprop.0+0x1cc>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80021bc:	f8da 3000 	ldr.w	r3, [sl]
 80021c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 80021c6:	1e42      	subs	r2, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80021c8:	ab0e      	add	r3, sp, #56	; 0x38

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80021ca:	f10a 0a04 	add.w	sl, sl, #4
 80021ce:	9206      	str	r2, [sp, #24]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80021d0:	2520      	movs	r5, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80021d2:	9305      	str	r3, [sp, #20]
 80021d4:	e70c      	b.n	8001ff0 <chprintf.constprop.0+0x1e0>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80021d6:	2210      	movs	r2, #16
 80021d8:	e6fa      	b.n	8001fd0 <chprintf.constprop.0+0x1c0>
 80021da:	9809      	ldr	r0, [sp, #36]	; 0x24
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80021dc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80021e0:	f100 3cff 	add.w	ip, r0, #4294967295
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80021e4:	aa0e      	add	r2, sp, #56	; 0x38
 80021e6:	f8cd c018 	str.w	ip, [sp, #24]
 80021ea:	9205      	str	r2, [sp, #20]
 80021ec:	e700      	b.n	8001ff0 <chprintf.constprop.0+0x1e0>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80021ee:	2d30      	cmp	r5, #48	; 0x30
 80021f0:	f47f af0d 	bne.w	800200e <chprintf.constprop.0+0x1fe>
        streamPut(chp, (uint8_t)*s++);
 80021f4:	f8d9 3000 	ldr.w	r3, [r9]
 80021f8:	f2c2 0700 	movt	r7, #8192	; 0x2000
 80021fc:	4638      	mov	r0, r7
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4798      	blx	r3
 8002202:	9a05      	ldr	r2, [sp, #20]
        n++;
 8002204:	f8dd c010 	ldr.w	ip, [sp, #16]
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8002208:	3201      	adds	r2, #1
 800220a:	9205      	str	r2, [sp, #20]
 800220c:	9a06      	ldr	r2, [sp, #24]
        n++;
 800220e:	f10c 0c01 	add.w	ip, ip, #1
 8002212:	3a01      	subs	r2, #1
 8002214:	f8cd c010 	str.w	ip, [sp, #16]
 8002218:	9206      	str	r2, [sp, #24]
 800221a:	e6fa      	b.n	8002012 <chprintf.constprop.0+0x202>
 800221c:	9a05      	ldr	r2, [sp, #20]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800221e:	2520      	movs	r5, #32
 8002220:	1a98      	subs	r0, r3, r2
 8002222:	1e43      	subs	r3, r0, #1
 8002224:	9306      	str	r3, [sp, #24]
 8002226:	e6e3      	b.n	8001ff0 <chprintf.constprop.0+0x1e0>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8002228:	222d      	movs	r2, #45	; 0x2d
 800222a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
        f = -f;
 800222e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8002232:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8002236:	e77d      	b.n	8002134 <chprintf.constprop.0+0x324>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	9306      	str	r3, [sp, #24]
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 800223e:	2520      	movs	r5, #32
 8002240:	e6d6      	b.n	8001ff0 <chprintf.constprop.0+0x1e0>
 8002242:	bf00      	nop
 8002244:	f3af 8000 	nop.w
 8002248:	f3af 8000 	nop.w
 800224c:	f3af 8000 	nop.w

08002250 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002258:	2200      	movs	r2, #0
 800225a:	f04f 31ff 	mov.w	r1, #4294967295
 800225e:	6918      	ldr	r0, [r3, #16]


/*
 * Application entry point.
 */
int main(void) {
 8002260:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002264:	6119      	str	r1, [r3, #16]
 8002266:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 8002268:	68d8      	ldr	r0, [r3, #12]
 800226a:	60d9      	str	r1, [r3, #12]
 800226c:	60da      	str	r2, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800226e:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002270:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 8002274:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002278:	61d8      	str	r0, [r3, #28]
  rccEnableBKPInterface(FALSE);
 800227a:	69d8      	ldr	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800227c:	f2c4 0100 	movt	r1, #16384	; 0x4000
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(0xFFFFFFFF);

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
  rccEnableBKPInterface(FALSE);
 8002280:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 8002284:	61d8      	str	r0, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002286:	680e      	ldr	r6, [r1, #0]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8002288:	f640 0540 	movw	r5, #2112	; 0x840
 800228c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002290:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8002294:	f642 346c 	movw	r4, #11116	; 0x2b6c
 8002298:	f640 0000 	movw	r0, #2048	; 0x800
 800229c:	600e      	str	r6, [r1, #0]
 800229e:	b085      	sub	sp, #20
 80022a0:	602a      	str	r2, [r5, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	4611      	mov	r1, r2
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 80022a6:	4615      	mov	r5, r2
 80022a8:	f6c0 0400 	movt	r4, #2048	; 0x800
 80022ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80022b0:	1862      	adds	r2, r4, r1
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	3114      	adds	r1, #20
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80022b6:	298c      	cmp	r1, #140	; 0x8c
    _stm32_dma_streams[i].channel->CCR = 0U;
 80022b8:	6015      	str	r5, [r2, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 80022ba:	50c5      	str	r5, [r0, r3]
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f103 0308 	add.w	r3, r3, #8
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80022c4:	d1f4      	bne.n	80022b0 <main+0x60>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 80022c6:	4613      	mov	r3, r2
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80022d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022d4:	6059      	str	r1, [r3, #4]
 80022d6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022da:	6984      	ldr	r4, [r0, #24]
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 80022dc:	f648 0a88 	movw	sl, #34952	; 0x8888
void _pal_lld_init(const PALConfig *config) {

  /*
   * Enables the GPIO related clocks.
   */
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 80022e0:	f044 047d 	orr.w	r4, r4, #125	; 0x7d
 80022e4:	6184      	str	r4, [r0, #24]
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 80022e6:	46d1      	mov	r9, sl
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80022e8:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  GPIOA->CRH = config->PAData.crh;
 80022ec:	f248 4bb8 	movw	fp, #33976	; 0x84b8
  GPIOA->CRL = config->PAData.crl;
 80022f0:	f644 3884 	movw	r8, #19332	; 0x4b84
  GPIOB->ODR = config->PBData.odr;
 80022f4:	f44f 6740 	mov.w	r7, #3072	; 0xc00
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 80022f8:	f648 0444 	movw	r4, #34884	; 0x8844
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 80022fc:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
 8002300:	f2c4 0701 	movt	r7, #16385	; 0x4001

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 8002304:	f6c8 0b88 	movt	fp, #34952	; 0x8888
  GPIOA->CRL = config->PAData.crl;
 8002308:	f2cb 48b3 	movt	r8, #46259	; 0xb4b3
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
 800230c:	f2cb 4ab3 	movt	sl, #46259	; 0xb4b3
  GPIOB->CRL = config->PBData.crl;
 8002310:	f6ce 6988 	movt	r9, #61064	; 0xee88
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002314:	f6c8 0488 	movt	r4, #34952	; 0x8888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002318:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  GPIOC->CRH = config->PCData.crh;
 800231c:	f648 0c33 	movw	ip, #34867	; 0x8833
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002320:	9400      	str	r4, [sp, #0]
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002322:	f2c4 0601 	movt	r6, #16385	; 0x4001
  rccEnableAPB2(APB2_EN_MASK, FALSE);

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
 8002326:	f8ce 100c 	str.w	r1, [lr, #12]
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800232a:	f6c8 0c88 	movt	ip, #34952	; 0x8888

  /*
   * Initial GPIO setup.
   */
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
 800232e:	f8ce b004 	str.w	fp, [lr, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002332:	f640 13f0 	movw	r3, #2544	; 0x9f0
  GPIOA->CRL = config->PAData.crl;
 8002336:	f8ce 8000 	str.w	r8, [lr]
  GPIOB->ODR = config->PBData.odr;
 800233a:	60f9      	str	r1, [r7, #12]
  GPIOB->CRH = config->PBData.crh;
 800233c:	f8c7 a004 	str.w	sl, [r7, #4]
  GPIOB->CRL = config->PBData.crl;
 8002340:	f8c7 9000 	str.w	r9, [r7]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 8002344:	f04f 3788 	mov.w	r7, #2290649224	; 0x88888888
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
 8002348:	f46f 7940 	mvn.w	r9, #768	; 0x300
 800234c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002350:	f8c6 900c 	str.w	r9, [r6, #12]

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8002354:	f8df b650 	ldr.w	fp, [pc, #1616]	; 80029a8 <main+0x758>
  GPIOC->CRH = config->PCData.crh;
 8002358:	f8c6 c004 	str.w	ip, [r6, #4]
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 800235c:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
 8002360:	6037      	str	r7, [r6, #0]
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002362:	f44f 54c0 	mov.w	r4, #6144	; 0x1800
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
 8002366:	9e00      	ldr	r6, [sp, #0]
 8002368:	f642 3ef8 	movw	lr, #11256	; 0x2bf8
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800236c:	f640 18b8 	movw	r8, #2488	; 0x9b8
 8002370:	f2c2 0800 	movt	r8, #8192	; 0x2000
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8002374:	f2c4 0501 	movt	r5, #16385	; 0x4001
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002378:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800237c:	4699      	mov	r9, r3
 800237e:	f6c0 0e00 	movt	lr, #2048	; 0x800
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8002382:	f44f 4ca8 	mov.w	ip, #21504	; 0x5400
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
  GPIOC->CRL = config->PCData.crl;
  GPIOD->ODR = config->PDData.odr;
 8002386:	60e9      	str	r1, [r5, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002388:	f103 0a0c 	add.w	sl, r3, #12
  GPIOD->CRH = config->PDData.crh;
 800238c:	606f      	str	r7, [r5, #4]
 800238e:	f2c4 0c00 	movt	ip, #16384	; 0x4000
  GPIOD->CRL = config->PDData.crl;
 8002392:	602e      	str	r6, [r5, #0]
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 8002394:	60e1      	str	r1, [r4, #12]
 8002396:	f108 050c 	add.w	r5, r8, #12
  GPIOE->CRH = config->PEData.crh;
 800239a:	6067      	str	r7, [r4, #4]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800239c:	f1ab 0614 	sub.w	r6, fp, #20
  GPIOE->CRL = config->PEData.crl;
 80023a0:	6027      	str	r7, [r4, #0]
 80023a2:	2401      	movs	r4, #1
 80023a4:	f849 eb04 	str.w	lr, [r9], #4
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80023a8:	f04f 0e10 	mov.w	lr, #16
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80023ac:	615a      	str	r2, [r3, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80023ae:	f8c3 9004 	str.w	r9, [r3, #4]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80023b2:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80023b6:	f8c8 b02c 	str.w	fp, [r8, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80023ba:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
 80023be:	f8c8 500c 	str.w	r5, [r8, #12]
  tqp->prev = (thread_t *)tqp;
 80023c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80023c6:	f888 4000 	strb.w	r4, [r8]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80023ca:	721c      	strb	r4, [r3, #8]
  i2cp->config = NULL;
 80023cc:	f8c8 2004 	str.w	r2, [r8, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80023d0:	f8c8 2014 	str.w	r2, [r8, #20]
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 80023d4:	f8c8 201c 	str.w	r2, [r8, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80023d8:	f8c3 a00c 	str.w	sl, [r3, #12]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80023dc:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80023e0:	69c5      	ldr	r5, [r0, #28]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80023e2:	f103 0754 	add.w	r7, r3, #84	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 80023e6:	f640 6691 	movw	r6, #3729	; 0xe91
  SD2.usart = USART2;
#endif

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3, NULL, notify3);
  SD3.usart = USART3;
 80023ea:	f44f 4990 	mov.w	r9, #18432	; 0x4800
  tqp->prev = (thread_t *)tqp;
 80023ee:	f8c3 a010 	str.w	sl, [r3, #16]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80023f2:	619f      	str	r7, [r3, #24]
  iqp->q_rdptr   = bp;
 80023f4:	625f      	str	r7, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80023f6:	621f      	str	r7, [r3, #32]
 80023f8:	ea45 0a04 	orr.w	sl, r5, r4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80023fc:	f103 0c30 	add.w	ip, r3, #48	; 0x30
  iqp->q_top     = bp + size;
 8002400:	f103 0564 	add.w	r5, r3, #100	; 0x64
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002404:	f103 0b74 	add.w	fp, r3, #116	; 0x74
  oqp->q_notify  = onfy;
 8002408:	f6c0 0600 	movt	r6, #2048	; 0x800
 800240c:	f2c4 0900 	movt	r9, #16384	; 0x4000

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002410:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8002416:	f8c3 b040 	str.w	fp, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 800241a:	64de      	str	r6, [r3, #76]	; 0x4c
 800241c:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8002420:	61dd      	str	r5, [r3, #28]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8002422:	63dd      	str	r5, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8002424:	649d      	str	r5, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8002426:	645d      	str	r5, [r3, #68]	; 0x44
 8002428:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 800242c:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 8002430:	62db      	str	r3, [r3, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8002432:	651b      	str	r3, [r3, #80]	; 0x50
 8002434:	f2ce 0704 	movt	r7, #57348	; 0xe004

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002438:	f8c0 a01c 	str.w	sl, [r0, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800243c:	687d      	ldr	r5, [r7, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800243e:	f645 5abf 	movw	sl, #23999	; 0x5dbf

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002442:	f445 6b00 	orr.w	fp, r5, #2048	; 0x800
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002446:	f640 0344 	movw	r3, #2116	; 0x844

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800244a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800244e:	f44f 4661 	mov.w	r6, #57600	; 0xe100
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002452:	f640 1098 	movw	r0, #2456	; 0x998
 8002456:	f2c2 0300 	movt	r3, #8192	; 0x2000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800245a:	f8c7 b004 	str.w	fp, [r7, #4]
 800245e:	f2c2 0000 	movt	r0, #8192	; 0x2000

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002462:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
 8002466:	f2ce 0600 	movt	r6, #57344	; 0xe000
 800246a:	f04f 0c80 	mov.w	ip, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800246e:	f04f 5b80 	mov.w	fp, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002472:	f64f 79ff 	movw	r9, #65535	; 0xffff
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002476:	f44f 4a6d 	mov.w	sl, #60672	; 0xed00
 800247a:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
 800247e:	f2ce 0a00 	movt	sl, #57344	; 0xe000
  STM32_ST_TIM->CCMR1  = 0;
 8002482:	61aa      	str	r2, [r5, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002484:	636a      	str	r2, [r5, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8002486:	60ea      	str	r2, [r5, #12]
  STM32_ST_TIM->CR2    = 0;
 8002488:	606a      	str	r2, [r5, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800248a:	616c      	str	r4, [r5, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800248c:	602c      	str	r4, [r5, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800248e:	f886 c31c 	strb.w	ip, [r6, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002492:	f8c6 b180 	str.w	fp, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002496:	f8c6 b000 	str.w	fp, [r6]
 800249a:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800249c:	605b      	str	r3, [r3, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 800249e:	609a      	str	r2, [r3, #8]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80024a0:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80024a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80024a8:	f8c3 c068 	str.w	ip, [r3, #104]	; 0x68
  tp->mtxlist   = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80024ac:	661a      	str	r2, [r3, #96]	; 0x60
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80024ae:	f883 404e 	strb.w	r4, [r3, #78]	; 0x4e
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80024b2:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
  H_NEXT(&default_heap.header) = NULL;
 80024b6:	6082      	str	r2, [r0, #8]
  H_PAGES(&default_heap.header) = 0;
 80024b8:	60c2      	str	r2, [r0, #12]
 80024ba:	f8da 500c 	ldr.w	r5, [sl, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	f64f 06ff 	movw	r6, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80024c2:	f44f 7440 	mov.w	r4, #768	; 0x300
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	402e      	ands	r6, r5
  tp->name      = name;
 80024c8:	f642 3b48 	movw	fp, #11080	; 0x2b48
  reg_value  =  (reg_value                                   |
 80024cc:	f2c0 54fa 	movt	r4, #1530	; 0x5fa
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80024d0:	f241 19a1 	movw	r9, #4513	; 0x11a1
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80024d4:	f103 071c 	add.w	r7, r3, #28
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 80024d8:	8499      	strh	r1, [r3, #36]	; 0x24
 80024da:	4334      	orrs	r4, r6
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80024dc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80024e0:	f6c0 0b00 	movt	fp, #2048	; 0x800
 80024e4:	f6c0 0900 	movt	r9, #2048	; 0x800
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 80024e8:	f640 1590 	movw	r5, #2448	; 0x990
 80024ec:	f640 2c70 	movw	ip, #2672	; 0xa70
  ch_memcore.endmem  = __heap_end__;
 80024f0:	f242 0600 	movw	r6, #8192	; 0x2000
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80024f4:	61df      	str	r7, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80024f6:	621f      	str	r7, [r3, #32]
 80024f8:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80024fc:	eb00 070e 	add.w	r7, r0, lr
  REG_INSERT(tp);
 8002500:	f103 0b2c 	add.w	fp, r3, #44	; 0x2c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8002504:	6559      	str	r1, [r3, #84]	; 0x54
 8002506:	f8c0 9000 	str.w	r9, [r0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800250a:	f103 0158 	add.w	r1, r3, #88	; 0x58
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800250e:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002512:	f2c2 0c00 	movt	ip, #8192	; 0x2000
  ch_memcore.endmem  = __heap_end__;
 8002516:	f2c2 0600 	movt	r6, #8192	; 0x2000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800251a:	f64e 59f0 	movw	r9, #60912	; 0xedf0
  ch.vtlist.delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 800251e:	84da      	strh	r2, [r3, #38]	; 0x26
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8002520:	665a      	str	r2, [r3, #100]	; 0x64
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002522:	649a      	str	r2, [r3, #72]	; 0x48
 8002524:	6182      	str	r2, [r0, #24]
 8002526:	6107      	str	r7, [r0, #16]
  tqp->prev = (thread_t *)tqp;
 8002528:	6147      	str	r7, [r0, #20]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 800252a:	f8c3 b010 	str.w	fp, [r3, #16]
 800252e:	f8c3 b014 	str.w	fp, [r3, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002532:	f8c3 b018 	str.w	fp, [r3, #24]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002536:	6599      	str	r1, [r3, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 8002538:	65d9      	str	r1, [r3, #92]	; 0x5c
 800253a:	63db      	str	r3, [r3, #60]	; 0x3c
 800253c:	641b      	str	r3, [r3, #64]	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 800253e:	f8c5 c000 	str.w	ip, [r5]
  ch_memcore.endmem  = __heap_end__;
 8002542:	606e      	str	r6, [r5, #4]
 8002544:	f2ce 0900 	movt	r9, #57344	; 0xe000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002548:	f8ca 400c 	str.w	r4, [sl, #12]
 800254c:	f8d9 100c 	ldr.w	r1, [r9, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002554:	f2ce 0300 	movt	r3, #57344	; 0xe000

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002558:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800255c:	f8c9 100c 	str.w	r1, [r9, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002560:	6818      	ldr	r0, [r3, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	2120      	movs	r1, #32
 8002564:	f040 0001 	orr.w	r0, r0, #1
 8002568:	6018      	str	r0, [r3, #0]
 800256a:	f88a e01f 	strb.w	lr, [sl, #31]
 800256e:	f88a 1022 	strb.w	r1, [sl, #34]	; 0x22
 8002572:	f382 8811 	msr	BASEPRI, r2
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002576:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002578:	2320      	movs	r3, #32
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f640 0244 	movw	r2, #2116	; 0x844
 8002582:	f2c2 0200 	movt	r2, #8192	; 0x2000
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8002586:	f640 03b8 	movw	r3, #2232	; 0x8b8
 800258a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 800258e:	2401      	movs	r4, #1
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8002590:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8002594:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002598:	f241 67f1 	movw	r7, #5873	; 0x16f1

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 800259c:	f8de c008 	ldr.w	ip, [lr, #8]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80025a0:	f8d2 9014 	ldr.w	r9, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80025a4:	f103 0a6c 	add.w	sl, r3, #108	; 0x6c
 80025a8:	f6c0 0700 	movt	r7, #2048	; 0x800
 80025ac:	f240 2665 	movw	r6, #613	; 0x265
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80025b0:	f642 3518 	movw	r5, #11032	; 0x2b18
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80025b4:	2100      	movs	r1, #0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80025b6:	f103 0090 	add.w	r0, r3, #144	; 0x90
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80025ba:	f8c3 a09c 	str.w	sl, [r3, #156]	; 0x9c
 80025be:	66df      	str	r7, [r3, #108]	; 0x6c
 80025c0:	f6c0 0600 	movt	r6, #2048	; 0x800
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80025c4:	f103 07bc 	add.w	r7, r3, #188	; 0xbc
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80025c8:	f04f 0b02 	mov.w	fp, #2
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80025cc:	f6c0 0500 	movt	r5, #2048	; 0x800
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80025d0:	f103 0ab8 	add.w	sl, r3, #184	; 0xb8
  REG_INSERT(tp);
 80025d4:	f8c3 90a4 	str.w	r9, [r3, #164]	; 0xa4
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 80025d8:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80025dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80025e0:	f8c3 608c 	str.w	r6, [r3, #140]	; 0x8c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80025e4:	f883 b0b0 	strb.w	fp, [r3, #176]	; 0xb0
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80025e8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80025ec:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80025f0:	f883 40b2 	strb.w	r4, [r3, #178]	; 0xb2
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80025f4:	6719      	str	r1, [r3, #112]	; 0x70
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 80025f6:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
#if CH_CFG_TIME_QUANTUM > 0
  tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 80025fa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80025fe:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8002602:	f8c9 0010 	str.w	r0, [r9, #16]
 8002606:	6150      	str	r0, [r2, #20]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002608:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800260c:	f8c3 a0b8 	str.w	sl, [r3, #184]	; 0xb8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8002610:	f8c3 70bc 	str.w	r7, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 8002614:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002618:	f1bc 0f00 	cmp.w	ip, #0
 800261c:	f000 814c 	beq.w	80028b8 <main+0x668>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002620:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 8002624:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002626:	6891      	ldr	r1, [r2, #8]
 8002628:	2900      	cmp	r1, #0
 800262a:	d1fb      	bne.n	8002624 <main+0x3d4>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800262c:	6854      	ldr	r4, [r2, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800262e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
 8002632:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
 8002636:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
 8002638:	6050      	str	r0, [r2, #4]
 800263a:	f381 8811 	msr	BASEPRI, r1
 *
 * @init
 */
void lcdObjectInit(LCDDriver *lcdp){

  lcdp->state  = LCD_STOP;
 800263e:	f640 0438 	movw	r4, #2104	; 0x838
  lcdp->config = NULL;
 8002642:	2300      	movs	r3, #0
 *
 * @init
 */
void lcdObjectInit(LCDDriver *lcdp){

  lcdp->state  = LCD_STOP;
 8002644:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002648:	2201      	movs	r2, #1
/*
  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_PUSHPULL);
*/

  palSetPadMode(GPIOB, 6, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 800264a:	2040      	movs	r0, #64	; 0x40
 800264c:	f642 3638 	movw	r6, #11064	; 0x2b38
 8002650:	7022      	strb	r2, [r4, #0]
  lcdp->config = NULL;
 8002652:	6063      	str	r3, [r4, #4]
  lcdp->backlight = 0;
 8002654:	7063      	strb	r3, [r4, #1]
 8002656:	9601      	str	r6, [sp, #4]
 8002658:	f7ff fbaa 	bl	8001db0 <_pal_lld_setgroupmode.constprop.10>
 800265c:	f642 3660 	movw	r6, #11104	; 0x2b60
  palSetPadMode(GPIOB, 7, PAL_MODE_STM32_ALTERNATE_OPENDRAIN);
 8002660:	2080      	movs	r0, #128	; 0x80
 8002662:	9600      	str	r6, [sp, #0]
 8002664:	f7ff fba4 	bl	8001db0 <_pal_lld_setgroupmode.constprop.10>
 8002668:	9e01      	ldr	r6, [sp, #4]
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800266a:	f640 19b8 	movw	r9, #2488	; 0x9b8
 800266e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002672:	9601      	str	r6, [sp, #4]
 8002674:	9e00      	ldr	r6, [sp, #0]

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8002676:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800267a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800267e:	9600      	str	r6, [sp, #0]
 8002680:	4dc7      	ldr	r5, [pc, #796]	; (80029a0 <main+0x750>)
 8002682:	4ec8      	ldr	r6, [pc, #800]	; (80029a4 <main+0x754>)
 8002684:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8002688:	f2c4 0a02 	movt	sl, #16386	; 0x4002
  osalDbgCheck((lcdp != NULL) && (config != NULL));

  osalDbgAssert((lcdp->state == LCD_STOP) || (lcdp->state == LCD_ACTIVE),
              "lcdStart(), invalid state");

  lcdp->config = config;
 800268c:	9a01      	ldr	r2, [sp, #4]
  lcdp->backlight = lcdp->config->backlight;
 800268e:	2301      	movs	r3, #1
 8002690:	7063      	strb	r3, [r4, #1]
  osalDbgCheck((lcdp != NULL) && (config != NULL));

  osalDbgAssert((lcdp->state == LCD_STOP) || (lcdp->state == LCD_ACTIVE),
              "lcdStart(), invalid state");

  lcdp->config = config;
 8002692:	6062      	str	r2, [r4, #4]
 8002694:	2320      	movs	r3, #32
 8002696:	f383 8811 	msr	BASEPRI, r3
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 800269a:	f898 b000 	ldrb.w	fp, [r8]
 800269e:	9b00      	ldr	r3, [sp, #0]
 80026a0:	f1bb 0f01 	cmp.w	fp, #1
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80026a4:	f8d8 7034 	ldr.w	r7, [r8, #52]	; 0x34

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80026a8:	bf18      	it	ne
 80026aa:	f642 3060 	movwne	r0, #11104	; 0x2b60
 80026ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80026b2:	bf1c      	itt	ne
 80026b4:	f6c0 0000 	movtne	r0, #2048	; 0x800
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 80026b8:	463b      	movne	r3, r7

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80026ba:	f000 810c 	beq.w	80028d6 <main+0x686>
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80026be:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80026c2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80026c6:	f8d1 c004 	ldr.w	ip, [r1, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80026ca:	f8d2 b004 	ldr.w	fp, [r2, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80026ce:	f107 0210 	add.w	r2, r7, #16
 80026d2:	f8cc 2008 	str.w	r2, [ip, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80026d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80026da:	f44f 6c10 	mov.w	ip, #2304	; 0x900
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
 80026de:	f04f 0e00 	mov.w	lr, #0
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80026e2:	f8cb 2008 	str.w	r2, [fp, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80026e6:	6039      	str	r1, [r7, #0]
  dp->CR1 = 0;
 80026e8:	f8c7 e000 	str.w	lr, [r7]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80026ec:	f8c7 c004 	str.w	ip, [r7, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80026f6:	4011      	ands	r1, r2
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80026f8:	f890 b008 	ldrb.w	fp, [r0, #8]
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 80026fc:	6842      	ldr	r2, [r0, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80026fe:	6059      	str	r1, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002700:	f8d3 c004 	ldr.w	ip, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002704:	f248 61a0 	movw	r1, #34464	; 0x86a0
 8002708:	f2c0 0101 	movt	r1, #1
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800270c:	f04c 0c18 	orr.w	ip, ip, #24

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002710:	428a      	cmp	r2, r1
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8002712:	f8c3 c004 	str.w	ip, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8002716:	f340 80d2 	ble.w	80028be <main+0x66e>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 800271a:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
 800271e:	f2c0 0106 	movt	r1, #6
 8002722:	428a      	cmp	r2, r1
 8002724:	bfc8      	it	gt
 8002726:	4672      	movgt	r2, lr
 8002728:	dc1b      	bgt.n	8002762 <main+0x512>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 800272a:	f1bb 0f02 	cmp.w	fp, #2
 800272e:	f000 8128 	beq.w	8002982 <main+0x732>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8002732:	f1bb 0f03 	cmp.w	fp, #3
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8002736:	bf01      	itttt	eq
 8002738:	eb02 0282 	addeq.w	r2, r2, r2, lsl #2
 800273c:	f44f 5158 	moveq.w	r1, #13824	; 0x3600
 8002740:	eb02 0282 	addeq.w	r2, r2, r2, lsl #2
 8002744:	f2c0 116e 	movteq	r1, #366	; 0x16e
 8002748:	bf01      	itttt	eq
 800274a:	fb91 f2f2 	sdiveq	r2, r1, r2
 800274e:	ea6f 4282 	mvneq.w	r2, r2, lsl #18
 8002752:	ea6f 4292 	mvneq.w	r2, r2, lsr #18
 8002756:	b292      	uxtheq	r2, r2
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8002758:	bf18      	it	ne
 800275a:	f648 72ff 	movwne	r2, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 800275e:	2108      	movs	r1, #8
 8002760:	6219      	str	r1, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8002762:	61da      	str	r2, [r3, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8002764:	7801      	ldrb	r1, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8002766:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8002768:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 800276a:	b292      	uxth	r2, r2
  switch (opmode) {
 800276c:	f000 8103 	beq.w	8002976 <main+0x726>
 8002770:	2903      	cmp	r1, #3
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8002772:	bf08      	it	eq
 8002774:	f042 020a 	orreq.w	r2, r2, #10
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8002778:	d005      	beq.n	8002786 <main+0x536>
 800277a:	2901      	cmp	r1, #1
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800277c:	bf02      	ittt	eq
 800277e:	f022 020a 	biceq.w	r2, r2, #10
 8002782:	0412      	lsleq	r2, r2, #16
 8002784:	0c12      	lsreq	r2, r2, #16
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8002786:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8002788:	683b      	ldr	r3, [r7, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 800278a:	2202      	movs	r2, #2
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	2300      	movs	r3, #0
 8002794:	f888 2000 	strb.w	r2, [r8]
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	2032      	movs	r0, #50	; 0x32
 800279e:	f7ff fa5f 	bl	8001c60 <chThdSleep>
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 80027a2:	2730      	movs	r7, #48	; 0x30
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027a4:	6863      	ldr	r3, [r4, #4]
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 80027a6:	f04f 0b34 	mov.w	fp, #52	; 0x34
  txbuf[1] = LCD_D(4) | LCD_D(5);
 80027aa:	f88d 700d 	strb.w	r7, [sp, #13]
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  uint8_t txbuf[2];
  osalThreadSleepMilliseconds(50);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 80027ae:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027b2:	7a19      	ldrb	r1, [r3, #8]
 80027b4:	aa03      	add	r2, sp, #12
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	2302      	movs	r3, #2
 80027ba:	f7ff f9f1 	bl	8001ba0 <i2cMasterTransmitTimeout.constprop.11>
 80027be:	2005      	movs	r0, #5
 80027c0:	f7ff fa4e 	bl	8001c60 <chThdSleep>
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027c4:	6863      	ldr	r3, [r4, #4]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 80027c6:	f88d 700d 	strb.w	r7, [sp, #13]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(5);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 80027ca:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027ce:	7a19      	ldrb	r1, [r3, #8]
 80027d0:	aa03      	add	r2, sp, #12
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	2302      	movs	r3, #2
 80027d6:	f7ff f9e3 	bl	8001ba0 <i2cMasterTransmitTimeout.constprop.11>
 80027da:	2001      	movs	r0, #1
 80027dc:	f7ff fa40 	bl	8001c60 <chThdSleep>
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027e0:	6863      	ldr	r3, [r4, #4]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
 80027e2:	f88d 700d 	strb.w	r7, [sp, #13]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);
  osalThreadSleepMilliseconds(1);

  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
 80027e6:	f88d b00c 	strb.w	fp, [sp, #12]
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027ea:	7a19      	ldrb	r1, [r3, #8]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	aa03      	add	r2, sp, #12
 80027f0:	2302      	movs	r3, #2
 80027f2:	f7ff f9d5 	bl	8001ba0 <i2cMasterTransmitTimeout.constprop.11>
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 80027f6:	6863      	ldr	r3, [r4, #4]
  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
 80027f8:	2124      	movs	r1, #36	; 0x24
  txbuf[1] = LCD_D(5);
 80027fa:	2220      	movs	r2, #32
  txbuf[0] = LCD_D(4) | LCD_D(5) | LCD_E;
  txbuf[1] = LCD_D(4) | LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  txbuf[0] = LCD_D(5) | LCD_E;
 80027fc:	f88d 100c 	strb.w	r1, [sp, #12]
  txbuf[1] = LCD_D(5);
 8002800:	f88d 200d 	strb.w	r2, [sp, #13]
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
 8002804:	7a19      	ldrb	r1, [r3, #8]
 8002806:	aa03      	add	r2, sp, #12
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	2302      	movs	r3, #2
 800280c:	f7ff f9c8 	bl	8001ba0 <i2cMasterTransmitTimeout.constprop.11>
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  /* Configuring data interface */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_FS | LCD_DATA_LENGHT |
                       lcdp->config->font | lcdp->config->lines);
 8002810:	6863      	ldr	r3, [r4, #4]
  txbuf[1] = LCD_D(5);
  i2cMasterTransmitTimeout(lcdp->config->i2cp, lcdp->config->slaveaddress,
                           txbuf, 2, NULL, 0, TIME_INFINITE);

  /* Configuring data interface */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_FS | LCD_DATA_LENGHT |
 8002812:	2000      	movs	r0, #0
 8002814:	7ad9      	ldrb	r1, [r3, #11]
 8002816:	7b1b      	ldrb	r3, [r3, #12]
 8002818:	f642 3720 	movw	r7, #11040	; 0x2b20
 800281c:	4319      	orrs	r1, r3
 800281e:	f041 0120 	orr.w	r1, r1, #32
 8002822:	f7ff fa2d 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
                       lcdp->config->font | lcdp->config->lines);

  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
 8002826:	2000      	movs	r0, #0
 8002828:	2108      	movs	r1, #8
 800282a:	f7ff fa29 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);
 800282e:	2000      	movs	r0, #0
 8002830:	2101      	movs	r1, #1
 8002832:	f7ff fa25 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
                       lcdp->config->cursor | lcdp->config->blinking);
 8002836:	6863      	ldr	r3, [r4, #4]
  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
 8002838:	2000      	movs	r0, #0
 800283a:	7a59      	ldrb	r1, [r3, #9]
 800283c:	7a9b      	ldrb	r3, [r3, #10]
 800283e:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002842:	4319      	orrs	r1, r3
 8002844:	f041 010c 	orr.w	r1, r1, #12
 8002848:	f7ff fa1a 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
                       lcdp->config->cursor | lcdp->config->blinking);

  /* Setting Entry Mode */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_EMS | LCD_EMS_ID);
 800284c:	2000      	movs	r0, #0
 800284e:	2106      	movs	r1, #6
 8002850:	f7ff fa16 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>

  i2cStart(lcdp->config->i2cp, lcdp->config->i2ccfg);
  /* Initializing HD44780 by instructions. */
  hd44780InitByIstructions(lcdp);

  lcdp->state = LCD_ACTIVE;
 8002854:	2302      	movs	r3, #2
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	2000      	movs	r0, #0

  i2cStart(lcdp->config->i2cp, lcdp->config->i2ccfg);
  /* Initializing HD44780 by instructions. */
  hd44780InitByIstructions(lcdp);

  lcdp->state = LCD_ACTIVE;
 800285a:	7023      	strb	r3, [r4, #0]
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 800285c:	f7ff fa10 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8002860:	2150      	movs	r1, #80	; 0x50
 8002862:	e001      	b.n	8002868 <main+0x618>
 8002864:	42b7      	cmp	r7, r6
 8002866:	d006      	beq.n	8002876 <main+0x626>
      hd44780WriteRegister(lcdp, LCD_DATA_R, *string);
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fa09 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 800286e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002872:	2900      	cmp	r1, #0
 8002874:	d1f6      	bne.n	8002864 <main+0x614>
  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8002876:	21a8      	movs	r1, #168	; 0xa8
 8002878:	2000      	movs	r0, #0
 800287a:	f642 3730 	movw	r7, #11056	; 0x2b30
 800287e:	f7ff f9ff 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
 8002882:	f6c0 0700 	movt	r7, #2048	; 0x800
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8002886:	2165      	movs	r1, #101	; 0x65
 8002888:	e001      	b.n	800288e <main+0x63e>
 800288a:	42af      	cmp	r7, r5
 800288c:	d006      	beq.n	800289c <main+0x64c>
      hd44780WriteRegister(lcdp, LCD_DATA_R, *string);
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff f9f6 	bl	8001c80 <hd44780WriteRegister.11289.constprop.6>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 8002894:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002898:	2900      	cmp	r1, #0
 800289a:	d1f6      	bne.n	800288a <main+0x63a>

	while(1){
  lcdStart(&LCDD1, &lcdcfg);
  lcdWriteString(&LCDD1, "Profe pasenos", 0);
  lcdWriteString(&LCDD1, "en 5.0",40);
  chThdSleepMilliseconds(10);
 800289c:	200a      	movs	r0, #10
 800289e:	f7ff f9df 	bl	8001c60 <chThdSleep>
	chprintf((BaseChannel *)&SD3, "prueba_lab %x\n\r" );
 80028a2:	f640 10f0 	movw	r0, #2544	; 0x9f0
 80028a6:	f642 21dc 	movw	r1, #10972	; 0x2adc
 80028aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028b2:	f7ff faad 	bl	8001e10 <chprintf.constprop.0>
 80028b6:	e6e9      	b.n	800268c <main+0x43c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80028b8:	f88e c020 	strb.w	ip, [lr, #32]
 80028bc:	e7fe      	b.n	80028bc <main+0x66c>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80028be:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 80028c2:	f2c0 116e 	movt	r1, #366	; 0x16e
 80028c6:	0052      	lsls	r2, r2, #1
 80028c8:	fb91 f2f2 	sdiv	r2, r1, r2
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 80028cc:	2119      	movs	r1, #25
 80028ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80028d2:	6219      	str	r1, [r3, #32]
 80028d4:	e745      	b.n	8002762 <main+0x512>
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80028d6:	229a      	movs	r2, #154	; 0x9a
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80028d8:	238a      	movs	r3, #138	; 0x8a
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80028da:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80028de:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80028e2:	f8da 0010 	ldr.w	r0, [sl, #16]
 80028e6:	2300      	movs	r3, #0
 80028e8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
      b = dmaStreamAllocate(i2cp->dmarx,
 80028ec:	f241 4121 	movw	r1, #5153	; 0x1421
 80028f0:	f640 12b8 	movw	r2, #2488	; 0x9b8

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80028f4:	f8ca 0010 	str.w	r0, [sl, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 80028f8:	f6c0 0100 	movt	r1, #2048	; 0x800

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 80028fc:	f8ca 3010 	str.w	r3, [sl, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8002900:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002904:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8002908:	f7ff f9fa 	bl	8001d00 <dmaStreamAllocate.constprop.13>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 800290c:	f640 41c1 	movw	r1, #3265	; 0xcc1
 8002910:	f640 12b8 	movw	r2, #2488	; 0x9b8
 8002914:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002918:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800291c:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8002920:	f7ff f9ee 	bl	8001d00 <dmaStreamAllocate.constprop.13>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8002924:	f8da 001c 	ldr.w	r0, [sl, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002928:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800292c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002930:	2250      	movs	r2, #80	; 0x50
 8002932:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002936:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800293a:	f8ca 001c 	str.w	r0, [sl, #28]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800293e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002942:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002946:	6019      	str	r1, [r3, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002948:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800294c:	f8c3 b184 	str.w	fp, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002950:	f8c3 b004 	str.w	fp, [r3, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002954:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002958:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 800295c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8002960:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002964:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8002968:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 800296c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8002970:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 8002974:	e6a3      	b.n	80026be <main+0x46e>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8002976:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 800297a:	4011      	ands	r1, r2
 800297c:	f041 0202 	orr.w	r2, r1, #2
 8002980:	e701      	b.n	8002786 <main+0x536>

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8002982:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8002986:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800298a:	f2c0 116e 	movt	r1, #366	; 0x16e
 800298e:	fb91 f2f2 	sdiv	r2, r1, r2
 8002992:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002996:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800299a:	b292      	uxth	r2, r2
 800299c:	e6df      	b.n	800275e <main+0x50e>
 800299e:	bf00      	nop
 80029a0:	08002b88 	.word	0x08002b88
 80029a4:	08002ba0 	.word	0x08002ba0
 80029a8:	08002be4 	.word	0x08002be4
 80029ac:	f3af 8000 	nop.w

080029b0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80029b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029b8:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80029ba:	4619      	mov	r1, r3
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80029c2:	680a      	ldr	r2, [r1, #0]
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	0792      	lsls	r2, r2, #30
 80029ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ce:	d5f8      	bpl.n	80029c2 <__early_init+0x12>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80029d0:	6819      	ldr	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80029d2:	2200      	movs	r2, #0
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80029d4:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80029d8:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80029da:	4619      	mov	r1, r3
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80029dc:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80029de:	684a      	ldr	r2, [r1, #4]
 80029e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e4:	f012 0f0c 	tst.w	r2, #12
 80029e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ec:	d1f7      	bne.n	80029de <__early_init+0x2e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80029ee:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80029f0:	4619      	mov	r1, r3
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 80029f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029f6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 80029f8:	680a      	ldr	r2, [r1, #0]
 80029fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fe:	0390      	lsls	r0, r2, #14
 8002a00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a04:	d5f8      	bpl.n	80029f8 <__early_init+0x48>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002a06:	685a      	ldr	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002a08:	4619      	mov	r1, r3
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8002a0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a0e:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a16:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002a18:	680a      	ldr	r2, [r1, #0]
 8002a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1e:	0192      	lsls	r2, r2, #6
 8002a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a24:	d5f8      	bpl.n	8002a18 <__early_init+0x68>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002a2e:	2110      	movs	r1, #16
#if STM32_HAS_USB
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#else
  RCC->CFGR = STM32_MCOSEL |                STM32_PLLMUL | STM32_PLLXTPRE |
 8002a30:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002a34:	6058      	str	r0, [r3, #4]
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8002a36:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002a38:	6859      	ldr	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002a3a:	461a      	mov	r2, r3
  FLASH->ACR = STM32_FLASHBITS;

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8002a3c:	f041 0102 	orr.w	r1, r1, #2
 8002a40:	6059      	str	r1, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002a42:	6853      	ldr	r3, [r2, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d1fa      	bne.n	8002a42 <__early_init+0x92>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
